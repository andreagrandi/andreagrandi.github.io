<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Andrea Grandi - HowTo, Microbit, Python</title><link href="https://www.andreagrandi.co.uk/" rel="alternate"></link><link href="https://www.andreagrandi.co.uk/feeds/howto-microbit-python.atom.xml" rel="self"></link><id>https://www.andreagrandi.co.uk/</id><updated>2016-01-26T22:41:00+00:00</updated><entry><title>Using BBC MicroBit accelerometer with Python</title><link href="https://www.andreagrandi.co.uk/2016/01/26/using-bbc-microbit-accelerometer-with-python/" rel="alternate"></link><published>2016-01-26T22:41:00+00:00</published><updated>2016-01-26T22:41:00+00:00</updated><author><name>admin</name></author><id>tag:www.andreagrandi.co.uk,2016-01-26:/2016/01/26/using-bbc-microbit-accelerometer-with-python/</id><summary type="html">&lt;p&gt;In these days I'm having a bit of fun with &lt;strong&gt;&lt;a href="https://www.microbit.co.uk/"&gt;BBC
MicroBit&lt;/a&gt;&lt;/strong&gt; board and I'm learning how to
use the different sensors available. The latest one I wanted to try was
the accelerometer. The board can "sense" if you are moving it in any of
the 3 dimensional axes: X …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In these days I'm having a bit of fun with &lt;strong&gt;&lt;a href="https://www.microbit.co.uk/"&gt;BBC
MicroBit&lt;/a&gt;&lt;/strong&gt; board and I'm learning how to
use the different sensors available. The latest one I wanted to try was
the accelerometer. The board can "sense" if you are moving it in any of
the 3 dimensional axes: X, Y, Z. According to the
&lt;a href="https://microbit-micropython.readthedocs.org/en/latest/accelerometer.html"&gt;documentation&lt;/a&gt;
there are four methods available that can be used to get these
values: &lt;strong&gt;microbit.accelerometer.get_values()&lt;/strong&gt; will return you a tuple
with all the 3 values,
while &lt;strong&gt;microbit.accelerometer.get_x()&lt;/strong&gt;, &lt;strong&gt;microbit.accelerometer.get_y()&lt;/strong&gt;, &lt;strong&gt;microbit.accelerometer.get_z()&lt;/strong&gt;
will give you the single values.&lt;/p&gt;
&lt;p&gt;The documentation on the official website doesn't explain much and for
example I didn't even know what was the range of the values I can get
back from these methods (by the way it's &lt;strong&gt;between -1024&lt;/strong&gt; and
&lt;strong&gt;1024&lt;/strong&gt;), so I decided to play with the code directly and write a very
simple example. The small example I wrote, shows a smile on the board
display if you keep it straight and shows a sad face if you bend it.
This is the result:&lt;/p&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/LX8fYBsOxA0" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;

&lt;p&gt;and this is all the needed code of the application:&lt;/p&gt;
&lt;p&gt;
&lt;script src="https://gist.github.com/andreagrandi/f4a7c8ee8597dde3070d.js"&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;In the next days I will try to play with more sensors and to publish
other examples.&lt;/p&gt;</content><category term="bbc"></category><category term="microbit"></category><category term="Python"></category></entry><entry><title>Getting started with BBC MicroBit and Python</title><link href="https://www.andreagrandi.co.uk/2015/12/10/getting-started-with-bbc-microbit-and-python/" rel="alternate"></link><published>2015-12-10T23:48:00+00:00</published><updated>2015-12-10T23:48:00+00:00</updated><author><name>admin</name></author><id>tag:www.andreagrandi.co.uk,2015-12-10:/2015/12/10/getting-started-with-bbc-microbit-and-python/</id><summary type="html">&lt;p&gt;A few days ago I had the great opportunity to attend an event organised
in collaboration with &lt;strong&gt;&lt;a href="https://www.python.org/"&gt;Python Software
Foundation&lt;/a&gt;&lt;/strong&gt;, a few &lt;strong&gt;primary school
teachers&lt;/strong&gt; and hosted by &lt;strong&gt;&lt;a href="http://www.computingatschool.org.uk/"&gt;Computing at
School&lt;/a&gt;&lt;/strong&gt;, in &lt;strong&gt;London&lt;/strong&gt;. The
meeting was organised by &lt;strong&gt;Yvonne Walker&lt;/strong&gt; (from CAS) and &lt;strong&gt;Nicholas
Tollervey&lt;/strong&gt; (PSF). The aim of the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few days ago I had the great opportunity to attend an event organised
in collaboration with &lt;strong&gt;&lt;a href="https://www.python.org/"&gt;Python Software
Foundation&lt;/a&gt;&lt;/strong&gt;, a few &lt;strong&gt;primary school
teachers&lt;/strong&gt; and hosted by &lt;strong&gt;&lt;a href="http://www.computingatschool.org.uk/"&gt;Computing at
School&lt;/a&gt;&lt;/strong&gt;, in &lt;strong&gt;London&lt;/strong&gt;. The
meeting was organised by &lt;strong&gt;Yvonne Walker&lt;/strong&gt; (from CAS) and &lt;strong&gt;Nicholas
Tollervey&lt;/strong&gt; (PSF). The aim of the meeting was for teachers and
developers to meet and discuss the opportunities offered
by &lt;strong&gt;&lt;a href="https://micropython.org/"&gt;MicroPython&lt;/a&gt;&lt;/strong&gt; on the &lt;strong&gt;&lt;a href="https://www.microbit.co.uk/"&gt;BBC
micro:bit&lt;/a&gt;&lt;/strong&gt;. During the event a
&lt;strong&gt;BBC&lt;/strong&gt; &lt;strong&gt;micro:bit&lt;/strong&gt; board was loaned to each person for the purpose of
developing Python scripts, MicroPython itself or educational resources
for the &lt;strong&gt;BBC micro:bit&lt;/strong&gt;. Nicholas made it very clear that there is an
&lt;strong&gt;NDA&lt;/strong&gt; in place until the device is delivered to the kids and explained
what we could or couldn't do.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/wp-content/uploads/2015/12/computing_at_school_microbit_reduced.jpg"&gt;&lt;img alt="computing_at_school_microbit_reduced" src="https://www.andreagrandi.it/wp-content/uploads/2015/12/computing_at_school_microbit_reduced.jpg"&gt;{.aligncenter
.wp-image-1094 width="729"
height="546"}&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Board&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/wp-content/uploads/2015/12/bbcfullbleed.jpg"&gt;&lt;img alt="bbcfullbleed" src="https://www.andreagrandi.it/wp-content/uploads/2015/12/bbcfullbleed.jpg"&gt;{.aligncenter
.wp-image-1082 width="515"
height="334"}&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The board is a 4 x 5 cm device with an &lt;strong&gt;ARM Cortex-M0&lt;/strong&gt; processor,
&lt;strong&gt;accelerometer&lt;/strong&gt; and magnetometer sensors, &lt;strong&gt;Bluetooth&lt;/strong&gt; and &lt;strong&gt;USB
connectivity&lt;/strong&gt;, a &lt;strong&gt;display&lt;/strong&gt; consisting of 25 LEDs, &lt;strong&gt;two programmable
buttons&lt;/strong&gt;, and can be powered by either USB or an external battery pack
(source: &lt;a href="https://en.wikipedia.org/wiki/Micro_Bit"&gt;https://en.wikipedia.org/wiki/Micro_Bit&lt;/a&gt; ).&lt;/p&gt;
&lt;h2&gt;Flashing the firmware&lt;/h2&gt;
&lt;p&gt;Once you get a new board, it probably doesn't have a proper firmware and
application flashed. I suggest you to download the &lt;strong&gt;Python MicroBit
REPL&lt;/strong&gt; from this repository: &lt;a href="https://github.com/ntoll/microrepl"&gt;https://github.com/ntoll/microrepl&lt;/a&gt;&lt;br&gt;
All you need to do is to connect the board to your computer, using a
&lt;strong&gt;micro-USB cable&lt;/strong&gt;. The device will be mounted as a volume. At this
point, drag &amp;amp; drop the file called
&lt;strong&gt;&lt;a href="https://github.com/ntoll/microrepl/blob/master/firmware.hex"&gt;firmware.hex&lt;/a&gt;&lt;/strong&gt;
into the mounted volume. The firmware will be flashed and during the
operation you will see a yellow led flashing.&lt;/p&gt;
&lt;h2&gt;Using MicroPython micro:bit REPL&lt;/h2&gt;
&lt;p&gt;To start writing some Python code on micro:bit you first need to clone
this &lt;a href="https://github.com/ntoll/microrepl"&gt;repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;``` {.lang:default .decode:true}
git clone git@github.com:ntoll/microrepl.git&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;once you have cloned the repository, you need to install the Python
dependencies (I suggest you to do it from inside a **virtualenv**)

``` {.lang:default .decode:true}
pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;start the MicroPython REPL&lt;/p&gt;
&lt;p&gt;``` {.lang:default .decode:true}
python microrepl.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;and&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;Python&lt;/span&gt; &lt;span class="s s-Atom"&gt;shell&lt;/span&gt; &lt;span class="s s-Atom"&gt;will&lt;/span&gt; &lt;span class="s s-Atom"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;so&lt;/span&gt; &lt;span class="s s-Atom"&gt;you&lt;/span&gt; &lt;span class="s s-Atom"&gt;can&lt;/span&gt; &lt;span class="s s-Atom"&gt;start&lt;/span&gt; &lt;span class="s s-Atom"&gt;writing&lt;/span&gt; &lt;span class="s s-Atom"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;like&lt;/span&gt;
&lt;span class="s s-Atom"&gt;this&lt;/span&gt; &lt;span class="s s-Atom"&gt;one&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="nn"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;python&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s s-Atom"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;microbit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;➜&lt;/span&gt;  &lt;span class="s s-Atom"&gt;microrepl&lt;/span&gt; &lt;span class="nn"&gt;git&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="s s-Atom"&gt;master&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;python&lt;/span&gt; &lt;span class="s s-Atom"&gt;microrepl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;py&lt;/span&gt;
&lt;span class="nv"&gt;Quit&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Ctrl&lt;/span&gt;&lt;span class="s s-Atom"&gt;+&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Stop&lt;/span&gt; &lt;span class="nn"&gt;program&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Ctrl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;C&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nv"&gt;Reset&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;Ctrl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;D&lt;/span&gt;
&lt;span class="nv"&gt;Type&lt;/span&gt; &lt;span class="s s-Atom"&gt;&amp;#39;help()&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;without&lt;/span&gt; &lt;span class="s s-Atom"&gt;the&lt;/span&gt; &lt;span class="s s-Atom"&gt;quotes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="s s-Atom"&gt;then&lt;/span&gt; &lt;span class="s s-Atom"&gt;press&lt;/span&gt; &lt;span class="nv"&gt;ENTER&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="s s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="s s-Atom"&gt;import&lt;/span&gt; &lt;span class="s s-Atom"&gt;this&lt;/span&gt;
&lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="nv"&gt;Zen&lt;/span&gt; &lt;span class="s s-Atom"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;MicroPython&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;Nicholas&lt;/span&gt; &lt;span class="nv"&gt;H&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;Tollervey&lt;/span&gt;

&lt;span class="nv"&gt;Code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nv"&gt;Hack&lt;/span&gt; &lt;span class="s s-Atom"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nv"&gt;Less&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s s-Atom"&gt;more&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nv"&gt;Keep&lt;/span&gt; &lt;span class="s s-Atom"&gt;it&lt;/span&gt; &lt;span class="s s-Atom"&gt;simple&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="nv"&gt;Small&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="s s-Atom"&gt;beautiful&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="nv"&gt;Be&lt;/span&gt; &lt;span class="s s-Atom"&gt;brave&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;Break&lt;/span&gt; &lt;span class="s s-Atom"&gt;things&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nv"&gt;Learn&lt;/span&gt; &lt;span class="s s-Atom"&gt;and&lt;/span&gt; &lt;span class="s s-Atom"&gt;have&lt;/span&gt; &lt;span class="s s-Atom"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
&lt;span class="nv"&gt;Express&lt;/span&gt; &lt;span class="s s-Atom"&gt;yourself&lt;/span&gt; &lt;span class="s s-Atom"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;MicroPython&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="nv"&gt;Happy&lt;/span&gt; &lt;span class="s s-Atom"&gt;hacking&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;:-)&lt;/span&gt;
&lt;span class="s s-Atom"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;BBC micro:bit MicroPython Editor&lt;/h2&gt;
&lt;p&gt;Typing all the Python commands directly into the shell can be a bit
difficult. You can use a very nice and dedicated editor to write code
and produce the compiled application for the micro:bit. All you need to
do is clone this &lt;a href="https://github.com/ntoll/upyed"&gt;repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{.lang:default .decode:true}
git clone git@github.com:ntoll/upyed.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Open the file named &lt;strong&gt;editor.html&lt;/strong&gt; with your browser and start writing
your code. When your code is done, you can generate the &lt;strong&gt;.hex&lt;/strong&gt; file
clicking on &lt;strong&gt;Download&lt;/strong&gt; button. To load the compiled application you
just need to drag &amp;amp; drop the .hex file to the mounted device, exactly
like you did the first time to flash it. If you need a reference for all
the methods and libraries available, you can consult the official
documentation
here &lt;a href="http://microbit-micropython.readthedocs.org/en/latest/index.html"&gt;http://microbit-micropython.readthedocs.org/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ntoll/microrepl"&gt;https://github.com/ntoll/microrepl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ntoll/upyed"&gt;https://github.com/ntoll/upyed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.microbit.co.uk/"&gt;https://www.microbit.co.uk/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://microbit-micropython.readthedocs.org/en/latest/index.html"&gt;http://microbit-micropython.readthedocs.org/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="microbit"></category><category term="psf"></category></entry></feed>