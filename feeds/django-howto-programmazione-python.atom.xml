<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Andrea Grandi - Django, HowTo, Programmazione, Python</title><link href="https://www.andreagrandi.co.uk/" rel="alternate"></link><link href="https://www.andreagrandi.co.uk/feeds/django-howto-programmazione-python.atom.xml" rel="self"></link><id>https://www.andreagrandi.co.uk/</id><updated>2015-08-29T15:50:00+01:00</updated><entry><title>Django Notes: read values from settings in a safe way</title><link href="https://www.andreagrandi.co.uk/2015/08/29/django-notes-read-values-from-settings-in-a-safe-way/" rel="alternate"></link><published>2015-08-29T15:50:00+01:00</published><updated>2015-08-29T15:50:00+01:00</updated><author><name>admin</name></author><id>tag:www.andreagrandi.co.uk,2015-08-29:/2015/08/29/django-notes-read-values-from-settings-in-a-safe-way/</id><summary type="html">&lt;p&gt;Working on &lt;strong&gt;Django&lt;/strong&gt; projects I find very often that many developers
access the values that are defined in &lt;strong&gt;settings&lt;/strong&gt; in this way&lt;/p&gt;
&lt;p&gt;``` {.lang:python .decode:true}
from django.conf import settings&lt;/p&gt;
&lt;p&gt;my_value = settings.MY_SETTING&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="n"&gt;happens&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;MY&lt;/span&gt;\&lt;span class="n"&gt;_SETTING&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="err"&gt;Â &lt;/span&gt;&lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;crash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;reliable&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;could&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;tries&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;maybe&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;
&lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;cleaner&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="sb"&gt;``&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="n"&gt;my_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MY_SETTING&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my-default-value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;getattr&lt;/strong&gt; will try to read &lt;strong&gt;MY_SETTING&lt;/strong&gt; value from &lt;strong&gt;settings.py&lt;/strong&gt;,
if the value doesn't exist &lt;strong&gt;my_value&lt;/strong&gt; will be assigned with
&lt;strong&gt;my-default-value&lt;/strong&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Working on &lt;strong&gt;Django&lt;/strong&gt; projects I find very often that many developers
access the values that are defined in &lt;strong&gt;settings&lt;/strong&gt; in this way&lt;/p&gt;
&lt;p&gt;``` {.lang:python .decode:true}
from django.conf import settings&lt;/p&gt;
&lt;p&gt;my_value = settings.MY_SETTING&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="n"&gt;happens&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;MY&lt;/span&gt;\&lt;span class="n"&gt;_SETTING&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="err"&gt;Â &lt;/span&gt;&lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;crash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;How&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
&lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;reliable&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt; &lt;span class="n"&gt;We&lt;/span&gt; &lt;span class="n"&gt;could&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;tries&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;maybe&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;
&lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;cleaner&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;do&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="sb"&gt;``&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="n"&gt;my_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MY_SETTING&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my-default-value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;getattr&lt;/strong&gt; will try to read &lt;strong&gt;MY_SETTING&lt;/strong&gt; value from &lt;strong&gt;settings.py&lt;/strong&gt;,
if the value doesn't exist &lt;strong&gt;my_value&lt;/strong&gt; will be assigned with
&lt;strong&gt;my-default-value&lt;/strong&gt;.&lt;/p&gt;</content><category term="Django"></category><category term="getattr"></category><category term="Python"></category><category term="settings"></category></entry><entry><title>How to write a custom Django Middleware</title><link href="https://www.andreagrandi.co.uk/2015/08/23/how-to-write-a-custom-django-middleware/" rel="alternate"></link><published>2015-08-23T21:46:00+01:00</published><updated>2015-08-23T21:46:00+01:00</updated><author><name>admin</name></author><id>tag:www.andreagrandi.co.uk,2015-08-23:/2015/08/23/how-to-write-a-custom-django-middleware/</id><summary type="html">&lt;p&gt;To understand how a &lt;strong&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/topics/http/middleware/"&gt;Django
Middleware&lt;/a&gt;&lt;/strong&gt;
works we need to remember that the basic architecture of Django is
composed by a &lt;strong&gt;request&lt;/strong&gt; and a &lt;strong&gt;response&lt;/strong&gt;. A middleware is something
that stays in the middle. Let's give a look to the next diagram, taken
from official Django documentation:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/wp-content/uploads/2015/08/middleware.png"&gt;&lt;img alt="middleware" src="https://www.andreagrandi.it/wp-content/uploads/2015/08/middleware.png"&gt;{.aligncenter
.size-full .wp-image-1012 width="601"
height="511"}&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Important things to know&lt;/h2&gt;
&lt;p&gt;There are fourÂ important things to know about middlewares:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need to write a class that just inherit from &lt;strong&gt;&lt;em&gt;object&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;order&lt;/strong&gt; where you place your middleware in &lt;strong&gt;settings.py&lt;/strong&gt; is
    important: middlewares are processed from top to bottom during a
    request and from bottom to top during a response.&lt;/li&gt;
&lt;li&gt;You don't need to implement all the available methods of a
    middleware. For example you can just implementÂ &lt;strong&gt;process_request&lt;/strong&gt;
    andÂ &lt;strong&gt;process_template_response&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If you implement &lt;strong&gt;process_request&lt;/strong&gt;Â and you decide to return an
    &lt;strong&gt;HttpResponse&lt;/strong&gt;, all the other middlewares, views etc... will be
    ignored and only your response will be returned&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Writing a middleware&lt;/h2&gt;
&lt;p&gt;In my example I wanted to implement a feature that saves the time when a
request is made and the time when a request has been processed, then
calculates the time delta and exposes this value in the context so that
is accessible from our templates. How to implement a similar feature
using a middleware? Here is my example:&lt;/p&gt;
&lt;p&gt;``` {.lang:python .decode:true}
from datetime import datetime&lt;/p&gt;
&lt;p&gt;class BenchmarkMiddleware(object):
    def process_request(self, request):
        request._request_time = datetime.now()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def process_template_response(self, request, response):
    response_time = request._request_time - datetime.now()
    response.context_data[&amp;#39;response_time&amp;#39;] = abs(response_time)
    return response
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Please don't care about howÂ I calculated the time. I'm aware that there
are better ways to do it, but I just wanted to keep it simple and show
how to implement a simple middleware.&lt;/p&gt;
&lt;p&gt;If you want to see a &lt;strong&gt;complete example&lt;/strong&gt; of a project that includes and
uses this middleware, here you can find the complete source
code:Â &lt;a href="https://github.com/andreagrandi/benchmark-middleware-example"&gt;https://github.com/andreagrandi/benchmark-middleware-example&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/topics/http/middleware/"&gt;https://docs.djangoproject.com/en/1.8/topics/http/middleware/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://agiliq.com/blog/2015/07/understanding-django-middlewares/"&gt;http://agiliq.com/blog/2015/07/understanding-django-middlewares/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.runnable.com/UrSGolK00ygpAAAQ/creating-a-custom-middleware-for-python-and-django"&gt;http://code.runnable.com/UrSGolK00ygpAAAQ/creating-a-custom-middleware-for-python-and-django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><content type="html">&lt;p&gt;To understand how a &lt;strong&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/topics/http/middleware/"&gt;Django
Middleware&lt;/a&gt;&lt;/strong&gt;
works we need to remember that the basic architecture of Django is
composed by a &lt;strong&gt;request&lt;/strong&gt; and a &lt;strong&gt;response&lt;/strong&gt;. A middleware is something
that stays in the middle. Let's give a look to the next diagram, taken
from official Django documentation:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/wp-content/uploads/2015/08/middleware.png"&gt;&lt;img alt="middleware" src="https://www.andreagrandi.it/wp-content/uploads/2015/08/middleware.png"&gt;{.aligncenter
.size-full .wp-image-1012 width="601"
height="511"}&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Important things to know&lt;/h2&gt;
&lt;p&gt;There are fourÂ important things to know about middlewares:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need to write a class that just inherit from &lt;strong&gt;&lt;em&gt;object&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;order&lt;/strong&gt; where you place your middleware in &lt;strong&gt;settings.py&lt;/strong&gt; is
    important: middlewares are processed from top to bottom during a
    request and from bottom to top during a response.&lt;/li&gt;
&lt;li&gt;You don't need to implement all the available methods of a
    middleware. For example you can just implementÂ &lt;strong&gt;process_request&lt;/strong&gt;
    andÂ &lt;strong&gt;process_template_response&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;If you implement &lt;strong&gt;process_request&lt;/strong&gt;Â and you decide to return an
    &lt;strong&gt;HttpResponse&lt;/strong&gt;, all the other middlewares, views etc... will be
    ignored and only your response will be returned&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Writing a middleware&lt;/h2&gt;
&lt;p&gt;In my example I wanted to implement a feature that saves the time when a
request is made and the time when a request has been processed, then
calculates the time delta and exposes this value in the context so that
is accessible from our templates. How to implement a similar feature
using a middleware? Here is my example:&lt;/p&gt;
&lt;p&gt;``` {.lang:python .decode:true}
from datetime import datetime&lt;/p&gt;
&lt;p&gt;class BenchmarkMiddleware(object):
    def process_request(self, request):
        request._request_time = datetime.now()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def process_template_response(self, request, response):
    response_time = request._request_time - datetime.now()
    response.context_data[&amp;#39;response_time&amp;#39;] = abs(response_time)
    return response
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;Please don't care about howÂ I calculated the time. I'm aware that there
are better ways to do it, but I just wanted to keep it simple and show
how to implement a simple middleware.&lt;/p&gt;
&lt;p&gt;If you want to see a &lt;strong&gt;complete example&lt;/strong&gt; of a project that includes and
uses this middleware, here you can find the complete source
code:Â &lt;a href="https://github.com/andreagrandi/benchmark-middleware-example"&gt;https://github.com/andreagrandi/benchmark-middleware-example&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/topics/http/middleware/"&gt;https://docs.djangoproject.com/en/1.8/topics/http/middleware/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://agiliq.com/blog/2015/07/understanding-django-middlewares/"&gt;http://agiliq.com/blog/2015/07/understanding-django-middlewares/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.runnable.com/UrSGolK00ygpAAAQ/creating-a-custom-middleware-for-python-and-django"&gt;http://code.runnable.com/UrSGolK00ygpAAAQ/creating-a-custom-middleware-for-python-and-django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="Django"></category><category term="HowTo"></category><category term="middleware"></category><category term="Python"></category><category term="tutorial"></category></entry></feed>