<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Andrea Grandi - website</title><link>https://www.andreagrandi.it/</link><description>Software Developer</description><lastBuildDate>Thu, 15 Oct 2020 20:00:00 +0200</lastBuildDate><item><title>Optimise your website JavaScript loading speed with defer</title><link>https://www.andreagrandi.it/2020/10/15/optimise-website-javascript-loading-speed/</link><description>&lt;p&gt;A simple way to optimise the websites loading speed by deferring javascript download&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Thu, 15 Oct 2020 20:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2020-10-15:/2020/10/15/optimise-website-javascript-loading-speed/</guid><category>Development</category><category>optimisation</category><category>optimise</category><category>javascript</category><category>js</category><category>website</category><category>web</category><category>performance</category><category>speed</category><category>defer</category><category>page</category><category>fast</category><category>loading</category><category>webpage</category><category>quicker</category></item><item><title>Improve your Pelican based website SEO by adding canonical url</title><link>https://www.andreagrandi.it/2020/10/14/improve-pelican-based-website-seo-adding-canonical-url/</link><description>&lt;p&gt;A quick trick to improve your Pelican based website SEO&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Wed, 14 Oct 2020 18:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2020-10-14:/2020/10/14/improve-pelican-based-website-seo-adding-canonical-url/</guid><category>Development</category><category>pelican</category><category>website</category><category>seo</category><category>canonical</category><category>url</category><category>optimisation</category><category>google</category><category>search</category></item><item><title>How to deploy a static website to Github Pages using CircleCI</title><link>https://www.andreagrandi.it/2019/02/24/how-to-deploy-static-website-github-pages-circleci/</link><description>&lt;p&gt;Since I created my blog with a static pages generator, I've been using TravisCI to automate the pages build and deployment.
My desire to learn something new (we are using CircleCI at work, but I never configured it from scratch) and the recent news about
TravisCI &lt;a href="https://blog.travis-ci.com/2019-01-23-travis-ci-joins-idera-inc"&gt;acquisition&lt;/a&gt; and employees &lt;a href="https://twitter.com/alicegoldfuss/status/1098604563664420865"&gt;layoff&lt;/a&gt;, led me to think about moving to a different service.&lt;/p&gt;
&lt;h2&gt;Github Pages&lt;/h2&gt;
&lt;p&gt;Every account on Github can use a special repository to publish static pages. In my case, since I have &lt;code&gt;github.com/andreagrandi&lt;/code&gt;, my special repository is
named &lt;code&gt;github.com/andreagrandi.github.io&lt;/code&gt;. Once I publish my pages there, they will be accessible from &lt;code&gt;https://andreagrandi.github.io&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You will need to use the &lt;strong&gt;master&lt;/strong&gt; branch of the special repository directly and not the &lt;strong&gt;gh-pages&lt;/strong&gt; branch which is available to each repository.&lt;/p&gt;
&lt;h2&gt;CircleCI&lt;/h2&gt;
&lt;p&gt;CircleCI is a very flexible and powerful continuous integration tool, which is also &lt;strong&gt;free&lt;/strong&gt; for open source projects. As long as your static website is located on a public repository on Github, you won't have to pay anything to use it. In my case, the surce code of this website is available at &lt;a href="https://github.com/andreagrandi/andreagrandi.it"&gt;https://github.com/andreagrandi/andreagrandi.it&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;You can find the complete configuration at &lt;a href="https://github.com/andreagrandi/andreagrandi.it/blob/master/.circleci/config.yml"&gt;this address&lt;/a&gt;.
The only value you won't find is &lt;strong&gt;GH_TOKEN&lt;/strong&gt;. You need to generate this token on Github, at this address: &lt;a href="https://github.com/settings/tokens"&gt;https://github.com/settings/tokens&lt;/a&gt;. Give it a nice description like "CircleCI deployment token", select &lt;strong&gt;repo&lt;/strong&gt; scope and finally click &lt;strong&gt;Generate token&lt;/strong&gt; button. This token will be used to &lt;code&gt;git push...&lt;/code&gt;
your pages once they are built. Please remember to keep this token &lt;strong&gt;secret&lt;/strong&gt; and not to publish it anywhere.&lt;/p&gt;
&lt;p&gt;In my configuration you may notice that I'm using &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; static websites generator, but apart from a few changes, the structure of the configuration should be very similar even if you use Jekill, Hugo etc... it doesn't really matter how you generate the pages, the &lt;strong&gt;deployment phase will be the same&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Deployment script&lt;/h3&gt;
&lt;p&gt;You will notice that there is a complete bash script embedded in the CircleCI configuration. This script configures git, fetches the existing &lt;code&gt;andreagrandi.github.io&lt;/code&gt; repository,
and sync the built pages with the existing ones (this avoid creating a commit which contains all the pages so it will contain just the added content). Once the commit is made, the script will finally push the changes to the repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; regardless of CircleCI settings, the deployment will only happens if we are pushing (or merging a pull request) to &lt;strong&gt;master&lt;/strong&gt; (&lt;code&gt;if [ "${CIRCLE_BRANCH}" = "master" ]; then&lt;/code&gt;) and it will actually commit and push pages only if there is something new to commit (&lt;code&gt;if git commit -m "CircleCI build $CIRCLE_BUILD_NUM pushed to Github Pages" ; then&lt;/code&gt;). For example if I'm just updating something in the CircleCI configuration, which doesn't change anything in the content, the pages won't be deployed again.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;My first impression of CircleCI is that is faster than TravisCI and this means that I can publish my content more quickly. The possibility of using Docker containers as base image is really powerful and in more complex scenarios we can reproduce the building environment locally on our machine. If you have any advices about how to improve my build script, feel free to leave a comment here.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sun, 24 Feb 2019 11:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2019-02-24:/2019/02/24/how-to-deploy-static-website-github-pages-circleci/</guid><category>Web</category><category>ci</category><category>circleci</category><category>github</category><category>static</category><category>website</category><category>deploy</category></item><item><title>Migrating from WordPress to a static generated website</title><link>https://www.andreagrandi.it/2017/07/02/migrating-from-wordpress-to-static-generated-website/</link><description>&lt;p&gt;As you may have noticed, my website looks very different compared to a few days ago.
It's just a different theme or template, I completely changed how the pages are generated and
I'm hosting it in a completely different way.&lt;/p&gt;
&lt;h3&gt;A brief history&lt;/h3&gt;
&lt;p&gt;When I started this blog 10 years ago, I was hosting it on a shared hosting service and it was based on &lt;strong&gt;WordPress&lt;/strong&gt;.
I then decided to keep WordPress as backend (I don't like PHP very much but I wasn't even good at front end development at the time,
so using a tool that allowed me to concentrate on the content rather than on design was a natural choice for me) but to move my website
to a &lt;strong&gt;VPS&lt;/strong&gt; on &lt;strong&gt;DigitalOcean&lt;/strong&gt;, where I've self-hosted &lt;strong&gt;Nginx + PHP + MySQL&lt;/strong&gt; and even Postfix for email aliases until a few days ago.&lt;/p&gt;
&lt;h3&gt;Why moving to a static website?&lt;/h3&gt;
&lt;p&gt;In these three or four years I've been using a VPS, I must say I've been good enough (or maybe lucky?) at keeping "bad people" out
of my server, but it's true that &lt;strong&gt;maintaining a VPS can be very time consuming&lt;/strong&gt; and you can never be sure that your website is always safe.
I've heard about static website before, but I was a bit skeptic because I had not spent enough time investigating all the possibilities
(search and comments are still possible, thanks to external services and plugins).&lt;/p&gt;
&lt;p&gt;Another advantage of a static website is that I can perfectly "run" (preview) on my local computer without publishing it online. Pages can be rendered locally
and will appear in the browser exactly as they will appear once published online.&lt;/p&gt;
&lt;p&gt;If you use a tool like WordPress, you need to be constantly connected to Internet to write any change. With static pages &lt;strong&gt;I can write my content offline&lt;/strong&gt;
(so I can do it while commuting on the train or while I'm flying somewhere) and publish it once I'm back online.&lt;/p&gt;
&lt;h3&gt;Pelican&lt;/h3&gt;
&lt;p&gt;The tool that I'm using to generate this website is called &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;. 
There are many &lt;a href="https://www.staticgen.com/"&gt;static website generators&lt;/a&gt;, the reason why I chose Pelican is because it's written in &lt;strong&gt;Python&lt;/strong&gt;,
so if I need to do any change I can do them and because its templates use Jinja2 which I'm already familiar with. It can also import posts from WordPress
(and I had over 180 posts to import from my previous website) so if you are migrating from it it's a good choice. Please note that the import script is not perfect
and that you may have to adjust some formatting here and there.&lt;/p&gt;
&lt;h3&gt;A new deployment pipeline&lt;/h3&gt;
&lt;p&gt;When you use WordPress your website is already online and all you have to do is to login, use the integrated editor, write content and finally publish it.
A static website doesn't have any admin tool, it's just static pages. How do you publish content then? There are of course multiple solutions available.
In my case my website source code is hosted in &lt;a href="https://github.com/andreagrandi/andreagrandi.it"&gt;a repository on GitHub&lt;/a&gt;. When I commit on &lt;strong&gt;master&lt;/strong&gt; branch
there is a webhook that triggers a &lt;a href="https://github.com/andreagrandi/andreagrandi.it/blob/master/.travis.yml"&gt;build job&lt;/a&gt; on &lt;a href="https://travis-ci.org/"&gt;TravisCI&lt;/a&gt;.
TravisCI fetches the latest source code, installs Pelican on the CI and builds the static pages. Once the build is finished, a &lt;a href="https://github.com/andreagrandi/andreagrandi.it/blob/master/deploy.sh"&gt;bash script&lt;/a&gt; is used to &lt;strong&gt;publish&lt;/strong&gt;
the generated pages on the static website hosting service.&lt;/p&gt;
&lt;h3&gt;Hosting a static website&lt;/h3&gt;
&lt;p&gt;The good thing about hosting a static website is that you don't need a database so you can host it almost anywhere at a cheaper price or even for free.
In my case I've decided to use &lt;strong&gt;GitHub pages&lt;/strong&gt;, mainly for simplicity. Every GitHub user can have a static website hosted at &amp;lt;yourusername&gt;.github.io for free.
To start using it, you just have to create a repository named &amp;lt;yourusername&gt;.github.io under your GitHub account. In my case the repository is &lt;a href="https://github.com/andreagrandi/andreagrandi.github.io"&gt;https://github.com/andreagrandi/andreagrandi.github.io&lt;/a&gt;. My deploy script simply takes the generated content
that is in the output/ folder and &lt;strong&gt;git push&lt;/strong&gt; it on this repository. Once the website has been pushed to git, it's immediately available at &lt;strong&gt;https://andreagrandi.github.io&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;CloudFlare&lt;/h4&gt;
&lt;p&gt;GitHub Pages service has a little limitation: you can either have your website served from a URL similar to the one I've just mentioned, including SSL support &lt;em&gt;or&lt;/em&gt; you can use your own domain, but &lt;strong&gt;you can't have both things&lt;/strong&gt; (SSL + custom domain). To workaround this, you can instruct your domain registrar (in my case is &lt;a href="https://www.gandi.net/"&gt;Gandi.net&lt;/a&gt;) to let CloudFlare manage your domain and just enabling "Full SSL" support will do the trick. I won't repeat here how to use CloudFlare since they have a very nice tutorial explaining how to configure their service to be used with GitHub Pages: &lt;a href="https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/"&gt;https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/&lt;/a&gt;. Remember to include a &lt;strong&gt;CNAME&lt;/strong&gt; file containing your domain name and let your static generetor put it on the root of your website, otherwise GitHub pages won't serve the pages correctly.&lt;/p&gt;
&lt;h4&gt;Why not Amazon S3?&lt;/h4&gt;
&lt;p&gt;While I was looking for instructions about how to host a static websites, I found many examples of websites using Amazon S3. There is nothing wrong with using this service (just keep in mind that it's not free, Amazon charges you for space usage and requests, so keep an eye on the AWS bill) but the way these websites were using it was completely wrong. The most common error I noticed was the fact they were enabling the &lt;strong&gt;flexible SSL&lt;/strong&gt; option on CloudFlare: this means that the connection between the visitor and CloudFlare was encrypted (and visitor could see the the SSL enabled) but the connection between CloudFlare and Amazon S3 was being served with &lt;strong&gt;HTTP only&lt;/strong&gt;, meaning that potentially the pages could have been modified before being served. Infact Amazon doesn't serve the S3 website buckets with SSL, they use plain HTTP (Why are you doing this Amazon?!). To use the S3 bucket correctly one should also configure Route 53 (to manage DNS) and CloudFront (the Amazon equivalent of CloudFlare service, beware because this is also charged separately depending on usage/traffic), making the whole setup a bit more complicated.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I finally moved away from my VPS and from now on I will be able to concentrate my time on content only instead of spending part of it to maintain my server. Last but not least, the possibility to write my content offline, will hopefully allow me to write from places (train, airplane) where I've never written from before. If you have any suggestion or if if you notice any error, feel free to leave a comment here below. In alternative, since now this blog is completely open source and on GitHub, you can fork it and make a pull request!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sun, 02 Jul 2017 13:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2017-07-02:/2017/07/02/migrating-from-wordpress-to-static-generated-website/</guid><category>Development</category><category>Python</category><category>Pelican</category><category>static</category><category>website</category><category>migration</category><category>CloudFlare</category><category>GitHub</category></item></channel></rss>