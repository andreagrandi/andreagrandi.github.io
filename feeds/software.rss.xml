<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Andrea Grandi - software</title><link>https://www.andreagrandi.it/</link><description>Software Developer</description><lastBuildDate>Thu, 21 Feb 2019 20:00:00 +0100</lastBuildDate><item><title>Skipping tests depending on the Python version</title><link>https://www.andreagrandi.it/2019/02/21/skipping-tests-depending-python-version/</link><description>&lt;p&gt;Sometimes we want to run certain tests only on a specific version of Python.&lt;/p&gt;
&lt;p&gt;Suppose you are migrating a large project from Python 2 to Python 3 and you know in advance that certain tests won't run
under Python 3.&lt;/p&gt;
&lt;p&gt;Chances are that during the migration you are already using the &lt;a href="https://pythonhosted.org/six/"&gt;six&lt;/a&gt; library. The &lt;strong&gt;six&lt;/strong&gt; libraries have
two boolean properties which are initialised to &lt;code&gt;True&lt;/code&gt; depending on the Python version which is being used: &lt;code&gt;PY2&lt;/code&gt; when running under Python 2
and &lt;code&gt;PY3&lt;/code&gt; when running under Python 3.&lt;/p&gt;
&lt;p&gt;This library, combined with the &lt;strong&gt;skipIf&lt;/strong&gt; method of &lt;a href="https://docs.python.org/3/library/unittest.html#skipping-tests-and-expected-failures"&gt;unittest library&lt;/a&gt;
can be used to easily skip tests when using Python 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;six&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;


    &lt;span class="nd"&gt;@unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;skipIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;six&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PY3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;not compatible with Python 3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# This test won&amp;#39;t run under Python 3&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Credits&lt;/h2&gt;
&lt;p&gt;Thanks to my colleague &lt;strong&gt;&lt;a href="https://github.com/valnico"&gt;Nicola&lt;/a&gt;&lt;/strong&gt; for giving me the inspiration to write this post.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Thu, 21 Feb 2019 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2019-02-21:/2019/02/21/skipping-tests-depending-python-version/</guid><category>Python</category><category>python</category><category>test</category><category>programming</category><category>software</category><category>development</category><category>testing</category></item><item><title>Installing Python and virtualenv on OSX</title><link>https://www.andreagrandi.it/2018/12/19/installing-python-and-virtualenv-on-osx/</link><description>&lt;p&gt;Every time I need to install Python on OSX or whenever a colleague asks for help, I have to search fo the most updated instructions on Google, and every time I find different ways of doing the exact same thing.&lt;/p&gt;
&lt;p&gt;Tired of this, I decided to write down my own notes. Please note that I don't claim this to be the best way of installing Python on OSX. It works fine for me so use it at your own risk.&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;To follow these instructions you need to at least have installed &lt;strong&gt;brew&lt;/strong&gt; on OSX. Please follow the instructions on the official website: &lt;a href="https://brew.sh"&gt;https://brew.sh&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Installing Python 3.7.x and Python 2.7.x&lt;/h2&gt;
&lt;p&gt;Even if I strongly suggest to start every new project with Python 3 (since Python 2 will only be supported until the end of 2019), there may be use cases when version 2 is still required, so I will give you the instructions to install both.&lt;/p&gt;
&lt;h3&gt;Installing Python 3.7.x&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will install Python 3 by default.&lt;/p&gt;
&lt;h3&gt;Installing Python 2.7.x&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install python@2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will install version 2 of Python.&lt;/p&gt;
&lt;h3&gt;Add the Python locations to PATH&lt;/h3&gt;
&lt;p&gt;Edit your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt; and add this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export PATH=&amp;quot;/usr/local/opt/python/libexec/bin:/usr/local/bin:$PATH&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will need to close your terminal and reopen it for the changes to be applied. Once you have done it, you can verify if Python 3 and Python 2 have been installed correctly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python --version
Python 3.7.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python2 --version
Python 2.7.15
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Install virtualenv and virtualenvwrapper&lt;/h2&gt;
&lt;p&gt;When working with Python, it's a good thing not to install packages system wide, but confine them in virtual environments. A good and well tested way of doing that is to use &lt;code&gt;virtualenv&lt;/code&gt; (and its companion &lt;code&gt;virtualenvwrapper&lt;/code&gt;) which makes the most common operations easier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install virtualenv
pip install virtualenvwrapper
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Those (and only those) two packages will be installed system wide, because we will need them to be available outside of a virtual environment.&lt;/p&gt;
&lt;h3&gt;Configure virtualenv&lt;/h3&gt;
&lt;p&gt;Edit again your &lt;code&gt;.bashrc&lt;/code&gt; (or &lt;code&gt;.zshrc&lt;/code&gt;) and add these lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export WORKON_HOME=~/.virtualenvs
[ -f /usr/local/bin/virtualenvwrapper.sh ] &amp;amp;&amp;amp; source /usr/local/bin/virtualenvwrapper.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will configure the default location where to store your virtual environments and will run a command every time you open a new terminal, to make sure &lt;code&gt;virtualenvwrapper&lt;/code&gt; can work correctly.&lt;/p&gt;
&lt;h2&gt;Test if the installed tools are working&lt;/h2&gt;
&lt;p&gt;To make sure everything has been configured correctly, please close and reopen your terminal and let's try to create a new virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkvirtualenv test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which should output something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Using base prefix &amp;#39;/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7&amp;#39;
New python executable in /Users/andrea/.virtualenvs/test/bin/python3.7
Also creating executable in /Users/andrea/.virtualenvs/test/bin/python
Installing setuptools, pip, wheel...
done.
virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/predeactivate
virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/postdeactivate
virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/preactivate
virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/postactivate
virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/get_env_details
(test) ➜  ~
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you see something similar, it means that the virtual environment has been created correctly. Please note that by default this command will create an environment base on Python 3. Do you need to create one for Python 2? No problem, you just need to do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkvirtualenv -p /usr/local/bin/python2 test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which should output this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Running virtualenv with interpreter /usr/local/bin/python2
New python executable in /Users/andrea/.virtualenvs/test/bin/python2.7
Also creating executable in /Users/andrea/.virtualenvs/test/bin/python
Installing setuptools, pip, wheel...
done.
virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/predeactivate
virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/postdeactivate
virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/preactivate
virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/postactivate
virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/get_env_details
(test) ➜  ~
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That's all you have to do to install and configure Python and virtualenv on OSX. If you have problems, comments or questions, feel free to leave a comment on this post.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Wed, 19 Dec 2018 15:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2018-12-19:/2018/12/19/installing-python-and-virtualenv-on-osx/</guid><category>Python</category><category>python</category><category>osx</category><category>programming</category><category>software</category><category>development</category></item><item><title>Why I mentor on Exercism.io</title><link>https://www.andreagrandi.it/2018/11/04/why-i-mentor-on-exercism/</link><description>&lt;p&gt;Exercism (&lt;a href="https://exercism.io"&gt;https://exercism.io&lt;/a&gt;) is a platform that has been created to help people improving their coding skills, thanks to the volunteers mentoring the students. There are tracks for almost all the popular languages and each track has coding tests that the students can download, solve offline using their preferred editor, and test the solution against the provided unit tests. Once the solution is ready to be reviewed (or even if it's not complete but the student needs help), it can be submitted to the website and it will go in a queue where the first available mentor will pick it and start mentoring.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;service is free&lt;/strong&gt; to use for all the students and &lt;strong&gt;the mentors are all volunteers&lt;/strong&gt; (this doesn't mean that the platform doesn't have any costs. If you are curious about the resources needed to keep the platform alive, you can give a look at &lt;a href="https://www.reddit.com/r/Python/comments/9tugvn/exercismio_needs_python_mentors/e8zy5mq/"&gt;this answer on Reddit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I found out about the platform, I decided to use it (as student) to &lt;strong&gt;improve my Go coding skills&lt;/strong&gt;. I must say that I've been learning a lot from the mentors and some of them are putting a lot of effort to give you all the possible advices to improve your coding style. In a single exercise once, I learnt at least five things about Go I didn't know before!&lt;/p&gt;
&lt;p&gt;I've been a Python developer (professionally) for the last 5 years, but I've never considered myself an "expert". I decided to give it a try with mentoring, because I felt I wanted to &lt;strong&gt;give something back to the community&lt;/strong&gt;, so I registered as mentor too and started mentoring in the Python track.&lt;/p&gt;
&lt;p&gt;The first surprise has been that mentoring other students, I was probably learning more than how much I was teaching. First of all, once you already know how to solve a problem, it's always interesting to look at other possible solutions. I've found sometimes that students were providing better (more concise and readable) solutions than mine. Last but not least, before advising someone about conding style or a more idiomatic solution, I always double check things from different sources. There is nothing wrong making mistakes, especially if you are learning... but it would be damaging for the student if I was teaching them something wrong, so I need to be sure about what I say. This of course makes me study, even the basic things, again and again and at the end of the day, my skills are better too.&lt;/p&gt;
&lt;p&gt;Once you join the mentors group, you are invited to a private Slack where you can count on the help of other mentors (we have channels for each track/language) or ask questions. So, if you are not sure about something, you can always ask around.&lt;/p&gt;
&lt;p&gt;If my story and experience convinced you, &lt;strong&gt;Exercism is looking for more mentors!&lt;/strong&gt; The more we have available, the less time the students have to wait in a queue to be mentored. You can find all the instructions at this address &lt;a href="https://mentoring.exercism.io/"&gt;https://mentoring.exercism.io&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sun, 04 Nov 2018 13:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2018-11-04:/2018/11/04/why-i-mentor-on-exercism/</guid><category>Python</category><category>python</category><category>mentoring</category><category>programming</category><category>software</category><category>development</category><category>exercism</category><category>student</category></item><item><title>Using ipdb with Python 3.7.x breakpoint</title><link>https://www.andreagrandi.it/2018/10/16/using-ipdb-with-python-37-breakpoint/</link><description>&lt;p&gt;Python 3.7.x introduced a &lt;a href="https://docs.python.org/3/whatsnew/3.7.html#pep-553-built-in-breakpoint"&gt;new method to insert a breakpoint&lt;/a&gt; in the code.
Before Python 3.7.x to insert a debugging point we had to write &lt;code&gt;import pdb; pdb.set_trace()&lt;/code&gt; which honestly I could never remember (and I also created a snippet on VS Code to auto complete it).&lt;/p&gt;
&lt;p&gt;Now you can just write &lt;code&gt;breakpoint()&lt;/code&gt; that's it!&lt;/p&gt;
&lt;p&gt;Now... the only problem is that by default that command will use &lt;strong&gt;pdb&lt;/strong&gt; which is not exactly the best debugger you can have. I usually use &lt;strong&gt;ipdb&lt;/strong&gt; but there wasn't an intuitive way of using it... and no, just installing it in your virtual environment, it won't be used by default.&lt;/p&gt;
&lt;p&gt;How to use it then? It's very simple. The new debugging command will read an environment variable named &lt;strong&gt;PYTHONBREAKPOINT&lt;/strong&gt;. If you set it properly, you will be able to use ipdb instead of pdb.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export PYTHONBREAKPOINT=ipdb.set_trace
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, any time you use &lt;code&gt;breakpoint()&lt;/code&gt; in your code, &lt;strong&gt;ipdb&lt;/strong&gt; will be used instead of &lt;strong&gt;pdb&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/python-3-7s-new-builtin-breakpoint-a-quick-tour-4f1aebc444c"&gt;https://hackernoon.com/python-3-7s-new-builtin-breakpoint-a-quick-tour-4f1aebc444c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Tue, 16 Oct 2018 22:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2018-10-16:/2018/10/16/using-ipdb-with-python-37-breakpoint/</guid><category>Python</category><category>python</category><category>debugging</category><category>programming</category><category>software</category><category>development</category></item></channel></rss>