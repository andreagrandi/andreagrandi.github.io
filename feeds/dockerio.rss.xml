<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Andrea Grandi - docker.io</title><link>https://www.andreagrandi.it/</link><description></description><lastBuildDate>Sat, 25 Oct 2014 10:56:00 +0100</lastBuildDate><item><title>Automatically pull updated Docker images and restart containers with docker-puller</title><link>https://www.andreagrandi.it/2014/10/25/automatically-pull-updated-docker-images-and-restart-containers-with-docker-puller/</link><description>&lt;p&gt;If you use &lt;a href="https://docker.io"&gt;docker.io&lt;/a&gt; (or any similar service) to
build your &lt;strong&gt;Docker&lt;/strong&gt; containers, it may be possible that, once the new
image is generated, you want your Docker host to automatically pull it
and restart the container.&lt;/p&gt;
&lt;p&gt;Docker.io gives you the possibility to set a &lt;strong&gt;web hook&lt;/strong&gt; after a
successful build. Basically it does a POST on a defined URL and send
some informations in JSON format.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/glowdigitalmedia/docker-puller"&gt;docker-puller&lt;/a&gt;
listens to these web hooks and can be configured to run a particular
script, given a specific hook. It's a very simple service I wrote using
Python/Flask. It's also my first Flask application, so if you want to
improve it, feel free to send me a pull request on GitHub.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this is not the only existing service that is able to do this
task. I took inspiration from this
article &lt;a href="http://nathanleclaire.com/blog/2014/08/17/automagical-deploys-from-docker-hub/"&gt;http://nathanleclaire.com/blog/2014/08/17/automagical-deploys-from-docker-hub/&lt;/a&gt;
and I really tried to
customize &lt;a href="https://github.com/cpuguy83/dockerhub-webhook-listener"&gt;https://github.com/cpuguy83/dockerhub-webhook-listener&lt;/a&gt; for
my own needs, but the problem is that &lt;strong&gt;dockerhub-webhook-listener&lt;/strong&gt; is
not ready to be used as is (you have to customize it) and I'm not very
good with &lt;strong&gt;Golang&lt;/strong&gt; (yet) to be able to do it in little time. This is
why I rewrote the service in Python (that is my daily language). I want
to thank &lt;a href="https://github.com/cpuguy83"&gt;Brian Goff&lt;/a&gt; for the idea and all
the people in &lt;strong&gt;#docker @ FreeNode&lt;/strong&gt; for the support.&lt;/p&gt;
&lt;h3&gt;How to use docker-puller&lt;/h3&gt;
&lt;p&gt;Setting up the service should be quite easy. After you clone the
repository from https://github.com/glowdigitalmedia/docker-puller there
is a &lt;strong&gt;config.json&lt;/strong&gt; file where you define the &lt;strong&gt;host&lt;/strong&gt;, &lt;strong&gt;port&lt;/strong&gt;, a
&lt;strong&gt;token&lt;/strong&gt; and a list of &lt;strong&gt;hooks&lt;/strong&gt; you want to react to. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abc123&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;hooks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;scripts/hello.sh&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a &lt;strong&gt;bash script&lt;/strong&gt; (in this case it was called hello.sh) and put
it under script folder and write the instructions to be executed to pull
the new image and restart the container (example):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker pull andreagrandi/test:latest
docker stop &lt;span class="nb"&gt;test&lt;/span&gt;
docker rm &lt;span class="nb"&gt;test&lt;/span&gt;
docker run --name &lt;span class="nb"&gt;test&lt;/span&gt; -d -p &lt;span class="m"&gt;8000&lt;/span&gt;:80 andreagrandi/test:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once configured, I suggest you to setup a &lt;strong&gt;Nginx&lt;/strong&gt; entry (instructions
not covered here) that for example redirect
&lt;strong&gt;yourhost.com/dockerpuller&lt;/strong&gt; to &lt;strong&gt;localhost:8000&lt;/strong&gt; (I would advise to
enable SSL too, or people could be able to sniff your token). The
service can be started with: "&lt;strong&gt;python app.py&lt;/strong&gt;" (or you can setup a
Supervisor script).&lt;/p&gt;
&lt;p&gt;At this point docker-puller is up and running. Go to &lt;strong&gt;docker.io&lt;/strong&gt;
automatic build settings and setup a webhook like this:
&lt;strong&gt;http://yourhost.com/dockerpuller?token=abc123&amp;amp;hook=hello&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Every time docker.io finishes building and pushing your image to the
docker registry, it will &lt;strong&gt;POST&lt;/strong&gt; on that URL. docker-puller will catch
the POST, check for a valid token, get the hook name and will execute
the relative script.&lt;/p&gt;
&lt;p&gt;That's all! I hope this very simple service can be useful to other
people and once again, if you want to improve it, I will be glad to
accept your pull requests on GitHub.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sat, 25 Oct 2014 10:56:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2014-10-25:/2014/10/25/automatically-pull-updated-docker-images-and-restart-containers-with-docker-puller/</guid><category>containers</category><category>docker</category><category>docker.io</category><category>Flask</category><category>Python</category><category>howto</category><category>Linux</category></item></channel></rss>