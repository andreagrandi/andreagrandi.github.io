<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Andrea Grandi - Security</title><link>https://www.andreagrandi.it/</link><description>Software Developer</description><lastBuildDate>Sat, 21 Oct 2017 12:00:00 +0200</lastBuildDate><item><title>Keybase: PGP encryption made easy</title><link>https://www.andreagrandi.it/2017/10/21/keybase-pgp-encryption-made-easy/</link><description>&lt;p&gt;Using PGP can be quite hard, even if you have a lot of experience with computers.
By the way encryption is what gives us privacy and permits us to safely transmit information
and for this reason it should be easy to use, for everyone.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://keybase.io"&gt;Keybase&lt;/a&gt; really makes encryption easy to use.&lt;/p&gt;
&lt;h3&gt;PGP identity&lt;/h3&gt;
&lt;p&gt;When Keybase was launched it was mainly a wrapper for PGP commands
to encrypt and decrypt a message for a certain user, but it also introduced a very nice
chain of trust.&lt;/p&gt;
&lt;p&gt;In Keybase it's possible to either generate a new PGP key or import an existing one
but the most important thing is being able to verify our own identity using multiple proofs.&lt;/p&gt;
&lt;p&gt;Many of us have a personal blog, a Twitter or Facebook accounts, a GitHub account etc...
All these accounts combined together make our online identity.&lt;/p&gt;
&lt;p&gt;Every Keybase account can be verified by other online identities. In Keybase
you don't just say "I'm Andrea Grandi, this is my PGP key...". In Keybase you
can link your existing online accounts to your Keybase account and show additional
proofs of your identity.&lt;/p&gt;
&lt;p&gt;Unless an attacker controls all your social accounts, they cannot impersonate and verify
themselves as if they were you.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/images/2017/10/keybase_identity.png"&gt;&lt;img alt="" src="https://www.andreagrandi.it/images/2017/10/keybase_identity.png" width="100%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you are on Keybase, other users can look for you even using your GitHub or Twitter username
without having to know your email address or Keybase username. This concept can be
very useful in some situations, we will see it later.&lt;/p&gt;
&lt;h3&gt;Encrypted Filesystem&lt;/h3&gt;
&lt;p&gt;One of the first features launched by Keybase was their encrypted filesystem.
There is a virtual folder located at &lt;strong&gt;/keybase&lt;/strong&gt; (on OSX/Linux or k:\keybase on Windows)
where you will find at least three other folders: &lt;strong&gt;public&lt;/strong&gt;, &lt;strong&gt;private&lt;/strong&gt;, &lt;strong&gt;team&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Public folders&lt;/h4&gt;
&lt;p&gt;Anything you place inside the /public folder can be accessed by any Keybase user and it's
automatically signed. Every user public folder/file can be accessed using their Keybase username,
like for example &lt;strong&gt;/keybase/public/andreagrandi/hello.txt&lt;/strong&gt; but you can also use any other identity like
&lt;strong&gt;/keybase/public/andreagrandi@github/hello.txt&lt;/strong&gt; or &lt;strong&gt;/keybase/public/andreagrandi@twitter/hello.txt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is very useful if you only know a person on Twitter (or GitHub etc...) and you want to
share a file with them (or send a message, as we will see later) but you don't follow each other
and you can't reach them privately.&lt;/p&gt;
&lt;p&gt;This is a public folder example of one of the Keybase developers:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/images/2017/10/keybase_chris_folder.png"&gt;&lt;img alt="" src="https://www.andreagrandi.it/images/2017/10/keybase_chris_folder.png" width="60%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can put whatever you want in these folders: your public PGP key, your official avatar,
your Signal fingerprint etc... the other users will access these files with the assurance they
haven't been changed by anyone else in the middle.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; please keep in mind that Keybase doesn't work like Dropbox or similar. Files are not
synced between your devices and Keybase servers. Files are streamed on demand, so &lt;strong&gt;you won't be able to access these files without a working Internet connection&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Private folders&lt;/h4&gt;
&lt;p&gt;Hey but... where is the encryption here?! Whatever you put inside your &lt;strong&gt;private&lt;/strong&gt;
folder can only be read by you and only you. &lt;strong&gt;Not even Keybase employees can access the content of your files&lt;/strong&gt;,
because they are encrypted before leaving your devices and decrypted on demand
when you want to access them.&lt;/p&gt;
&lt;p&gt;Do you want to share files with &lt;strong&gt;anotheruser&lt;/strong&gt;? No problem. Just create a file inside &lt;strong&gt;/keybase/private/andreagrandi,anotheruser&lt;/strong&gt;
(the folder &lt;strong&gt;andreagrandi,anotheruser&lt;/strong&gt; will implicitely exist already) and that file will only be readable by you and &lt;strong&gt;anotheruser&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;Security and other information&lt;/h4&gt;
&lt;p&gt;Keybase employes only have access to: 1) your top level folder names (like: "andreagrandi,anotheruser"),
2) when and for how long you are reading/writing, 3) how much space you are using.&lt;/p&gt;
&lt;p&gt;They won't be able to access the content of your files and not even the files or folders names.&lt;/p&gt;
&lt;p&gt;Every user initially had 10GB quota available, but a few hints (including one of their &lt;a href="https://www.andreagrandi.it/images/2017/10/teams-splash-announcement.png"&gt;recent screenshots&lt;/a&gt;)
say that now &lt;strong&gt;users have 250GB available&lt;/strong&gt; to store their files.&lt;/p&gt;
&lt;p&gt;You can find more technical information about Keybase encrypted folders in this article: &lt;a href="https://keybase.io/docs/kbfs"&gt;https://keybase.io/docs/kbfs&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Encrypted Chat&lt;/h3&gt;
&lt;p&gt;A few months ago Keybase introduced the encrypted chat. Messages between users
are &lt;strong&gt;end to end encrypted&lt;/strong&gt; and cannot be read by anyone else, not even having access to Keybase
servers.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/images/2017/10/keybase_chat.png"&gt;&lt;img alt="" src="https://www.andreagrandi.it/images/2017/10/keybase_chat.png" width="100%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;A better address book&lt;/h4&gt;
&lt;p&gt;When we use services like WhatsApp or Signal, we are forced to share our telephone number if we want
the other person to be able to contact us.&lt;/p&gt;
&lt;p&gt;On Keybase I don't need to share my telephone number. Anyone can reach me using one of my online
identities: &lt;strong&gt;andreagrandi@twitter&lt;/strong&gt;, &lt;strong&gt;andreagrandi@github&lt;/strong&gt; etc...&lt;/p&gt;
&lt;p&gt;You can even send a message to a person who is &lt;strong&gt;not on Keybase yet&lt;/strong&gt;: if you send a message to
randomuser@twitter, when randomuser joins Keybase and verify their Twitter account, the message
will be encrypted for them and will be safely delivered.&lt;/p&gt;
&lt;h4&gt;Security&lt;/h4&gt;
&lt;p&gt;Keybase doesn't use PGP to encrypt chat or files. Transmitting the key across all devices
wouldn't be safe so each message is encrypted using the public key of every device connected
to the account.&lt;/p&gt;
&lt;h4&gt;Command line&lt;/h4&gt;
&lt;p&gt;Keybase works from the command line too. There is no need to use the graphic
client to send a message to another user, you can do something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;keybase chat send andreagrandi &lt;span class="s2"&gt;&amp;quot;Hello mate!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can integrate messages in any script and it's even available a JSON API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;keybase chat &lt;span class="nb"&gt;help&lt;/span&gt; api
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more details you can have a look a this blog post on their website: &lt;a href="https://keybase.io/blog/keybase-chat"&gt;https://keybase.io/blog/keybase-chat&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Teams&lt;/h3&gt;
&lt;p&gt;Keybase has recently introduced Teams feature. The Chat becomes more similar to Slack, but with the difference that
only team members can read the content of messages and files: the server only knows about team names and users, nobody else can
access the content.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/images/2017/10/teams-splash-announcement.png"&gt;&lt;img alt="" src="https://www.andreagrandi.it/images/2017/10/teams-splash-announcement.png" width="100%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's important to mention that in Keybase there aren't private channels like there are in Slack: if a team wants to have
channels accessible only from a restricted group of users, the admin needs to create a sub team. For example if you have a
team called &lt;strong&gt;keybaselovers&lt;/strong&gt; you can create a sub team for admins only called &lt;strong&gt;keybaselovers.admins&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Teams have a dedicated encrypter folder that you will find under &lt;strong&gt;/keybase/team/keybaselovers&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At the moment the features available from the UI are quite limited and are only available from the command line. In the next
weeks these features will be available from the UI too. In the mean time you can have a look at the commandline help:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;keybase team --help &lt;span class="c1"&gt;# for admin&amp;#39;ing teams&lt;/span&gt;
keybase chat --help &lt;span class="c1"&gt;# for admin&amp;#39;ing chat channels&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Create a Team&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;keybase team create keybaselovers
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Add a user to a Team&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;keybase team add-member keybaselovers --user&lt;span class="o"&gt;=&lt;/span&gt;alice --role&lt;span class="o"&gt;=&lt;/span&gt;writer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For more information you can have a look at the official announcement page: &lt;a href="https://keybase.io/blog/introducing-keybase-teams"&gt;https://keybase.io/blog/introducing-keybase-teams&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Git&lt;/h3&gt;
&lt;p&gt;Sometimes we have the need to store private information in a safe way and we want to be sure that nobody else is
able to access these information.&lt;/p&gt;
&lt;p&gt;Latest feature that has been added to Keybase is &lt;strong&gt;encrypted Git repositories&lt;/strong&gt;. They are like normal GitHub
repositories, but their content is stored in a safer way.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/images/2017/10/keybase_git.png"&gt;&lt;img alt="" src="https://www.andreagrandi.it/images/2017/10/keybase_git.png" width="100%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Privacy and Security&lt;/h4&gt;
&lt;p&gt;What is the &lt;strong&gt;difference&lt;/strong&gt; with GitHub private repositories? In GitHub a private repository is used to store information that
only our account can access, but the files are accessible in plain text by GitHub employees. With encrypted Git repositories
instead, the &lt;strong&gt;information are encrypted before they leave our device&lt;/strong&gt; and they are stored encrypted. Nobody, without having our
private key can read them, not even Keybase employees.&lt;/p&gt;
&lt;h4&gt;Teams and Quota&lt;/h4&gt;
&lt;p&gt;Encrypted Git repositories are of course available for teams too. Creating a team repository, it will be available to
all the members of the team.&lt;/p&gt;
&lt;p&gt;Both teams and single users have &lt;strong&gt;100GB of space&lt;/strong&gt; available (which is separate from Folders quota).&lt;/p&gt;
&lt;h4&gt;Usage&lt;/h4&gt;
&lt;p&gt;If I create my personal repository called &lt;strong&gt;documents&lt;/strong&gt; all I have to do to clone it and use it is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone keybase://private/andreagrandi/documents
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and I can use it as a normal git repository. Every time I commit and push something, the content will be &lt;strong&gt;signed and encrypted&lt;/strong&gt;
and only available to the repository owner (which is me) or to the whole team if it's a team repository.&lt;/p&gt;
&lt;p&gt;For more information, please have a look at the official announcement here: &lt;a href="https://keybase.io/blog/encrypted-git-for-everyone"&gt;https://keybase.io/blog/encrypted-git-for-everyone&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Keybase is still in continuous development but it already offers a few interesting features which can help people
in their every day life. I strongly advise anyone to &lt;a href="https://keybase.io"&gt;&lt;strong&gt;get an account&lt;/strong&gt;&lt;/a&gt;, play with the available features and &lt;strong&gt;report any bug&lt;/strong&gt;
so the developers will be able to fix them and build an even better product. I can't wait to see the features they will
announce in the next months!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sat, 21 Oct 2017 12:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2017-10-21:/2017/10/21/keybase-pgp-encryption-made-easy/</guid><category>HowTo</category><category>GnuPG</category><category>PGP</category><category>Security</category><category>Encryption</category><category>Keybase</category></item><item><title>Configuring an offline GnuPG master key and subkeys on YubiKey</title><link>https://www.andreagrandi.it/2017/09/30/configuring-offline-gnupg-masterkey-subkeys-on-yubikey/</link><description>&lt;p&gt;I've recently bought a &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey 4&lt;/a&gt; and 
decided to use it for GnuPG too, other than using it as hardware 2FA.&lt;/p&gt;
&lt;p&gt;I've also decided to make my GnuPG configuration much more safe, generating the &lt;strong&gt;master key&lt;/strong&gt;
on an &lt;strong&gt;offline&lt;/strong&gt; computer (in my case a simple RaspberryPi not connected to Internet) and &lt;strong&gt;generating a subkey&lt;/strong&gt;
that will be moved to my &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Disclaimer&lt;/h4&gt;
&lt;p&gt;Always think about what your &lt;strong&gt;threat model&lt;/strong&gt; is before deciding something is 100% safe for you.
I'm not claiming this setup/configuration is bullet proof. If you want to protect your GnuPG key from most of the hackers,
keyloggers and if you want to use it on different computers without ever compromising your secret key, this setup
can be what you are looking for. If you think you may be victim of a targeted state sponsored attack, I'm not sure this
setup could be enough.&lt;/p&gt;
&lt;h4&gt;Why keeping offline the master key?&lt;/h4&gt;
&lt;p&gt;If you only use your master key on a computer that never connects to Internet (I reckon you will want to update/patch it
from time to time, that's why we are going to keep the master key on an external USB key) you are at least safe from remote attacks.&lt;/p&gt;
&lt;h4&gt;Why using subkeys?&lt;/h4&gt;
&lt;p&gt;Your GnuPG master key is also your "identity" among every PGP user. If you loose your master key or if your key is compromised
you need to rebuild your identity and reputation from scratch. Instead, if a subkey is compromised, you can revoke the subkey (using your
master key) and generate a new subkey.&lt;/p&gt;
&lt;h4&gt;How a YubiKey makes things safer?&lt;/h4&gt;
&lt;p&gt;If you always use your subkey from a &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt;, it's very unlikely that your
private key can be stolen: it's impossible to read it from the &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt; and if you loose your YubiKey
or if it's physically stolen, the attacker will still need your passphrase and your YubiKey PIN.&lt;/p&gt;
&lt;h3&gt;Requirements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1 &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 USB keys (in theory you only need one, but I strongly suggest you have another one as backup)&lt;/li&gt;
&lt;li&gt;1 offline computer (a simple RaspberryPi with no Internet connection will be fine)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Initial setup&lt;/h3&gt;
&lt;p&gt;From now on, I will assume that you have prepared a computer for offline use (in my case I'm using a RaspberryPi 2 with
Raspbian) and you will type the next commands there and only there.&lt;/p&gt;
&lt;p&gt;Plug one of the &lt;strong&gt;USB key&lt;/strong&gt; (you can format it with VFAT for simplicity) in the offline computer and wait for the system to mount it.
At this point it should be mounted in a path like this: &lt;strong&gt;/media/AABB-BAAC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now set the GnuPG working directory and create it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@debian:~$ export GNUPGHOME=/media/AABB-BAAC/gnupghome
user@debian:~$ mkdir $GNUPGHOME
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Second disclaimer&lt;/h4&gt;
&lt;p&gt;If you think your threat model doesn't include someone can hack your computer from remote,
you can ignore my advice and type these commands on your main laptop (at your own risk).&lt;/p&gt;
&lt;h4&gt;Note&lt;/h4&gt;
&lt;p&gt;For my own convenience, to write this tutorial I reproduced all these steps on my MacBook because it was easier to copy/paste
commands and outputs but I've tested it with the exact setup I'm describing, and it
should be compatible with OSX and Linux.
When you see something has been masked it's just to hide (from spam) things like my email or to protect the serial number
of my &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt;. Last but not least, the output shown here could not match exactly the one you get on your own PC and this also
depends on the GnuPG version you are using.&lt;/p&gt;
&lt;h3&gt;Generating the master key&lt;/h3&gt;
&lt;p&gt;The master key must be generated using the advanced mode, because by default when a new master key is generated, also a new subkey
is created with all the capabilities (Authentication + Signing + Encryption), while we want something different.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; PGP keys up to &lt;strong&gt;4096 bits&lt;/strong&gt; are only supported in &lt;strong&gt;YubiKey 4&lt;/strong&gt; models. If you have a &lt;strong&gt;YubiKey NEO&lt;/strong&gt; you must use
a &lt;strong&gt;2048 bits&lt;/strong&gt; key because it's the maximum size supported. Here you will create a PGP key with &lt;strong&gt;only
the Authentication capability&lt;/strong&gt;. If your GnuPG version doesn't allow this, choose "sign only", just don't
create the encryption capability at this time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@debian:~$ gpg --expert --gen-key
gpg (GnuPG) 2.0.30; Copyright (C) 2015 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

gpg: directory `/media/AABB-BAAC/gnupghome&amp;#39; created
gpg: new configuration file `/media/AABB-BAAC/gnupghome/gpg.conf&amp;#39; created
gpg: WARNING: options in `/media/AABB-BAAC/gnupghome/gpg.conf&amp;#39; are not yet active during this run
gpg: keyring `/media/AABB-BAAC/gnupghome/secring.gpg&amp;#39; created
gpg: keyring `/media/AABB-BAAC/gnupghome/pubring.gpg&amp;#39; created
Please select what kind of key you want:
(1) RSA and RSA (default)
(2) DSA and Elgamal
(3) DSA (sign only)
(4) RSA (sign only)
(7) DSA (set your own capabilities)
(8) RSA (set your own capabilities)
Your selection? 8

Possible actions for a RSA key: Sign Certify Encrypt Authenticate
Current allowed actions: Sign Certify Encrypt

(S) Toggle the sign capability
(E) Toggle the encrypt capability
(A) Toggle the authenticate capability
(Q) Finished

Your selection? s

Possible actions for a RSA key: Sign Certify Encrypt Authenticate
Current allowed actions: Certify Encrypt

(S) Toggle the sign capability
(E) Toggle the encrypt capability
(A) Toggle the authenticate capability
(Q) Finished

Your selection? e

Possible actions for a RSA key: Sign Certify Encrypt Authenticate
Current allowed actions: Certify

(S) Toggle the sign capability
(E) Toggle the encrypt capability
(A) Toggle the authenticate capability
(Q) Finished

Your selection? q
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048) 4096
Requested keysize is 4096 bits
Please specify how long the key should be valid.
        0 = key does not expire
    &amp;lt;n&amp;gt;  = key expires in n days
    &amp;lt;n&amp;gt;w = key expires in n weeks
    &amp;lt;n&amp;gt;m = key expires in n months
    &amp;lt;n&amp;gt;y = key expires in n years
Key is valid for? (0) 2y
Key expires at Wed 25 Sep 18:39:49 2019 BST
Is this correct? (y/N) y

GnuPG needs to construct a user ID to identify your key.

Real name: Andrea Grandi
Email address: user@email.com
Comment:
You selected this USER-ID:
    &amp;quot;Andrea Grandi &amp;lt;user@email.com&amp;gt;&amp;quot;

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? o
You need a Passphrase to protect your secret key.

We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
gpg: /media/AABB-BAAC/gnupghome/trustdb.gpg: trustdb created
gpg: key 2240402E marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
gpg: next trustdb check due at 2019-09-25
pub   4096R/2240402E 2017-09-25 [expires: 2019-09-25]
    Key fingerprint = 7D4C 4090 DB50 1693 4614  F6FC 6206 9DE9 2240 402E
uid       [ultimate] Andrea Grandi &amp;lt;user@email.com&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; please remember to save your passphrase in a safe place. Choose something you
can remember because you will need it every time you need to sign, encrypt or decrypt something.&lt;/p&gt;
&lt;h3&gt;Creating a revocation certificate&lt;/h3&gt;
&lt;p&gt;It's very important to create a revocation certificate to be used if and when 
in the future you want to change your master key and revoke the existing one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@debian:~$ gpg --gen-revoke 2240402E &amp;gt; 2240402E-revocation-certificate.asc

sec  4096R/2240402E 2017-09-25 Andrea Grandi &amp;lt;user@email.com&amp;gt;

Create a revocation certificate for this key? (y/N) y
Please select the reason for the revocation:
0 = No reason specified
1 = Key has been compromised
2 = Key is superseded
3 = Key is no longer used
Q = Cancel
(Probably you want to select 1 here)
Your decision? 3
Enter an optional description; end it with an empty line:
&amp;gt;
Reason for revocation: Key is no longer used
(No description given)
Is this okay? (y/N) y

You need a passphrase to unlock the secret key for
user: &amp;quot;Andrea Grandi &amp;lt;user@email.com&amp;gt;&amp;quot;
4096-bit RSA key, ID 2240402E, created 2017-09-25

ASCII armored output forced.
Revocation certificate created.

Please move it to a medium which you can hide away; if Mallory gets
access to this certificate he can use it to make your key unusable.
It is smart to print this certificate and store it away, just in case
your media become unreadable.  But have some caution:  The print system of
your machine might store the data and make it available to others!
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Creating Encryption subkey&lt;/h3&gt;
&lt;p&gt;To create a subkey we need to edit the existing key (please note that &lt;strong&gt;2240402E&lt;/strong&gt;
is the last 8 chars from the fingerprint of the previously generated master key)
and specify we want to create an Encryption only key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@debian:~$ gpg --edit-key 2240402E
gpg (GnuPG) 2.0.30; Copyright (C) 2015 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Secret key is available.

pub  4096R/2240402E  created: 2017-09-25  expires: 2019-09-25  usage: C
                    trust: ultimate      validity: ultimate
[ultimate] (1). Andrea Grandi &amp;lt;user@email.com&amp;gt;

gpg&amp;gt; addkey
Key is protected.

You need a passphrase to unlock the secret key for
user: &amp;quot;Andrea Grandi &amp;lt;user@email.com&amp;gt;&amp;quot;
4096-bit RSA key, ID 2240402E, created 2017-09-25

Please select what kind of key you want:
(3) DSA (sign only)
(4) RSA (sign only)
(5) Elgamal (encrypt only)
(6) RSA (encrypt only)
Your selection? 6
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048) 4096
Requested keysize is 4096 bits
Please specify how long the key should be valid.
        0 = key does not expire
    &amp;lt;n&amp;gt;  = key expires in n days
    &amp;lt;n&amp;gt;w = key expires in n weeks
    &amp;lt;n&amp;gt;m = key expires in n months
    &amp;lt;n&amp;gt;y = key expires in n years
Key is valid for? (0) 2y
Key expires at Wed 25 Sep 18:47:21 2019 BST
Is this correct? (y/N) y
Really create? (y/N) y
We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.

pub  4096R/2240402E  created: 2017-09-25  expires: 2019-09-25  usage: C
                    trust: ultimate      validity: ultimate
sub  4096R/01731555  created: 2017-09-25  expires: 2019-09-25  usage: E
[ultimate] (1). Andrea Grandi &amp;lt;user@email.com&amp;gt;

gpg&amp;gt; save
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Export a backup of the secret keys&lt;/h3&gt;
&lt;p&gt;It's very important to export a backup of the secret keys at this point.
Writing the secret subkey to the &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt; is a destructive process: keys are moved
to the &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt;, they are not copied.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@debian:~$ gpg --export-secret-key 2240402E &amp;gt; 2240402E-secret.pgp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this backup includes both the secret master key and the secret subkey.
Please remember to &lt;strong&gt;save a backup of this key&lt;/strong&gt; on a couple of separate USB keys: you will need
this keys to generate future subkeys and/or to revoke the existing ones.&lt;/p&gt;
&lt;h3&gt;Programming the YubiKey with all GnuPG keys&lt;/h3&gt;
&lt;p&gt;We have previously created the &lt;strong&gt;master key&lt;/strong&gt; and the &lt;strong&gt;encryption subkey&lt;/strong&gt;. Now we will
create the &lt;strong&gt;authentication&lt;/strong&gt; and &lt;strong&gt;signing&lt;/strong&gt; keys directly on the &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt; (we don't
need to have a copy of these keys) and we will move the secret encryption key
to the &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@debian:~$ gpg --edit-key 2240402E
gpg (GnuPG) 2.0.30; Copyright (C) 2015 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Secret key is available.

pub  4096R/2240402E  created: 2017-09-25  expires: 2019-09-25  usage: C
                    trust: ultimate      validity: ultimate
sub  4096R/01731555  created: 2017-09-25  expires: 2019-09-25  usage: E
[ultimate] (1). Andrea Grandi &amp;lt;user@email.com&amp;gt;

gpg&amp;gt; addcardkey
Signature key ....: [none]
Encryption key....: [none]
Authentication key: [none]

Please select the type of key to generate:
(1) Signature key
(2) Encryption key
(3) Authentication key
Your selection? 1

What keysize do you want for the Signature key? (4096)
Key is protected.

You need a passphrase to unlock the secret key for
user: &amp;quot;Andrea Grandi &amp;lt;user@email.com&amp;gt;&amp;quot;
4096-bit RSA key, ID 2240402E, created 2017-09-25

Please specify how long the key should be valid.
        0 = key does not expire
    &amp;lt;n&amp;gt;  = key expires in n days
    &amp;lt;n&amp;gt;w = key expires in n weeks
    &amp;lt;n&amp;gt;m = key expires in n months
    &amp;lt;n&amp;gt;y = key expires in n years
Key is valid for? (0) 2y
Key expires at Wed 25 Sep 18:50:42 2019 BST
Is this correct? (y/N) y
Really create? (y/N) y

pub  4096R/2240402E  created: 2017-09-25  expires: 2019-09-25  usage: C
                    trust: ultimate      validity: ultimate
sub  4096R/01731555  created: 2017-09-25  expires: 2019-09-25  usage: E
sub  4096R/771B0554  created: 2017-09-25  expires: 2019-09-25  usage: S
[ultimate] (1). Andrea Grandi &amp;lt;user@email.com&amp;gt;

gpg&amp;gt; addcardkey
Signature key ....: 6FAB DC46 1847 3550 3769  2D32 0DE1 36B4 771B 0554
Encryption key....: [none]
Authentication key: [none]

Please select the type of key to generate:
(1) Signature key
(2) Encryption key
(3) Authentication key
Your selection? 3

What keysize do you want for the Authentication key? (4096)
Key is protected.

You need a passphrase to unlock the secret key for
user: &amp;quot;Andrea Grandi &amp;lt;user@email.com&amp;gt;&amp;quot;
4096-bit RSA key, ID 2240402E, created 2017-09-25

Please specify how long the key should be valid.
        0 = key does not expire
    &amp;lt;n&amp;gt;  = key expires in n days
    &amp;lt;n&amp;gt;w = key expires in n weeks
    &amp;lt;n&amp;gt;m = key expires in n months
    &amp;lt;n&amp;gt;y = key expires in n years
Key is valid for? (0) 2y
Key expires at Wed 25 Sep 18:54:51 2019 BST
Is this correct? (y/N) y
Really create? (y/N) y

pub  4096R/2240402E  created: 2017-09-25  expires: 2019-09-25  usage: C
                    trust: ultimate      validity: ultimate
sub  4096R/01731555  created: 2017-09-25  expires: 2019-09-25  usage: E
sub  4096R/771B0554  created: 2017-09-25  expires: 2019-09-25  usage: S
sub  4096R/A9B5334C  created: 2017-09-25  expires: 2019-09-25  usage: A
[ultimate] (1). Andrea Grandi &amp;lt;user@email.com&amp;gt;

gpg&amp;gt; toggle

sec  4096R/2240402E  created: 2017-09-25  expires: 2019-09-25
ssb  4096R/01731555  created: 2017-09-25  expires: never
ssb  4096R/771B0554  created: 2017-09-25  expires: 2019-09-25
                    card-no: 0006 05672181
ssb  4096R/A9B5334C  created: 2017-09-25  expires: 2019-09-25
                    card-no: 0006 05672181
(1)  Andrea Grandi &amp;lt;user@email.com&amp;gt;

gpg&amp;gt; key 1

sec  4096R/2240402E  created: 2017-09-25  expires: 2019-09-25
ssb* 4096R/01731555  created: 2017-09-25  expires: never
ssb  4096R/771B0554  created: 2017-09-25  expires: 2019-09-25
                    card-no: 0006 05672181
ssb  4096R/A9B5334C  created: 2017-09-25  expires: 2019-09-25
                    card-no: 0006 05672181
(1)  Andrea Grandi &amp;lt;user@email.com&amp;gt;

gpg&amp;gt; keytocard
Signature key ....: 6FAB DC46 1847 3550 3769  2D32 0DE1 36B4 771B 0554
Encryption key....: [none]
Authentication key: BD26 3AD8 985E CAB0 9F32  7307 DF7C F7C0 A9B5 334C

Please select where to store the key:
(2) Encryption key
Your selection? 2

You need a passphrase to unlock the secret key for
user: &amp;quot;Andrea Grandi &amp;lt;user@email.com&amp;gt;&amp;quot;
4096-bit RSA key, ID 01731555, created 2017-09-25


sec  4096R/2240402E  created: 2017-09-25  expires: 2019-09-25
ssb* 4096R/01731555  created: 2017-09-25  expires: never
                    card-no: 0006 05672181
ssb  4096R/771B0554  created: 2017-09-25  expires: 2019-09-25
                    card-no: 0006 05672181
ssb  4096R/A9B5334C  created: 2017-09-25  expires: 2019-09-25
                    card-no: 0006 05672181
(1)  Andrea Grandi &amp;lt;user@email.com&amp;gt;

gpg&amp;gt; save
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Check public keys&lt;/h4&gt;
&lt;p&gt;Just to verify everything has been created correctly, we check the public keys.
We should see one &lt;strong&gt;pub&lt;/strong&gt; key and three &lt;strong&gt;sub&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@debian:~$ gpg -k
/media/AABB-BAAC/gnupghome/pubring.gpg
--------------------------------
pub   4096R/2240402E 2017-09-25 [expires: 2019-09-25]
uid       [ultimate] Andrea Grandi &amp;lt;user@email.com&amp;gt;
sub   4096R/01731555 2017-09-25 [expires: 2019-09-25]
sub   4096R/771B0554 2017-09-25 [expires: 2019-09-25]
sub   4096R/A9B5334C 2017-09-25 [expires: 2019-09-25]
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Check private keys&lt;/h4&gt;
&lt;p&gt;When we check the private keys we should see that one key is still local, marked as &lt;strong&gt;sec&lt;/strong&gt; (it's
the private key of the master key), while three other keys are marked as &lt;strong&gt;ssb&amp;gt;&lt;/strong&gt;
which means they have been moved to the &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@debian:~$ gpg -K
/media/AABB-BAAC/gnupghome/secring.gpg
--------------------------------
sec   4096R/2240402E 2017-09-25 [expires: 2019-09-25]
uid                  Andrea Grandi &amp;lt;user@email.com&amp;gt;
ssb&amp;gt;  4096R/01731555 2017-09-25
ssb&amp;gt;  4096R/771B0554 2017-09-25
ssb&amp;gt;  4096R/A9B5334C 2017-09-25
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Import back secret keys from backup (only for multiple YubiKeys)&lt;/h4&gt;
&lt;p&gt;As previously said, when we write the encryption subkey to the &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt;, the key
is &lt;strong&gt;moved&lt;/strong&gt; and not just copied, so we need to import back the secret key into
the keyring. It's important to have a backup of the subkey too, not because we need it
in case the key is compromised etc... but because we need it in case we want to write
multiple YubiKeys with the same encryption key, so that we have a backup key to use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@debian:~$ gpg --import &amp;lt; 2240402E-secret.pgp
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Completely remove secret keys from laptop&lt;/h4&gt;
&lt;p&gt;Once you have programmed the &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt; and you are sure the secret keys are
backed up on a couple of USB keys, you are ready to remove the secret keys from your laptop.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you don't need to remove anything if you have conducted the whole setup
on a spare offline PC (or on a RaspberryPi) because that's not your every day computer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@debian:~$ gpg --delete-secret-key 2240402E
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Exporting the public PGP key&lt;/h3&gt;
&lt;p&gt;As you know, PGP keys are composed by a secret part and a public one. The public one
must be distributed publicly and it's the one people will use to encrypt messages directed
to you.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@debian:~$ gpg --armor --export 2240402E &amp;gt; 2240402E.asc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you have a personal blog/website I suggest to upload it there (for example mine
can be found here &lt;a href="https://www.andreagrandi.it/2240402E.asc"&gt;https://www.andreagrandi.it/2240402E.asc&lt;/a&gt;)&lt;/p&gt;
&lt;h3&gt;Change YubiKey PINs and complete configuration&lt;/h3&gt;
&lt;p&gt;Every &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt; is sold with a certain default configuration: there is a &lt;strong&gt;user PIN&lt;/strong&gt;
that is required every time we need to use the key to sign/decrypt something (in addition
to our passphrase) and there is an &lt;strong&gt;admin PIN&lt;/strong&gt; that is required every time we change
certain settings on the &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The default values are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user PIN: 123456&lt;/li&gt;
&lt;li&gt;admin PIN: 12345678&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I strongly recommend you to change them following this example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@debian:~$ gpg --card-edit

Reader ...........: Yubico Yubikey 4 OTP U2F CCID
Application ID ...: D000000000000000000000000000000000
Version ..........: 2.1
Manufacturer .....: Yubico
Serial number ....: 012345678
Name of cardholder: [not set]
Language prefs ...: [not set]
Sex ..............: unspecified
URL of public key : [not set]
Login data .......: [not set]
Signature PIN ....: not forced
Key attributes ...: rsa4096 rsa4096 rsa4096
Max. PIN lengths .: 127 127 127
PIN retry counter : 3 0 3
Signature counter : 3
Signature key ....: 6FAB DC46 1847 3550 3769  2D32 0DE1 36B4 771B 0554
    created ....: 2017-09-25 17:50:37
Encryption key....: FC6F 40BC 4173 8D13 2D7C  E958 BCDC EA84 0173 1555
    created ....: 2017-09-25 17:47:09
Authentication key: BD26 3AD8 985E CAB0 9F32  7307 DF7C F7C0 A9B5 334C
    created ....: 2017-09-25 17:54:49
General key info..: sub  rsa4096/0DE136B4771B0554 2017-09-25 Andrea Grandi &amp;lt;user@email.com&amp;gt;
sec#  rsa4096/62069DE92240402E  created: 2017-09-25  expires: 2019-09-25
ssb&amp;gt;  rsa4096/BCDCEA8401731555  created: 2017-09-25  expires: 2019-09-25
                                card-no: 0006 05672181
ssb&amp;gt;  rsa4096/0DE136B4771B0554  created: 2017-09-25  expires: 2019-09-25
                                card-no: 0006 05672181
ssb&amp;gt;  rsa4096/DF7CF7C0A9B5334C  created: 2017-09-25  expires: 2019-09-25
                                card-no: 0006 05672181

gpg/card&amp;gt; admin
Admin commands are allowed

# Change the PIN and Admin PINs
gpg/card&amp;gt; passwd
gpg: OpenPGP card no. D000000000000000000000000000000000 detected

1 - change PIN
2 - unblock PIN
3 - change Admin PIN
4 - set the Reset Code
Q - quit

Your selection? 1
PIN changed.

1 - change PIN
2 - unblock PIN
3 - change Admin PIN
4 - set the Reset Code
Q - quit

Your selection? 3
PIN changed.

1 - change PIN
2 - unblock PIN
3 - change Admin PIN
4 - set the Reset Code
Q - quit

Your selection? q

# Make sure the PIN is entered before signing
gpg/card&amp;gt; forcesig

# Set the URL where the OpenPGP public key can be found.
gpg/card&amp;gt; url
URL to retrieve public key: https://www.andreagrandi.it/2240402E.asc

# Fetch the public key into the local keyring
gpg/card&amp;gt; fetch

gpg/card&amp;gt; quit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; when you want to use your &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt; on any computer (for example your work laptop)
you need to at least import your public PGP key into the keyring. If the key is not
read automatically, you may need to give it a refresh using this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user@debian:~$ gpg --card-status
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Careful with PINs&lt;/h4&gt;
&lt;p&gt;Please remember that you can only digit a wrong user PIN for a maximum of three times.
After three time you will need to edit the &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt; (with &lt;strong&gt;gpg --card-edit&lt;/strong&gt;) become admin
and use the &lt;strong&gt;unblock PIN&lt;/strong&gt; option. If you digit the wrong admin PIN for three time, you will have
to follow a quite complicated procedure (explained at this address: &lt;a href="https://developers.yubico.com/ykneo-openpgp/ResetApplet.html"&gt;https://developers.yubico.com/ykneo-openpgp/ResetApplet.html&lt;/a&gt;)
and your &lt;a href="https://www.amazon.co.uk/Yubico-Y-158-YubiKey-4-Black/dp/B018Y1Q71M/ref=as_li_ss_tl?ie=UTF8&amp;amp;qid=1507054059&amp;amp;sr=8-1&amp;amp;keywords=yubico+4&amp;amp;linkCode=ll1&amp;amp;tag=andreagrandi-21&amp;amp;linkId=6da97357c6fe86ca94df918c172f6605"&gt;YubiKey&lt;/a&gt; will be reset with factory settings, deleting your PGP keys from it.&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;To write this tutorial I originally followed other articles online. The main ones are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.esev.com/blog/post/2015-01-pgp-ssh-key-on-yubikey-neo/"&gt;https://www.esev.com/blog/post/2015-01-pgp-ssh-key-on-yubikey-neo/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.josefsson.org/2014/06/23/offline-gnupg-master-key-and-subkeys-on-yubikey-neo-smartcard/"&gt;https://blog.josefsson.org/2014/06/23/offline-gnupg-master-key-and-subkeys-on-yubikey-neo-smartcard/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://wiki.debian.org/Subkeys"&gt;https://wiki.debian.org/Subkeys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.paulfurley.com/gpg-for-humans-preparing-an-offline-machine/"&gt;https://www.paulfurley.com/gpg-for-humans-preparing-an-offline-machine/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spin.atomicobject.com/2013/11/24/secure-gpg-keys-guide/"&gt;https://spin.atomicobject.com/2013/11/24/secure-gpg-keys-guide/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rnorth.org/gpg-and-ssh-with-yubikey-for-mac"&gt;https://rnorth.org/gpg-and-ssh-with-yubikey-for-mac&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Amazon Association disclaimer&lt;/h4&gt;
&lt;p&gt;I'm trying a little experiment with the Amazon Association program. Basically, if you click
on any of the YubiKey links and decide to buy it, I will get a little commission from it.
I've never tried this before and I've no idea if it works or not. I'm writing this here just for the
sake of transparency.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sat, 30 Sep 2017 14:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2017-09-30:/2017/09/30/configuring-offline-gnupg-masterkey-subkeys-on-yubikey/</guid><category>HowTo</category><category>GnuPG</category><category>PGP</category><category>Security</category><category>YubiKey</category><category>Encryption</category></item><item><title>Fix encfs under OSX after upgrading to 10.11.2</title><link>https://www.andreagrandi.it/2015/12/09/fix-encfs-under-osx-after-upgrading-to-10-11-2/</link><description>&lt;p&gt;After having upgraded &lt;strong&gt;OSX&lt;/strong&gt; to &lt;strong&gt;10.11.2&lt;/strong&gt; on my MacBook, I noticed
that my &lt;strong&gt;encfs&lt;/strong&gt; volume didn't mount after reboot. I tried to run the
script manually and all I got was this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dyld: Symbol not found: __ZN5boost7archive17xml_iarchive_implINS0_12xml_iarchiveEE13load_overrideERNS0_15class_name_typeEi
  Referenced from: /usr/local/Cellar/encfs/1.8.1/lib/libencfs.6.dylib
  Expected in: /usr/local/lib/libboost_serialization-mt.dylib
in /usr/local/Cellar/encfs/1.8.1/lib/libencfs.6.dylib
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I quickly found that was a common problem caused by a new version of
&lt;strong&gt;Boost&lt;/strong&gt; being
installed: &lt;a href="https://github.com/Homebrew/homebrew/issues/46254"&gt;https://github.com/Homebrew/homebrew/issues/46254&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To fix it, you just need to &lt;strong&gt;reinstall encfs&lt;/strong&gt; using this command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew reinstall -s encfs
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Wed, 09 Dec 2015 22:47:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2015-12-09:/2015/12/09/fix-encfs-under-osx-after-upgrading-to-10-11-2/</guid><category>HowTo, OSX</category><category>bug</category><category>encfs</category><category>security</category></item><item><title>Getting a free SSL certificate from Letsencrypt and configuring it on Nginx with automatic renewal</title><link>https://www.andreagrandi.it/2015/12/06/getting-a-free-ssl-certificate-from-letsencrypt-and-configuring-it-on-nginx-with-automatic-renewal/</link><description>&lt;p&gt;Finally &lt;strong&gt;&lt;a href="https://letsencrypt.org/"&gt;Letsencrypt&lt;/a&gt;&lt;/strong&gt; went to &lt;strong&gt;public
beta&lt;/strong&gt; and I really couldn't wait to use it on my VPS (where this blog
is hosted). Until few days ago I was using a &lt;strong&gt;free SSL&lt;/strong&gt; certificate
from &lt;a href="https://www.startssl.com/"&gt;StartSSL&lt;/a&gt;. The service is nice and I'm
grateful to them for this important resource they are providing for
free, but it must be said that their renewal procedure isn't one of the
most user friendly.&lt;/p&gt;
&lt;p&gt;For people who don't know the service yet, &lt;strong&gt;Letsencrypt&lt;/strong&gt; not only
gives &lt;strong&gt;free SSL certificates&lt;/strong&gt;, they also provide a command line tool
that people can use to request a new certificate or to renew an existing
one. This means that you don't have to worry anymore if/when your
certificate expires, you can set a crontab command and have the
certificate &lt;strong&gt;automatically renewed&lt;/strong&gt; for you.&lt;/p&gt;
&lt;h2&gt;Client installation&lt;/h2&gt;
&lt;p&gt;To request a SSL certificate you need to install their command line
utility. Unless it has already been packaged for your distribution, for
the moment it's much easier to get it from git as they explain in their
&lt;a href="https://letsencrypt.readthedocs.org/en/latest/using.html#installation"&gt;installation
instructions&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/letsencrypt/letsencrypt
&lt;span class="nb"&gt;cd&lt;/span&gt; letsencrypt
./letsencrypt-auto
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Getting the SSL certificate&lt;/h2&gt;
&lt;p&gt;There are a few different options available to request a certificate,
but the easiest one is to use the &lt;strong&gt;--webroot&lt;/strong&gt; option, specifying the
document root of your website so that the client will be able to put
there a verification (temporary) file that will be served to the remote
service and used as verification method. In my case I only needed this
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./letsencrypt-auto certonly --webroot -w /var/www/andreagrandi.it/ -d www.andreagrandi.it -d andreagrandi.it --email myemail@myprovider.com --renew-by-default --agree-tos
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please note that I had to specify both www.andreagrandi.it and
andreagrandi.it as domains, otherwise it would have been invalid when
requesting just andreagrandi.it resources.&lt;/p&gt;
&lt;h2&gt;Configuration files and certificates installation&lt;/h2&gt;
&lt;p&gt;The command above will save all the configuration under
&lt;strong&gt;/etc/letsencrypt/&lt;/strong&gt; and all the generated certificates under
&lt;strong&gt;/etc/letsencrypt/live/www.andreagrandi.it/*.pem&lt;/strong&gt; (all the *.pem
files here are symbolic links to the current certificate). If you are
using &lt;strong&gt;Nginx&lt;/strong&gt; the only files you need are &lt;strong&gt;fullchain.pem&lt;/strong&gt; and
&lt;strong&gt;privkey.pem&lt;/strong&gt; and you can set them in your Nginx configuration using
these two parameters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssl_certificate /etc/letsencrypt/live/www.andreagrandi.it/fullchain.pem&lt;span class="p"&gt;;&lt;/span&gt;
ssl_certificate_key /etc/letsencrypt/live/www.andreagrandi.it/privkey.pem&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In case you want to have a look at my full Nginx configuration file, as
reference, you can find it
here &lt;a href="https://gist.github.com/andreagrandi/8b194c99cd3e77fdb5a8"&gt;https://gist.github.com/andreagrandi/8b194c99cd3e77fdb5a8&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Automatic renewal&lt;/h2&gt;
&lt;p&gt;The last thing to be configured is a crontab rule to call the script
every... 2 months. Why 2 months? Letsencrypt SSL &lt;strong&gt;certificates expire
in 3 months&lt;/strong&gt;. Usually SSL certificates are valid at least for 1 year,
but Letsencrypt decided to make it 3 months to incentivate the
automation of the renewal. I set it to 2 months, so if anything goes
wrong I still have plenty of time to do it manually. To edit crontab for
root user execute &lt;strong&gt;crontab -e&lt;/strong&gt; and add this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; */2 * /root/letsencrypt/letsencrypt-auto certonly --webroot -w /var/www/andreagrandi.it/ -d www.andreagrandi.it -d andreagrandi.it --email email@domain.com --renew-by-default --agree-tos &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; service nginx reload
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just a final note. You may have noticed that this website presents an
SSL certificate issued by COMODO. That's because I have
&lt;strong&gt;&lt;a href="https://www.cloudflare.com/"&gt;CloudFlare&lt;/a&gt;&lt;/strong&gt; in front of my website and
that's how their SSL strict option works (at least for free plans).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Sun, 06 Dec 2015 14:15:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2015-12-06:/2015/12/06/getting-a-free-ssl-certificate-from-letsencrypt-and-configuring-it-on-nginx-with-automatic-renewal/</guid><category>DevOps, HowTo, Linux</category><category>encryption</category><category>letsencrypt</category><category>security</category><category>ssl</category></item><item><title>How to configure EncFS on OSX 10.10 (Yosemite)</title><link>https://www.andreagrandi.it/2015/10/11/how-to-configure-encfs-on-osx-10-10-yosemite/</link><description>&lt;p&gt;With &lt;strong&gt;EncFS&lt;/strong&gt; it's possible to keep our data in almost any cloud
(Dropbox, OneDrive, etc...), having a good level of privacy and
security. Infact EncFS encrypt and decrypt our data automatically. It's
available for Linux as well and using a commercial solution (that is
currently unsupported) even on Windows.&lt;/p&gt;
&lt;h2&gt;Installing EncFS&lt;/h2&gt;
&lt;p&gt;EncFS can be installed from &lt;strong&gt;brew&lt;/strong&gt;. If you don't have brew package
manager installed on OSX you can install it using this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ruby -e &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After brew, you need to install &lt;strong&gt;OSXFuse&lt;/strong&gt; from this
website &lt;a href="http://osxfuse.github.io"&gt;http://osxfuse.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally you can install &lt;strong&gt;encfs&lt;/strong&gt; using this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;brew install homebrew/fuse/encfs
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Configuring the encrypted folder&lt;/h2&gt;
&lt;p&gt;Now that EncFS is installed, you can either mount an existing EncFS
volume or create a new one. In both cases the command is the same:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;encfs ~/Dropbox/Private ~/Private
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are mounting an existing encrypted volume, you will be prompted
for the password. If you are creating a new encrypted volume you will be
asked some questions about EncFS parameters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if it's important for you to keep compatibility with
&lt;strong&gt;&lt;a href="https://www.boxcryptor.com/en/classic"&gt;BoxCryptor Classic&lt;/a&gt;&lt;/strong&gt; (in case
you want to use the same volume under Windows), please refer to this
other article I
wrote: &lt;a href="https://www.andreagrandi.it/2014/09/12/create-an-encfs-volume-compatible-with-boxcryptor-classic/"&gt;https://www.andreagrandi.it/2014/09/12/create-an-encfs-volume-compatible-with-boxcryptor-classic/&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Mount the encrypted volume on startup&lt;/h2&gt;
&lt;p&gt;First of all you need to save the volume's password inside the OSX
keychain. Open the app &lt;strong&gt;Keychain Access&lt;/strong&gt; and create a new entry with
name &lt;strong&gt;encfs&lt;/strong&gt; and account value &lt;strong&gt;encfs&lt;/strong&gt;, then write your &lt;strong&gt;password&lt;/strong&gt;
and click &lt;strong&gt;Add&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/images/2015/10/encfs_keychain_access.png"&gt;&lt;img alt="encfs_keychain_access" src="https://www.andreagrandi.it/images/2015/10/encfs_keychain_access.png" width="60%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once the password is saved, &lt;strong&gt;open a text editor&lt;/strong&gt; and paste this script
and save it as &lt;strong&gt;encfs_mount.sh&lt;/strong&gt; inside your &lt;strong&gt;\$HOME&lt;/strong&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# Secure EncFS Dropbox mounter by Daniel Widerin &amp;lt;daniel@widerin.net&amp;gt;&lt;/span&gt;

&lt;span class="nv"&gt;SOURCE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/Dropbox/Private
&lt;span class="nv"&gt;TARGET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/Private
&lt;span class="nv"&gt;VOLUME_TITLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Private
&lt;span class="nv"&gt;KEYCHAIN_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;encfs&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;ENCFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/bin/encfs

mount &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="nv"&gt;$TARGET&lt;/span&gt; &amp;gt;/dev/null
&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -eq &lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /usr/sbin/diskutil unmount &lt;span class="nv"&gt;$TARGET&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -d &lt;span class="nv"&gt;$TARGET&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Create new mountpoint &lt;/span&gt;&lt;span class="nv"&gt;$TARGET&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
mkdir &lt;span class="nv"&gt;$TARGET&lt;/span&gt;
chmod &lt;span class="m"&gt;0700&lt;/span&gt; &lt;span class="nv"&gt;$TARGET&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nv"&gt;$ENCFS&lt;/span&gt; &lt;span class="nv"&gt;$SOURCE&lt;/span&gt; &lt;span class="nv"&gt;$TARGET&lt;/span&gt; --extpass&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;security 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null find-generic-password -gl &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$KEYCHAIN_PASSWORD&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39; |grep password|cut -d \\\&amp;quot; -f 2&amp;quot;&lt;/span&gt; -ovolname&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$VOLUME_TITLE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make it &lt;strong&gt;executable&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chmod +x ~/encfs_mount.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open &lt;strong&gt;AppleScript&lt;/strong&gt; editor and paste this text inside and save as an
app in the \$HOME folder:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/images/2015/10/Screenshot-2015-10-11-19.27.14.png"&gt;&lt;img alt="" src="https://www.andreagrandi.it/images/2015/10/Screenshot-2015-10-11-19.27.14.png" width="60%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt; shell script &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/encfs_mount.sh&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, open "&lt;strong&gt;System Preferences&lt;/strong&gt;" -&amp;gt; "&lt;strong&gt;Users &amp;amp; Groups&lt;/strong&gt;" and
add the previously saved application.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/images/2015/10/Screenshot-2015-10-11-19.27.44.png"&gt;&lt;img alt="" src="https://www.andreagrandi.it/images/2015/10/Screenshot-2015-10-11-19.27.44.png" width="60%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Final notes&lt;/h2&gt;
&lt;p&gt;At this point encfs is configured to be mounted at startup and to save
the encrypted files inside Dropbox. Please note: &lt;strong&gt;do not save anything
directly on &lt;code&gt;~/Dropbox/Private&lt;/code&gt;&lt;/strong&gt;, only read and save your files from
&lt;code&gt;~/Private&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.maketecheasier.com/install-encfs-mac/"&gt;https://www.maketecheasier.com/install-encfs-mac/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://ninjatips.com/encrypt-dropbox-using-encfs/"&gt;http://ninjatips.com/encrypt-dropbox-using-encfs/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Sun, 11 Oct 2015 19:44:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2015-10-11:/2015/10/11/how-to-configure-encfs-on-osx-10-10-yosemite/</guid><category>HowTo, OSX, Sicurezza</category><category>cloud</category><category>encfs</category><category>encryption</category><category>OSX</category><category>security</category></item><item><title>How to fix encfs installation on OSX 10.9 (Mavericks) and brew</title><link>https://www.andreagrandi.it/2013/11/08/how-to-fix-encfs-installation-on-osx-10-9-mavericks-and-brew/</link><description>&lt;p&gt;After upgrading from OSX 10.8.x to 10.9 (Mavericks), &lt;strong&gt;encfs&lt;/strong&gt; recipe is
broken. First of all you have to fix a problem with a library header:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;sudo ln -s /usr/include/sys/_endian.h /usr/include/sys/endian.h&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then you can install encfs using this remote brew recipe:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;brew reinstall https://gist.github.com/ghibble/7297078/raw/cae1ff000a5e1cfc670f5b7a611279ed494b63af/encfs.rb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's also possible that you have to fix fuse4x installation before being
able to use encfs (I had to do it):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rfX&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Cellar&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fuse4x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;kext&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;0.9&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Extensions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fuse4x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kext&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Extensions&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Extensions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fuse4x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kext&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Support&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;load_fuse4x&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it! Please note that this is just a workaround (thanks to
&lt;strong&gt;Giovanni Bajo&lt;/strong&gt; for suggesting me the symlink fix). Please also note
that this recipe uses fuse4x library and not the most updated osxfuse
(but it works, anyway). Some other users reported me that there is a fix
for the original brew recipe, and this one uses osxfuse. You can find it
here &lt;a href="https://gist.github.com/defunctzombie/7324625"&gt;https://gist.github.com/defunctzombie/7324625&lt;/a&gt; but I haven't
tested it yet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; to fully integrate encfs with OSX, I also suggest to follow
this nice guide &lt;a href="http://www.maketecheasier.com/install-encfs-mac/"&gt;http://www.maketecheasier.com/install-encfs-mac/&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Fri, 08 Nov 2013 21:17:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2013-11-08:/2013/11/08/how-to-fix-encfs-installation-on-osx-10-9-mavericks-and-brew/</guid><category>HowTo, OSX, Sicurezza</category><category>cloud</category><category>encfs</category><category>encryption</category><category>fuse4x</category><category>OSX</category><category>security</category></item></channel></rss>