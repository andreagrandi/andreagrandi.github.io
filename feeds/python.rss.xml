<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Andrea Grandi - python</title><link>https://www.andreagrandi.it/</link><description>Software Developer</description><lastBuildDate>Fri, 16 Oct 2020 21:00:00 +0200</lastBuildDate><item><title>Set specific environment variables activating a Python virtual environment</title><link>https://www.andreagrandi.it/2020/10/16/set-specific-environment-variables-activating-python-virtual-environment/</link><description>&lt;p&gt;How to set specific environment variables when we activate a Python virtual environment&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Fri, 16 Oct 2020 21:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2020-10-16:/2020/10/16/set-specific-environment-variables-activating-python-virtual-environment/</guid><category>Development</category><category>set</category><category>environment</category><category>variables</category><category>activate</category><category>python</category><category>virtual</category><category>terminal</category><category>bash</category><category>zsh</category><category>env</category><category>dotenv</category><category>script</category></item><item><title>Python 3.9 introduces removeprefix and removesuffix</title><link>https://www.andreagrandi.it/2020/10/11/python39-introduces-removeprefix-removesuffix/</link><description>&lt;p&gt;A quick tutorial to removeprefix and removesuffix methods which have been introduced with Python 3.9.0&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sun, 11 Oct 2020 19:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2020-10-11:/2020/10/11/python39-introduces-removeprefix-removesuffix/</guid><category>Development</category><category>python</category><category>development</category><category>python39</category><category>programming</category><category>version</category><category>language</category><category>strings</category><category>manipulation</category></item><item><title>Using pyenv to install Python and create a virtual environment</title><link>https://www.andreagrandi.it/2020/10/10/install-python-with-pyenv-create-virtual-environment-with-specific-python-version/</link><description>&lt;p&gt;How to use pyenv to install a specific version of Python and create a virtual environment with that version&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sat, 10 Oct 2020 19:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2020-10-10:/2020/10/10/install-python-with-pyenv-create-virtual-environment-with-specific-python-version/</guid><category>Development</category><category>python</category><category>development</category><category>pyenv</category><category>virtualenv</category><category>mkvirtualenv</category><category>environment</category><category>python39</category><category>programming</category><category>pip</category><category>macos</category><category>install</category><category>version</category></item><item><title>Skipping tests depending on the Python version</title><link>https://www.andreagrandi.it/2019/02/21/skipping-tests-depending-python-version/</link><description>&lt;p&gt;Sometimes we want to run certain tests only on a specific version of Python.&lt;/p&gt;
&lt;p&gt;Suppose you are migrating a large project from Python 2 to Python 3 and you know in advance that certain tests won't run
under Python 3.&lt;/p&gt;
&lt;p&gt;Chances are that during the migration you are already using the &lt;a href="https://pythonhosted.org/six/"&gt;six&lt;/a&gt; library. The &lt;strong&gt;six&lt;/strong&gt; libraries have
two boolean properties which are initialised to &lt;code&gt;True&lt;/code&gt; depending on the Python version which is being used: &lt;code&gt;PY2&lt;/code&gt; when running under Python 2
and &lt;code&gt;PY3&lt;/code&gt; when running under Python 3.&lt;/p&gt;
&lt;p&gt;This library, combined with the &lt;strong&gt;skipIf&lt;/strong&gt; method of &lt;a href="https://docs.python.org/3/library/unittest.html#skipping-tests-and-expected-failures"&gt;unittest library&lt;/a&gt;
can be used to easily skip tests when using Python 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;six&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;


    &lt;span class="nd"&gt;@unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;skipIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;six&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PY3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;not compatible with Python 3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# This test won&amp;#39;t run under Python 3&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Credits&lt;/h2&gt;
&lt;p&gt;Thanks to my colleague &lt;strong&gt;&lt;a href="https://github.com/valnico"&gt;Nicola&lt;/a&gt;&lt;/strong&gt; for giving me the inspiration to write this post.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Thu, 21 Feb 2019 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2019-02-21:/2019/02/21/skipping-tests-depending-python-version/</guid><category>Python</category><category>python</category><category>test</category><category>programming</category><category>software</category><category>development</category><category>testing</category></item><item><title>Installing Python and virtualenv on MacOS</title><link>https://www.andreagrandi.it/2018/12/19/installing-python-and-virtualenv-on-osx/</link><description>&lt;p&gt;How to install Python and virtualenv on MacOS&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Wed, 19 Dec 2018 15:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2018-12-19:/2018/12/19/installing-python-and-virtualenv-on-osx/</guid><category>Python</category><category>python</category><category>osx</category><category>programming</category><category>software</category><category>development</category><category>macos</category><category>virtualenv</category><category>venv</category><category>version</category><category>installing</category><category>installation</category><category>brew</category><category>mkvirtualenv</category><category>virtualenvwrapper</category></item><item><title>Why I mentor on Exercism.io</title><link>https://www.andreagrandi.it/2018/11/04/why-i-mentor-on-exercism/</link><description>&lt;p&gt;Exercism (&lt;a href="https://exercism.io"&gt;https://exercism.io&lt;/a&gt;) is a platform that has been created to help people improving their coding skills, thanks to the volunteers mentoring the students. There are tracks for almost all the popular languages and each track has coding tests that the students can download, solve offline using their preferred editor, and test the solution against the provided unit tests. Once the solution is ready to be reviewed (or even if it's not complete but the student needs help), it can be submitted to the website and it will go in a queue where the first available mentor will pick it and start mentoring.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;service is free&lt;/strong&gt; to use for all the students and &lt;strong&gt;the mentors are all volunteers&lt;/strong&gt; (this doesn't mean that the platform doesn't have any costs. If you are curious about the resources needed to keep the platform alive, you can give a look at &lt;a href="https://www.reddit.com/r/Python/comments/9tugvn/exercismio_needs_python_mentors/e8zy5mq/"&gt;this answer on Reddit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I found out about the platform, I decided to use it (as student) to &lt;strong&gt;improve my Go coding skills&lt;/strong&gt;. I must say that I've been learning a lot from the mentors and some of them are putting a lot of effort to give you all the possible advices to improve your coding style. In a single exercise once, I learnt at least five things about Go I didn't know before!&lt;/p&gt;
&lt;p&gt;I've been a Python developer (professionally) for the last 5 years, but I've never considered myself an "expert". I decided to give it a try with mentoring, because I felt I wanted to &lt;strong&gt;give something back to the community&lt;/strong&gt;, so I registered as mentor too and started mentoring in the Python track.&lt;/p&gt;
&lt;p&gt;The first surprise has been that mentoring other students, I was probably learning more than how much I was teaching. First of all, once you already know how to solve a problem, it's always interesting to look at other possible solutions. I've found sometimes that students were providing better (more concise and readable) solutions than mine. Last but not least, before advising someone about conding style or a more idiomatic solution, I always double check things from different sources. There is nothing wrong making mistakes, especially if you are learning... but it would be damaging for the student if I was teaching them something wrong, so I need to be sure about what I say. This of course makes me study, even the basic things, again and again and at the end of the day, my skills are better too.&lt;/p&gt;
&lt;p&gt;Once you join the mentors group, you are invited to a private Slack where you can count on the help of other mentors (we have channels for each track/language) or ask questions. So, if you are not sure about something, you can always ask around.&lt;/p&gt;
&lt;p&gt;If my story and experience convinced you, &lt;strong&gt;Exercism is looking for more mentors!&lt;/strong&gt; The more we have available, the less time the students have to wait in a queue to be mentored. You can find all the instructions at this address &lt;a href="https://mentoring.exercism.io/"&gt;https://mentoring.exercism.io&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sun, 04 Nov 2018 13:00:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2018-11-04:/2018/11/04/why-i-mentor-on-exercism/</guid><category>Python</category><category>python</category><category>mentoring</category><category>programming</category><category>software</category><category>development</category><category>exercism</category><category>student</category></item><item><title>Using ipdb with Python 3.7.x breakpoint</title><link>https://www.andreagrandi.it/2018/10/16/using-ipdb-with-python-37-breakpoint/</link><description>&lt;p&gt;Python 3.7.x introduced a &lt;a href="https://docs.python.org/3/whatsnew/3.7.html#pep-553-built-in-breakpoint"&gt;new method to insert a breakpoint&lt;/a&gt; in the code.
Before Python 3.7.x to insert a debugging point we had to write &lt;code&gt;import pdb; pdb.set_trace()&lt;/code&gt; which honestly I could never remember (and I also created a snippet on VS Code to auto complete it).&lt;/p&gt;
&lt;p&gt;Now you can just write &lt;code&gt;breakpoint()&lt;/code&gt; that's it!&lt;/p&gt;
&lt;p&gt;Now... the only problem is that by default that command will use &lt;strong&gt;pdb&lt;/strong&gt; which is not exactly the best debugger you can have. I usually use &lt;strong&gt;ipdb&lt;/strong&gt; but there wasn't an intuitive way of using it... and no, just installing it in your virtual environment, it won't be used by default.&lt;/p&gt;
&lt;p&gt;How to use it then? It's very simple. The new debugging command will read an environment variable named &lt;strong&gt;PYTHONBREAKPOINT&lt;/strong&gt;. If you set it properly, you will be able to use ipdb instead of pdb.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export PYTHONBREAKPOINT=ipdb.set_trace
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, any time you use &lt;code&gt;breakpoint()&lt;/code&gt; in your code, &lt;strong&gt;ipdb&lt;/strong&gt; will be used instead of &lt;strong&gt;pdb&lt;/strong&gt;.&lt;/p&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/python-3-7s-new-builtin-breakpoint-a-quick-tour-4f1aebc444c"&gt;https://hackernoon.com/python-3-7s-new-builtin-breakpoint-a-quick-tour-4f1aebc444c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Tue, 16 Oct 2018 22:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2018-10-16:/2018/10/16/using-ipdb-with-python-37-breakpoint/</guid><category>Python</category><category>python</category><category>debugging</category><category>programming</category><category>software</category><category>development</category></item><item><title>Machine Learning: Pima Indians Diabetes</title><link>https://www.andreagrandi.it/2018/04/14/machine-learning-pima-indians-diabetes/</link><description>&lt;p&gt;Solving the Pima Indians Diabetes problem with Machine Learning using Python and scikit-learn&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sat, 14 Apr 2018 21:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2018-04-14:/2018/04/14/machine-learning-pima-indians-diabetes/</guid><category>Development</category><category>Machine Learning</category><category>Python</category><category>scikit-learn</category><category>tutorial</category></item><item><title>Creating a production ready API with Python and Django Rest Framework – part 4</title><link>https://www.andreagrandi.it/2017/08/17/creating-a-production-ready-api-with-python-and-django-rest-framework-part-4/</link><description>&lt;p&gt;In the &lt;a href="https://www.andreagrandi.it/2017/03/12/creating-a-production-ready-api-with-python-and-django-rest-framework-part-3/"&gt;previous
part&lt;/a&gt;
of the tutorial we implemented &lt;strong&gt;details&lt;/strong&gt; management, &lt;strong&gt;relations&lt;/strong&gt;
between models, &lt;strong&gt;nested APIs&lt;/strong&gt; and a different level of permissions.
Our API is basically complete but it is working properly? Is the source
code free of bugs? Would you feel confident to refactor the code without
breaking something? The answer to all our question is probably no. &lt;strong&gt;I
can't be sure if the code behaves properly nor I would feel confident
refactoring anything without having some tests coverage&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As I mentioned previously, we should have written tests since the
beginning, but I really didn't want to mix too many concepts together
and I wanted to let the user concentrate on the Rest Framework instead.&lt;/p&gt;
&lt;h3&gt;Test structure and configuration&lt;/h3&gt;
&lt;p&gt;Before beginning the fourth part of this tutorial, make sure you have
grabbed the latest source code
from &lt;a href="https://github.com/andreagrandi/drf-tutorial"&gt;https://github.com/andreagrandi/drf-tutorial&lt;/a&gt; and you have checked
out the previous git tag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout tutorial-1.14
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django has an integrated test runner but my personal choice is to use
&lt;a href="https://doc.pytest.org/en/latest/"&gt;&lt;strong&gt;pytest&lt;/strong&gt;&lt;/a&gt;, so as first thing let's
install the needed libraries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pytest pytest-django
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As long as we respect a minimum of conventions (test files must start
with &lt;strong&gt;test_&lt;/strong&gt; prefix), tests can be placed anywhere in the code. My
advice is to put them all together in a separate folder and divide them
according to app names. In our case we are going to create a folder
named "&lt;strong&gt;tests&lt;/strong&gt;" at the same level of &lt;strong&gt;manage.py&lt;/strong&gt; file. Inside this
folder we need to create a &lt;strong&gt;__init__.py&lt;/strong&gt; file and another folder
called &lt;strong&gt;catalog&lt;/strong&gt; with an additional &lt;strong&gt;__init__.py&lt;/strong&gt; inside. Now,
still at the same level of &lt;strong&gt;manage.py&lt;/strong&gt; create a file called
&lt;strong&gt;pytest.ini&lt;/strong&gt; with this content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pytest&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;DJANGO_SETTINGS_MODULE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;drftutorial&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Are you feeling confused? No problem. You can checkout the source code
containing these changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout tutorial-1.15
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can check if you have done everything correctly going inside the
drftutorial folder (the one containing &lt;strong&gt;manage.py&lt;/strong&gt;) and launching
&lt;strong&gt;pytest&lt;/strong&gt;. If you see something like this, you did your changes
correctly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;drf-tutorial&lt;span class="o"&gt;)&lt;/span&gt; ➜  drftutorial git:&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;pytest&lt;/span&gt;
&lt;span class="o"&gt;=============================================================================================================================&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; session &lt;span class="nv"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;==============================================================================================================================&lt;/span&gt;
platform darwin -- Python &lt;span class="m"&gt;2&lt;/span&gt;.7.13, pytest-3.0.6, py-1.4.32, pluggy-0.4.0
Django settings: drftutorial.settings &lt;span class="o"&gt;(&lt;/span&gt;from ini file&lt;span class="o"&gt;)&lt;/span&gt;
rootdir: /Users/andrea/Projects/drf-tutorial/drftutorial, inifile: pytest.ini
plugins: django-3.1.2
collected &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt;

&lt;span class="o"&gt;=========================================================================================================================&lt;/span&gt; no tests ran &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.01 &lt;span class="nv"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;=========================================================================================================================&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;drf-tutorial&lt;span class="o"&gt;)&lt;/span&gt; ➜  drftutorial git:&lt;span class="o"&gt;(&lt;/span&gt;master&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Writing the first test&lt;/h3&gt;
&lt;p&gt;To begin with, I will show you how to write a simple test that will
verify if the API can return the products list. If you remember we
implemented this API in the first part of the tutorial. First of all
create a file called &lt;strong&gt;test_views.py&lt;/strong&gt; under the folder
&lt;strong&gt;drftutorial/tests/catalog/&lt;/strong&gt; and add this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;APITestCase&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestProductList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APITestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@pytest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;django_db&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_can_get_product_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;product-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_200_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;before being able to run this test we need to change a little thing in
the &lt;strong&gt;catalog/urls.py&lt;/strong&gt; file, something we should have done since the
beginning. Please change the first url in this way, adding the &lt;strong&gt;name&lt;/strong&gt;
parameter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^products/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProductList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;product-list&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;at this point we are able to run our test suite again and verify the
test is passing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;drf-tutorial&lt;span class="o"&gt;)&lt;/span&gt; ➜  drftutorial git:&lt;span class="o"&gt;(&lt;/span&gt;test-productlist&lt;span class="o"&gt;)&lt;/span&gt; ✗ pytest -v
&lt;span class="o"&gt;=============================================================================================================================&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt; session &lt;span class="nv"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;==============================================================================================================================&lt;/span&gt;
platform darwin -- Python &lt;span class="m"&gt;2&lt;/span&gt;.7.13, pytest-3.0.6, py-1.4.32, pluggy-0.4.0 -- /Users/andrea/.virtualenvs/drf-tutorial/bin/python2.7
cachedir: .cache
Django settings: drftutorial.settings &lt;span class="o"&gt;(&lt;/span&gt;from ini file&lt;span class="o"&gt;)&lt;/span&gt;
rootdir: /Users/andrea/Projects/drf-tutorial/drftutorial, inifile: pytest.ini
plugins: django-3.1.2
collected &lt;span class="m"&gt;1&lt;/span&gt; items

tests/catalog/test_views.py::TestProductList::test_can_get_product_list &lt;span class="nv"&gt;PASSED&lt;/span&gt;

&lt;span class="o"&gt;===========================================================================================================================&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; passed &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;.98 &lt;span class="nv"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;===========================================================================================================================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To checkout the source code at this point:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout tutorial-1.16
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Explaining the test code&lt;/h3&gt;
&lt;p&gt;When we implement a test, the first thing to do is to create a
&lt;strong&gt;test_*&lt;/strong&gt; file and import the minimum necessary to write a test class
and method. Each test class must inherit from &lt;strong&gt;APITestCase&lt;/strong&gt; and have a
name that start with &lt;strong&gt;Test&lt;/strong&gt;, like &lt;strong&gt;TestProductList&lt;/strong&gt;. Since we use
&lt;a href="https://doc.pytest.org/en/latest/"&gt;pytest&lt;/a&gt;, we need to mark our method
with &lt;strong&gt;@pytest.mark.django_db decorator&lt;/strong&gt;, to tell the test suite our
code will explicitly access the database. We are going to use the &lt;strong&gt;client&lt;/strong&gt; object
that is integrated in APITestCase to perform the request. Before doing that we
first get the local &lt;strong&gt;url&lt;/strong&gt; using Django's &lt;strong&gt;reverse&lt;/strong&gt; function. At this point
we do the call using the client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then we assert a couple of things that we expect to be true:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_200_OK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We check that our API returns the &lt;strong&gt;200&lt;/strong&gt; status code and that in the returned
JSON there are 8 elements.&lt;/p&gt;
&lt;p&gt;It's normally a good practice to create test data inside the tests, but in our case
we previously created a data migration that creates test data. Migrations are
run every time we run tests so when we call our API, the data will be already there.&lt;/p&gt;
&lt;h3&gt;Wrapping up&lt;/h3&gt;
&lt;p&gt;I've written a &lt;a href="https://github.com/andreagrandi/drf-tutorial/blob/master/drftutorial/tests/catalog/test_views.py"&gt;few tests&lt;/a&gt; 
for all the views we have implemented until now and they are available
if you checkout this version of the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout tutorial-1.17
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've only tested the views but it would be nice to test even the permission class, for example.
Please remember to write your tests first, if possible: implementing the code will be much more natural
once the tests are already in place.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Thu, 17 Aug 2017 07:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2017-08-17:/2017/08/17/creating-a-production-ready-api-with-python-and-django-rest-framework-part-4/</guid><category>Development</category><category>API</category><category>Django</category><category>framework</category><category>Python</category><category>rest</category><category>tutorial</category></item><item><title>Migrating from WordPress to a static generated website</title><link>https://www.andreagrandi.it/2017/07/02/migrating-from-wordpress-to-static-generated-website/</link><description>&lt;p&gt;As you may have noticed, my website looks very different compared to a few days ago.
It's just a different theme or template, I completely changed how the pages are generated and
I'm hosting it in a completely different way.&lt;/p&gt;
&lt;h3&gt;A brief history&lt;/h3&gt;
&lt;p&gt;When I started this blog 10 years ago, I was hosting it on a shared hosting service and it was based on &lt;strong&gt;WordPress&lt;/strong&gt;.
I then decided to keep WordPress as backend (I don't like PHP very much but I wasn't even good at front end development at the time,
so using a tool that allowed me to concentrate on the content rather than on design was a natural choice for me) but to move my website
to a &lt;strong&gt;VPS&lt;/strong&gt; on &lt;strong&gt;DigitalOcean&lt;/strong&gt;, where I've self-hosted &lt;strong&gt;Nginx + PHP + MySQL&lt;/strong&gt; and even Postfix for email aliases until a few days ago.&lt;/p&gt;
&lt;h3&gt;Why moving to a static website?&lt;/h3&gt;
&lt;p&gt;In these three or four years I've been using a VPS, I must say I've been good enough (or maybe lucky?) at keeping "bad people" out
of my server, but it's true that &lt;strong&gt;maintaining a VPS can be very time consuming&lt;/strong&gt; and you can never be sure that your website is always safe.
I've heard about static website before, but I was a bit skeptic because I had not spent enough time investigating all the possibilities
(search and comments are still possible, thanks to external services and plugins).&lt;/p&gt;
&lt;p&gt;Another advantage of a static website is that I can perfectly "run" (preview) on my local computer without publishing it online. Pages can be rendered locally
and will appear in the browser exactly as they will appear once published online.&lt;/p&gt;
&lt;p&gt;If you use a tool like WordPress, you need to be constantly connected to Internet to write any change. With static pages &lt;strong&gt;I can write my content offline&lt;/strong&gt;
(so I can do it while commuting on the train or while I'm flying somewhere) and publish it once I'm back online.&lt;/p&gt;
&lt;h3&gt;Pelican&lt;/h3&gt;
&lt;p&gt;The tool that I'm using to generate this website is called &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;. 
There are many &lt;a href="https://www.staticgen.com/"&gt;static website generators&lt;/a&gt;, the reason why I chose Pelican is because it's written in &lt;strong&gt;Python&lt;/strong&gt;,
so if I need to do any change I can do them and because its templates use Jinja2 which I'm already familiar with. It can also import posts from WordPress
(and I had over 180 posts to import from my previous website) so if you are migrating from it it's a good choice. Please note that the import script is not perfect
and that you may have to adjust some formatting here and there.&lt;/p&gt;
&lt;h3&gt;A new deployment pipeline&lt;/h3&gt;
&lt;p&gt;When you use WordPress your website is already online and all you have to do is to login, use the integrated editor, write content and finally publish it.
A static website doesn't have any admin tool, it's just static pages. How do you publish content then? There are of course multiple solutions available.
In my case my website source code is hosted in &lt;a href="https://github.com/andreagrandi/andreagrandi.it"&gt;a repository on GitHub&lt;/a&gt;. When I commit on &lt;strong&gt;master&lt;/strong&gt; branch
there is a webhook that triggers a &lt;a href="https://github.com/andreagrandi/andreagrandi.it/blob/master/.travis.yml"&gt;build job&lt;/a&gt; on &lt;a href="https://travis-ci.org/"&gt;TravisCI&lt;/a&gt;.
TravisCI fetches the latest source code, installs Pelican on the CI and builds the static pages. Once the build is finished, a &lt;a href="https://github.com/andreagrandi/andreagrandi.it/blob/master/deploy.sh"&gt;bash script&lt;/a&gt; is used to &lt;strong&gt;publish&lt;/strong&gt;
the generated pages on the static website hosting service.&lt;/p&gt;
&lt;h3&gt;Hosting a static website&lt;/h3&gt;
&lt;p&gt;The good thing about hosting a static website is that you don't need a database so you can host it almost anywhere at a cheaper price or even for free.
In my case I've decided to use &lt;strong&gt;GitHub pages&lt;/strong&gt;, mainly for simplicity. Every GitHub user can have a static website hosted at &amp;lt;yourusername&gt;.github.io for free.
To start using it, you just have to create a repository named &amp;lt;yourusername&gt;.github.io under your GitHub account. In my case the repository is &lt;a href="https://github.com/andreagrandi/andreagrandi.github.io"&gt;https://github.com/andreagrandi/andreagrandi.github.io&lt;/a&gt;. My deploy script simply takes the generated content
that is in the output/ folder and &lt;strong&gt;git push&lt;/strong&gt; it on this repository. Once the website has been pushed to git, it's immediately available at &lt;strong&gt;https://andreagrandi.github.io&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;CloudFlare&lt;/h4&gt;
&lt;p&gt;GitHub Pages service has a little limitation: you can either have your website served from a URL similar to the one I've just mentioned, including SSL support &lt;em&gt;or&lt;/em&gt; you can use your own domain, but &lt;strong&gt;you can't have both things&lt;/strong&gt; (SSL + custom domain). To workaround this, you can instruct your domain registrar (in my case is &lt;a href="https://www.gandi.net/"&gt;Gandi.net&lt;/a&gt;) to let CloudFlare manage your domain and just enabling "Full SSL" support will do the trick. I won't repeat here how to use CloudFlare since they have a very nice tutorial explaining how to configure their service to be used with GitHub Pages: &lt;a href="https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/"&gt;https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/&lt;/a&gt;. Remember to include a &lt;strong&gt;CNAME&lt;/strong&gt; file containing your domain name and let your static generetor put it on the root of your website, otherwise GitHub pages won't serve the pages correctly.&lt;/p&gt;
&lt;h4&gt;Why not Amazon S3?&lt;/h4&gt;
&lt;p&gt;While I was looking for instructions about how to host a static websites, I found many examples of websites using Amazon S3. There is nothing wrong with using this service (just keep in mind that it's not free, Amazon charges you for space usage and requests, so keep an eye on the AWS bill) but the way these websites were using it was completely wrong. The most common error I noticed was the fact they were enabling the &lt;strong&gt;flexible SSL&lt;/strong&gt; option on CloudFlare: this means that the connection between the visitor and CloudFlare was encrypted (and visitor could see the the SSL enabled) but the connection between CloudFlare and Amazon S3 was being served with &lt;strong&gt;HTTP only&lt;/strong&gt;, meaning that potentially the pages could have been modified before being served. Infact Amazon doesn't serve the S3 website buckets with SSL, they use plain HTTP (Why are you doing this Amazon?!). To use the S3 bucket correctly one should also configure Route 53 (to manage DNS) and CloudFront (the Amazon equivalent of CloudFlare service, beware because this is also charged separately depending on usage/traffic), making the whole setup a bit more complicated.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I finally moved away from my VPS and from now on I will be able to concentrate my time on content only instead of spending part of it to maintain my server. Last but not least, the possibility to write my content offline, will hopefully allow me to write from places (train, airplane) where I've never written from before. If you have any suggestion or if if you notice any error, feel free to leave a comment here below. In alternative, since now this blog is completely open source and on GitHub, you can fork it and make a pull request!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sun, 02 Jul 2017 13:00:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2017-07-02:/2017/07/02/migrating-from-wordpress-to-static-generated-website/</guid><category>Development</category><category>Python</category><category>Pelican</category><category>static</category><category>website</category><category>migration</category><category>CloudFlare</category><category>GitHub</category></item><item><title>Creating a production ready API with Python and Django Rest Framework – part 3</title><link>https://www.andreagrandi.it/2017/03/12/creating-a-production-ready-api-with-python-and-django-rest-framework-part-3/</link><description>&lt;p&gt;In the &lt;a href="https://www.andreagrandi.it/2016/10/01/creating-a-production-ready-api-with-python-and-django-rest-framework-part-2/"&gt;previous
part&lt;/a&gt;
we implemented authentication, permissions and the possibility to POST
new products for admins. In this new episode we will see how to
implement &lt;strong&gt;details&lt;/strong&gt; management, &lt;strong&gt;relations&lt;/strong&gt; between models, &lt;strong&gt;nested
APIs&lt;/strong&gt; and a different level of permissions.&lt;/p&gt;
&lt;p&gt;If you haven't completed the previous parts or if you want to begin from
this one, checkout the right code first:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout tutorial-1.10
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Handling Product Details&lt;/h3&gt;
&lt;p&gt;Our current API methods allow us to list all the products we have in our
catalog and to create a new one (if we have admin permissions), but what
if we wanted to delete or update a single one? What if we wanted to get
only a specific product? We need to handle details.&lt;/p&gt;
&lt;p&gt;As first thing we need to change the &lt;strong&gt;ProductSerializer&lt;/strong&gt; to return the
id of the product. Edit &lt;strong&gt;catalog/serializers.py&lt;/strong&gt; and change the class
in this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelSerializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After changing the serializer we need to implement a new view called
&lt;strong&gt;ProductDetail&lt;/strong&gt;. Edit &lt;strong&gt;catalog/views.py&lt;/strong&gt; and add the following
imports:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Http404&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;APIView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the following class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductDetail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DoesNotExist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;Http404&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_400_BAD_REQUEST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_204_NO_CONTENT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;let's connect the new view to the urls, editing catalog/urls.py and
changing the code in this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^products/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProductList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^products/(?P&amp;lt;pk&amp;gt;[0-9]+)/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProductDetail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we try to &lt;strong&gt;PUT&lt;/strong&gt;, &lt;strong&gt;DELETE&lt;/strong&gt; or &lt;strong&gt;GET&lt;/strong&gt; a product like
&lt;strong&gt;/products/1/&lt;/strong&gt; we can now update, delete or retrieve an existing item,
but there is a little problem: we haven't set any permission on this
class, so anyone can do it. The previous view was also more compact, why
don't we use a generic view to perform these basic operations? Let's
refactor &lt;strong&gt;ProductDetail&lt;/strong&gt; with a
&lt;a href="http://www.django-rest-framework.org/api-guide/generic-views/#retrieveupdatedestroyapiview"&gt;&lt;strong&gt;RetrieveUpdateDestroyAPIView&lt;/strong&gt;&lt;/a&gt;
generic class. Open &lt;strong&gt;catalog/views.py&lt;/strong&gt; and change the class code in
this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductDetail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RetrieveUpdateDestroyAPIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;
    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IsAdminOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it! With just three lines of code we have now implemented the
same feature of the previous class, plus we have set the correct
permissions.&lt;/p&gt;
&lt;p&gt;To checkout the code at this point:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout tutorial-1.12
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Reviews - Relations between models&lt;/h3&gt;
&lt;p&gt;As many online catalogs already have, it would be nice if our API had an
endpoint where it is possible to leave a review for a product and get a
list of reviews for a specific product. To implement this feature we
need to add a new model to our application. Edit &lt;strong&gt;catalog/models.py&lt;/strong&gt;
adding this import:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.auth.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and this Django model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Review&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;related_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;reviews&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;review&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;rating&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IntegerField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;created_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ForeignKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;after creating the model, please remember to create the related DB
&lt;strong&gt;migration&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py makemigrations catalog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When the model is ready, we have to do some changes to the serializers.
First of all we need to write a new one, for our new &lt;strong&gt;Review&lt;/strong&gt; model.
Then we have to change our &lt;strong&gt;ProductSerializer&lt;/strong&gt; so that it will return
its related reviews. Each Product can have multiple Review. And each
Review will be always linked to a specific Product. Edit
&lt;strong&gt;catalog/serializers.py&lt;/strong&gt; and change it in this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;serializers&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ReviewSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelSerializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;created_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReadOnlyField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;created_by.username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;review&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rating&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;created_by&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelSerializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;reviews&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ReviewSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;read_only&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;reviews&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; in &lt;strong&gt;ReviewSerializer&lt;/strong&gt; when we serialise the user contained
in &lt;strong&gt;created_by&lt;/strong&gt; field, return the username instead of the id (to make
it more human readable). Another important thing to notice is that the
value of the &lt;strong&gt;related_name&lt;/strong&gt; we have set in the &lt;strong&gt;Review&lt;/strong&gt; model must
match with the field name we have added in &lt;strong&gt;ProductSerializer fields&lt;/strong&gt;
property. In this case we have set it to &lt;strong&gt;reviews&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;At this point we need to add a new view. Edit &lt;strong&gt;catalog/views.py&lt;/strong&gt; and
add the following imports:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.permissions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IsAuthenticatedOrReadOnly&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ReviewSerializer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then add this class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ReviewList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListCreateAPIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ReviewSerializer&lt;/span&gt;
    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IsAuthenticatedOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;perform_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;created_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;product_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can notice, I had to customise the &lt;strong&gt;perform_create&lt;/strong&gt; method
because the default one doesn't know anything about the fact we want to
set the &lt;strong&gt;created_by&lt;/strong&gt; and &lt;strong&gt;product_id&lt;/strong&gt; fields. Finally we need to
bind this new view to a specific url, so we need to edit
&lt;strong&gt;catalog/urls.py&lt;/strong&gt; and add this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^products/(?P&amp;lt;pk&amp;gt;[0-9]+)/reviews/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReviewList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point any authenticated user should be able to &lt;strong&gt;POST a review&lt;/strong&gt;
for a product and anyone should be able to get the &lt;strong&gt;list of reviews&lt;/strong&gt;
for each product. If you have any problem with the code and want to move
to this point, please checkout this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout tutorial-1.13
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Nested APIs details&lt;/h3&gt;
&lt;p&gt;To complete our API endpoints for Review, we need to add an additional
feature that will let users to edit/delete their own review. Before
implementing the new view, we need a little bit of refactoring and a new
permission class. Edit &lt;strong&gt;catalog/permissions.py&lt;/strong&gt; and add this new
class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IsOwnerOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BasePermission&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_object_permission&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;SAFE_METHODS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created_by&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basically this will permit changes to the review only to its author. Now
we are going to add new urls and doing some refactoring at the same
time. Edit &lt;strong&gt;catalog/urls.py&lt;/strong&gt; and change the urls in this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^products/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProductList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^products/(?P&amp;lt;product_id&amp;gt;[0-9]+)/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProductDetail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^products/(?P&amp;lt;product_id&amp;gt;[0-9]+)/reviews/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReviewList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^products/(?P&amp;lt;product_id&amp;gt;[0-9]+)/reviews/(?P&amp;lt;review_id&amp;gt;[0-9]+)/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ReviewDetail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may have noticed that I substituted &lt;strong&gt;pk&lt;/strong&gt; with &lt;strong&gt;product_id&lt;/strong&gt;. In
the latest url I added, we need to be able to identify two primary keys:
the one for the product and the one for the review. I renamed the
previous ones for consistency. Now it's time to add the new view for
Review details. Edit &lt;strong&gt;catalog/view.py&lt;/strong&gt; and add this class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ReviewDetail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RetrieveUpdateDestroyAPIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ReviewSerializer&lt;/span&gt;
    &lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IsAuthenticatedOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IsOwnerOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lookup_url_kwarg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;review_id&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;review&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;review_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Review&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;review&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What are we doing here? You may have noticed that we set a new property
called &lt;strong&gt;lookup_url_kwarg&lt;/strong&gt;. That property is being used to determine
the keyword in &lt;strong&gt;urls.py&lt;/strong&gt; to be used for the primary key lookup.&lt;/p&gt;
&lt;p&gt;You will also need to do some refactoring to the other views, to adapt
them to the changes we just did to the urls. I suggest you to have a
look at the diffs
here: &lt;a href="https://github.com/andreagrandi/drf-tutorial/compare/tutorial-1.13...tutorial-1.14"&gt;https://github.com/andreagrandi/drf-tutorial/compare/tutorial-1.13...tutorial-1.14&lt;/a&gt;
or you can have a look at the whole file
here &lt;a href="https://github.com/andreagrandi/drf-tutorial/blob/541bf31c11fd1dbf2bcc1d31312086995e3e5b48/drftutorial/catalog/views.py"&gt;https://github.com/andreagrandi/drf-tutorial/blob/541bf31c11fd1dbf2bcc1d31312086995e3e5b48/drftutorial/catalog/views.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In alternative, you can fetch the whole source code at this point:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout tutorial-1.14
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;In this third part of the tutorial you learned how to handle model
details in the API and how relations between different model work. In
the &lt;a href="https://www.andreagrandi.it/2017/08/17/creating-a-production-ready-api-with-python-and-django-rest-framework-part-4/"&gt;next part of the tutorial&lt;/a&gt;
we will do something we should have done since the beginning: adding &lt;strong&gt;tests&lt;/strong&gt; to 
our code and learn how to properly
test the API.&lt;/p&gt;
&lt;h3&gt;Feedback Please&lt;/h3&gt;
&lt;p&gt;If you enjoyed this tutorial, please leave me some feedback!
I really want to improve my work, based on the users feedback so any little advice will be appreciated, thanks!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sun, 12 Mar 2017 11:21:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2017-03-12:/2017/03/12/creating-a-production-ready-api-with-python-and-django-rest-framework-part-3/</guid><category>Development</category><category>API</category><category>Django</category><category>framework</category><category>Python</category><category>rest</category><category>tutorial</category></item><item><title>Creating a production ready API with Python and Django Rest Framework – part 2</title><link>https://www.andreagrandi.it/2016/10/01/creating-a-production-ready-api-with-python-and-django-rest-framework-part-2/</link><description>&lt;p&gt;In the &lt;a href="https://www.andreagrandi.it/2016/09/28/creating-production-ready-api-python-django-rest-framework-part-1/"&gt;first
part&lt;/a&gt;
of this tutorial we have seen how to create a basic API using &lt;strong&gt;Django
Rest Framework&lt;/strong&gt;. This second part will explain how to implement
&lt;strong&gt;POST&lt;/strong&gt; methods and add different levels of &lt;strong&gt;permissions&lt;/strong&gt; and
&lt;strong&gt;authentication&lt;/strong&gt;. If you are starting from part 2, you may want to
checkout the source code at this exact point:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout tutorial-1.4
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;A step back&lt;/h3&gt;
&lt;p&gt;Before showing how easy it is to implement a &lt;strong&gt;POST&lt;/strong&gt; method for our
existing API, I want to do a step back and show you the "manual way",
using just the
&lt;a href="http://www.django-rest-framework.org/api-guide/views/"&gt;&lt;strong&gt;APIView&lt;/strong&gt;&lt;/a&gt;
class. Edit the file &lt;strong&gt;catalog/views.py&lt;/strong&gt; and change the code in this
way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;APIView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we try to use the API again (from the browser of from the http
client), it will still work in the same way. The difference here is that
we are using the very basic &lt;strong&gt;APIView&lt;/strong&gt; class and we have explicitly
defined the &lt;strong&gt;GET&lt;/strong&gt; method for it.&lt;/p&gt;
&lt;h3&gt;Implementing a POST method with APIView&lt;/h3&gt;
&lt;p&gt;An API is not being used at its full potential if it's read only. We are
going to implement a POST method for the existing view and testing it
with &lt;a href="https://httpie.org/"&gt;&lt;strong&gt;httpie&lt;/strong&gt;&lt;/a&gt; client again. First of all we
need to add an import to &lt;strong&gt;catalog/views.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then we add this method to our &lt;strong&gt;ProductList&lt;/strong&gt; class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_201_CREATED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;HTTP_400_BAD_REQUEST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's test our &lt;strong&gt;POST&lt;/strong&gt; method we just implemented:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ http --json POST http://127.0.0.1:8000/products/ &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Salamino&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Salamino Piccante&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10.50&amp;quot;&lt;/span&gt;
HTTP/1.0 &lt;span class="m"&gt;201&lt;/span&gt; Created
Allow: GET, POST, HEAD, OPTIONS
Content-Type: application/json
Date: Thu, &lt;span class="m"&gt;29&lt;/span&gt; Sep &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt;:48:48 GMT
Server: WSGIServer/0.1 Python/2.7.10
Vary: Accept, Cookie
X-Frame-Options: SAMEORIGIN

&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Salamino Piccante&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Salamino&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;10.50&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works! In case something doesn't work, try to fetch the source code
at this point:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout tutorial-1.7
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Implementing a POST method with ListCreateAPIView&lt;/h3&gt;
&lt;p&gt;Do you remember when I mentioned at the beginning that there is an easy
way to do the same thing? I wasn't cheating. Let's change again our old
code in &lt;strong&gt;catalog/views.py&lt;/strong&gt; but this time we will use a different base
class:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;generics&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListCreateAPIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;let's test this again with &lt;strong&gt;httpie&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ http --json POST http://127.0.0.1:8000/products/ &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Pecorino&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Pecorino Sardo&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;7.00&amp;quot;&lt;/span&gt;
HTTP/1.0 &lt;span class="m"&gt;201&lt;/span&gt; Created
Allow: GET, POST, HEAD, OPTIONS
Content-Type: application/json
Date: Thu, &lt;span class="m"&gt;29&lt;/span&gt; Sep &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;:21:20 GMT
Server: WSGIServer/0.1 Python/2.7.10
Vary: Accept, Cookie
X-Frame-Options: SAMEORIGIN

&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Pecorino Sardo&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Pecorino&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;7.00&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We just POSTed some data on the API! How can it work? Well, we have
changed the base class from &lt;strong&gt;ListAPIView&lt;/strong&gt; to
&lt;a href="http://www.django-rest-framework.org/api-guide/generic-views/#listcreateapiview"&gt;&lt;strong&gt;ListCreateAPIView&lt;/strong&gt;&lt;/a&gt;.
This particular class implements &lt;strong&gt;a generic POST method&lt;/strong&gt; that will
accept and validate all the fields through the specified serializer.&lt;/p&gt;
&lt;h3&gt;Authentication&lt;/h3&gt;
&lt;p&gt;Now our API let us add products to the catalog, amazing! But... is it
exactly what we want? In a real scenario we don't want any random user
to be able to add products in our database, so we are going to protect
the POST method allowing only Admin users.&lt;/p&gt;
&lt;p&gt;Before digging into Django Rest Framework permissions, we need to setup
an authentication system. For simplicity we will implement
&lt;a href="http://www.django-rest-framework.org/api-guide/authentication/#tokenauthentication"&gt;&lt;strong&gt;TokenAuthentication&lt;/strong&gt;&lt;/a&gt;.
As first step we need to edit &lt;strong&gt;settings.py&lt;/strong&gt; and
insert &lt;strong&gt;rest_framework.authtoken&lt;/strong&gt; in the &lt;strong&gt;INSTALLED_APPS&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;rest_framework&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;rest_framework.authtoken&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;catalog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;after this, we need to add &lt;strong&gt;TokenAuthentication&lt;/strong&gt; as default
authentication class (append this in &lt;strong&gt;settings.py&lt;/strong&gt; at the end):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;REST_FRAMEWORK&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;DEFAULT_AUTHENTICATION_CLASSES&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;rest_framework.authentication.TokenAuthentication&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally we need to add a particular URL to the project so that clients
will be able to call an endpoint passing &lt;strong&gt;username&lt;/strong&gt; and &lt;strong&gt;password&lt;/strong&gt;
to get a &lt;strong&gt;token&lt;/strong&gt; back. Edit &lt;strong&gt;drftutorial/urls.py&lt;/strong&gt; and make it's like
this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.authtoken.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;obtain_auth_token&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;catalog.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^api-token-auth/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obtain_auth_token&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Don't forget to re-run the &lt;strong&gt;migrations&lt;/strong&gt;, because TokenAuthorization
needs to change a couple of tables:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py migrate
Operations to perform:
    Apply all migrations: admin, auth, authtoken, catalog, contenttypes, sessions
Running migrations:
    Applying authtoken.0001_initial... OK
    Applying authtoken.0002_auto_20160226_1747... OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In case you had any problem changing the code up to this point, you can
always fetch the related git tag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout tutorial-1.9
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Testing the Authentication&lt;/h4&gt;
&lt;p&gt;Before testing the authentication, make sure you created at least the
Django &lt;strong&gt;superuser&lt;/strong&gt; with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py createsuperuser
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;now let's try to &lt;strong&gt;obtain the token&lt;/strong&gt; we will need later for our API
calls:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ http --json POST http://127.0.0.1:8000/api-token-auth/ &lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yourusername&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;yourpassword&amp;quot;&lt;/span&gt;
HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
Allow: POST, OPTIONS
Content-Type: application/json
Date: Fri, &lt;span class="m"&gt;30&lt;/span&gt; Sep &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;08&lt;/span&gt;:55:07 GMT
Server: WSGIServer/0.1 Python/2.7.11
X-Frame-Options: SAMEORIGIN

&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;bc9514f0892368cfd0ea792a977aff55d53e3634&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will need to pass this token in every API call we want to be
authenticated. The token is being passed through the "Authentication"
header parameter.&lt;/p&gt;
&lt;h3&gt;API Permissions&lt;/h3&gt;
&lt;p&gt;Authentication is something that identify the user with a particular
system. Permissions instead are the level of things that are allowed or
not allowed for a particular user. In our case we said we want to let
Admin users to be able to POST new products and we want to let even
anonymous users to GET the product list.&lt;/p&gt;
&lt;p&gt;Django Rest Framework has some built-in classes that we can apply to our
views to define the level of permissions. We could have used the
&lt;a href="http://www.django-rest-framework.org/api-guide/permissions/#isadminuser"&gt;&lt;strong&gt;IsAdminUser&lt;/strong&gt;&lt;/a&gt;
class, but it would not allow anonymous users to perform the GET
request. Or we could have used
&lt;a href="http://www.django-rest-framework.org/api-guide/permissions/#isauthenticatedorreadonly"&gt;&lt;strong&gt;IsAuthenticatedOrReadOnly&lt;/strong&gt;&lt;/a&gt;
class, but this would allow any registered user to add products (and we
want to let only admins).&lt;/p&gt;
&lt;p&gt;Or...we can define our own permission class and have exactly what we
want. Create a new file &lt;strong&gt;catalog/permissions.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.permissions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BasePermission&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SAFE_METHODS&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IsAdminOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BasePermission&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;has_permission&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;SAFE_METHODS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_staff&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just as a side note, &lt;strong&gt;SAFE_METHODS&lt;/strong&gt; are &lt;strong&gt;GET&lt;/strong&gt;, &lt;strong&gt;HEAD&lt;/strong&gt; and
&lt;strong&gt;OPTIONS&lt;/strong&gt;. These method are considered "safe" because they don't
change any existing data. Open &lt;strong&gt;catalog/views.py&lt;/strong&gt; again, import this
at the beginning:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.permissions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IsAdminOrReadOnly&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and set this as &lt;strong&gt;permission_classes&lt;/strong&gt; to &lt;strong&gt;ProductList&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;
&lt;span class="n"&gt;permission_classes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IsAdminOrReadOnly&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's now try to add a new product using the &lt;strong&gt;token&lt;/strong&gt; we got before
(you will have to use your own token of course, mine only works on my
local db):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ http --json POST http://127.0.0.1:8000/products/ &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lardo&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Lardo di Colonnata&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;8.50&amp;quot;&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Authorization: Token bc9514f0892368cfd0ea792a977aff55d53e3634&amp;#39;&lt;/span&gt;
HTTP/1.0 &lt;span class="m"&gt;201&lt;/span&gt; Created
Allow: GET, POST, HEAD, OPTIONS
Content-Type: application/json
Date: Fri, &lt;span class="m"&gt;30&lt;/span&gt; Sep &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt;:04:13 GMT
Server: WSGIServer/0.1 Python/2.7.11
Vary: Accept
X-Frame-Options: SAMEORIGIN

&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Lardo di Colonnata&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Lardo&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;8.50&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It worked! We have now protected our API so that not admin people can't
create any product. If you have any problem with the code, you can check
it out with this tag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout tutorial-1.10
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;We have now implemented the POST method to add new products to our
catalog. In the &lt;a href="https://www.andreagrandi.it/2017/03/12/creating-a-production-ready-api-with-python-and-django-rest-framework-part-3/"&gt;next
episode&lt;/a&gt;
we will see how to implement endpoints to get a single product, to
update or delete products and finally we will allow registered users to
send a review for a specific product.&lt;/p&gt;
&lt;h3&gt;Feedback Please&lt;/h3&gt;
&lt;p&gt;I know, this blog doesn't have any "comment" feature (I was tired of
dealing with spam), but if you want to provide some feedback you can
still do it by email. Just visit my
&lt;a href="https://www.andreagrandi.it/about/"&gt;&lt;strong&gt;About&lt;/strong&gt;&lt;/a&gt; page, you will find my
email there.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sat, 01 Oct 2016 11:12:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2016-10-01:/2016/10/01/creating-a-production-ready-api-with-python-and-django-rest-framework-part-2/</guid><category>Development</category><category>API</category><category>Django</category><category>framework</category><category>Python</category><category>rest</category><category>tutorial</category></item><item><title>Creating a production ready API with Python and Django Rest Framework - part 1</title><link>https://www.andreagrandi.it/2016/09/28/creating-production-ready-api-python-django-rest-framework-part-1/</link><description>&lt;p&gt;The aim if this tutorial is to show how to create a production ready
solution for a &lt;strong&gt;REST API&lt;/strong&gt;, using &lt;strong&gt;Python&lt;/strong&gt; and &lt;a href="http://www.django-rest-framework.org"&gt;Django Rest
Framework&lt;/a&gt;. I will show you how to
first create a very basic API, how to handle the authentication and
permissions and I will cover deployment and hosting of images. The full
source code of the tutorial is available
at: &lt;a href="https://github.com/andreagrandi/drf-tutorial"&gt;https://github.com/andreagrandi/drf-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Summary of the complete tutorial&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create the basic structure for the API&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.andreagrandi.it/2016/10/01/creating-a-production-ready-api-with-python-and-django-rest-framework-part-2/"&gt;Add Authentication and POST
    methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.andreagrandi.it/2017/03/12/creating-a-production-ready-api-with-python-and-django-rest-framework-part-3/"&gt;Handling details and changes to existing
    data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.andreagrandi.it/2017/08/17/creating-a-production-ready-api-with-python-and-django-rest-framework-part-4/"&gt;Testing the API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Switching from Sqlite to PostgreSQL&lt;/li&gt;
&lt;li&gt;Hosting the API on Heroku&lt;/li&gt;
&lt;li&gt;Add an Image field and save images to S3&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Create the basic structure for the API&lt;/h3&gt;
&lt;p&gt;For this tutorial I will assume you have correctly installed at least
&lt;strong&gt;Python&lt;/strong&gt; (I will use Python 2.7.x),
&lt;a href="https://pypi.python.org/pypi/virtualenv"&gt;&lt;strong&gt;virtualenv&lt;/strong&gt;&lt;/a&gt; and
&lt;a href="https://virtualenvwrapper.readthedocs.io/en/latest/"&gt;&lt;strong&gt;virtualenvwrapper&lt;/strong&gt;&lt;/a&gt;
on your system and I will explain how to create everything else step by
step.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; at the time of writing, the tutorial has been based on
&lt;strong&gt;Django 1.10.1&lt;/strong&gt; and &lt;strong&gt;Django Rest Framework 3.4.7&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Creating the main project structure&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir drf-tutorial
mkvirtualenv drf-tutorial
&lt;span class="nb"&gt;cd&lt;/span&gt; drf-tutorial
pip install django djangorestframework
django-admin.py startproject drftutorial .
&lt;span class="nb"&gt;cd&lt;/span&gt; drftutorial
django-admin.py startapp catalog
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Data Model&lt;/h3&gt;
&lt;p&gt;We will create the API for a generic products catalog, using a very
simple structure (to keep things simple). Edit the file
&lt;strong&gt;catalog/models.py&lt;/strong&gt; adding these lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DecimalField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decimal_places&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max_digits&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;after creating the model, we need to add 'catalog' application to
&lt;strong&gt;INSTALLED_APPS&lt;/strong&gt;. Edit &lt;strong&gt;settings.py&lt;/strong&gt; and add the app at the end of
the list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;catalog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;at this point the Django application will be recognised by the project
and we can create and apply the schema migration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;drf-tutorial&lt;span class="o"&gt;)&lt;/span&gt; ➜  drftutorial git:&lt;span class="o"&gt;(&lt;/span&gt;235dfcc&lt;span class="o"&gt;)&lt;/span&gt; ✗ ./manage.py makemigrations
Migrations &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;catalog&amp;#39;&lt;/span&gt;:
    catalog/migrations/0001_initial.py:
        - Create model Product

&lt;span class="o"&gt;(&lt;/span&gt;drf-tutorial&lt;span class="o"&gt;)&lt;/span&gt; ➜  drftutorial git:&lt;span class="o"&gt;(&lt;/span&gt;235dfcc&lt;span class="o"&gt;)&lt;/span&gt; ✗ ./manage.py migrate
Operations to perform:
    Apply all migrations: admin, auth, catalog, contenttypes, sessions
    Running migrations:
        Applying contenttypes.0001_initial... OK
        Applying auth.0001_initial... OK
        Applying admin.0001_initial... OK
        Applying admin.0002_logentry_remove_auto_add... OK
        Applying contenttypes.0002_remove_content_type_name... OK
        Applying auth.0002_alter_permission_name_max_length... OK
        Applying auth.0003_alter_user_email_max_length... OK
        Applying auth.0004_alter_user_username_opts... OK
        Applying auth.0005_alter_user_last_login_null... OK
        Applying auth.0006_require_contenttypes_0002... OK
        Applying auth.0007_alter_validators_add_error_messages... OK
        Applying auth.0008_alter_user_username_max_length... OK
        Applying catalog.0001_initial... OK
        Applying sessions.0001_initial... OK
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;API Serializer&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.django-rest-framework.org/api-guide/serializers/"&gt;&lt;strong&gt;Serializers&lt;/strong&gt;&lt;/a&gt;
are those components used to convert the received data from JSON format
to the relative Django model and viceversa. Create the new file
&lt;strong&gt;catalog/serializers.py&lt;/strong&gt; and place this code inside:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;serializers&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ModelSerializer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this case we are using a
&lt;a href="http://www.django-rest-framework.org/api-guide/serializers/#modelserializer"&gt;&lt;strong&gt;ModelSerializer&lt;/strong&gt;&lt;/a&gt;.
We need to create a new class from it, and specify the model attribute,
that's it. In this case we also specify the fields we want to return.&lt;/p&gt;
&lt;h3&gt;API View&lt;/h3&gt;
&lt;p&gt;The serializer alone is not able to respond to an API request, that's
why we need to implement a view. In this first version of the view (that
we will improve soon) we will "manually" transform the data available in
the serializer dictionary to a JSON response. In &lt;strong&gt;catalog/views.py&lt;/strong&gt;
add this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.renderers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSONRenderer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.parsers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JSONParser&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    An HttpResponse that renders its content into JSON.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;JSONRenderer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JSONResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point we need to tell our Django app to use this API view when a
certain URL is requested. We first need to add this code in
&lt;strong&gt;catalog/urls.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^products/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;product_list&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and finally we need to add this to &lt;strong&gt;drftutorial/urls.py&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;catalog.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Testing our work&lt;/h4&gt;
&lt;p&gt;At this point we should be able to start our Django app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's install a tool that will help us to test the API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install httpie
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;now we can use it to call our URL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ http http://127.0.0.1:8000/products/
HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
Content-Type: application/json
Date: Wed, &lt;span class="m"&gt;28&lt;/span&gt; Sep &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;09&lt;/span&gt;:54:50 GMT
Server: WSGIServer/0.1 Python/2.7.11
X-Frame-Options: SAMEORIGIN

&lt;span class="o"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It works! It's an empty response of course, because we still don't have
any data to show, but we will see later how to load some example data in
our database. If you have been able to follow the tutorial up to this
point, that's good. If not, don't worry. You can checkout the code at
exactly this point of the tutorial doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout tutorial-1.0
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Improving the API View&lt;/h3&gt;
&lt;p&gt;There is a quicker and more efficient way of implementing the same API
view we have seen before. We can use a class based view, in particular
the APIView class and also have the JSON response implemented
automatically. Change the code inside &lt;strong&gt;catalog/views.py&lt;/strong&gt; with this
one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.views&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;APIView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;serializer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serializer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will also have to change &lt;strong&gt;catalog/urls.py&lt;/strong&gt; in this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^products/$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProductList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can check the source code for this step of the tutorial with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="n"&gt;tutorial&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is also another way of writing the same view. Let's try it with
&lt;a href="http://www.django-rest-framework.org/api-guide/generic-views/#listapiview"&gt;&lt;strong&gt;ListAPIView&lt;/strong&gt;&lt;/a&gt;.
Edit &lt;strong&gt;catalog/views.py&lt;/strong&gt; again and substitute the code with this one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;generics&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rest_framework.response&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.serializers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ProductList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListAPIView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;serializer_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProductSerializer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With a &lt;strong&gt;ListAPIView&lt;/strong&gt; we are basically creating a read-only API that is
supposed to return a list of items. We need to specify a &lt;strong&gt;queryset&lt;/strong&gt;
and the &lt;strong&gt;serializer_class&lt;/strong&gt; parameters. Once again, you can get up to
this point, checking out the related git tag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout tutorial-1.2
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Creating Initial Data&lt;/h3&gt;
&lt;p&gt;An API that doesn't return any data is not very useful, right? Also, at
the moment we haven't implemented yet any feature that let us insert any
data. That's why I've created a data migration for you that will insert
some data for you. You may notice that the example data contains some
Italian products... out of the scope of this tutorial, I strongly advise
you to google this products and if you ever happen to visit Italy, try
them. You won't regret!&lt;/p&gt;
&lt;p&gt;Going back to our data migration, you first have to create an empty one
with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./manage.py makemigrations --empty catalog
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then open the file that has been created under
&lt;strong&gt;catalog/migrations/&lt;/strong&gt; named &lt;strong&gt;0002_.....&lt;/strong&gt; (your name will be
different from mine, so just edit the one starting with 0002 and you
will be fine) and fill it with this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;migrations&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_initial_products&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;schema_editor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;Product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;catalog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Product&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Salame&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Salame Toscano&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Olio Balsamico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Olio balsamico di Modena&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Parmigiano&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Parmigiano Reggiano&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;8.50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Olio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Olio Oliva Toscano&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Porchetta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Porchetta toscana cotta a legna&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;7.50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cantucci&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cantucci di Prato&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Vino Rosso&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Vino Rosso del Chianti&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;9.50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Brigidini&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Brigidini di Lamporecchio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;3.50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Migration&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;catalog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0001_initial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;migrations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RunPython&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;create_initial_products&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to apply the migration we just created, just do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./manage.py migrate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you try to test the API again from the command line, you will get
these products back:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ http http://127.0.0.1:8000/products/
HTTP/1.0 &lt;span class="m"&gt;200&lt;/span&gt; OK
Allow: GET, HEAD, OPTIONS
Content-Type: application/json
Date: Wed, &lt;span class="m"&gt;28&lt;/span&gt; Sep &lt;span class="m"&gt;2016&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;:29:36 GMT
Server: WSGIServer/0.1 Python/2.7.11
Vary: Accept, Cookie
X-Frame-Options: SAMEORIGIN

&lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Salame Toscano&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Salame&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;12.00&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Olio balsamico di Modena&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Olio Balsamico&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;10.00&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Parmigiano Reggiano&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Parmigiano&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;8.50&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Olio Oliva Toscano&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Olio&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;13.00&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Porchetta toscana cotta a legna&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Porchetta&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;7.50&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Cantucci di Prato&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Cantucci&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;4.00&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Vino Rosso del Chianti&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Vino Rosso&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;9.50&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;,
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Brigidini di Lamporecchio&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;Brigidini&amp;quot;&lt;/span&gt;,
        &lt;span class="s2"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;3.50&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, you can get up to this point with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git checkout tutorial-1.3
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;One more thing...&lt;/h3&gt;
&lt;p&gt;No, we are not going to present a new amazing device, I'm sorry, but I
want to show you a nice Django Rest Framework feature you can have
without much additional work. Edit &lt;strong&gt;settings.py&lt;/strong&gt; and add
&lt;strong&gt;rest_framework&lt;/strong&gt; to the list of &lt;strong&gt;INSTALLED_APPS&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;rest_framework&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;catalog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, if you are still running the Django app, try to visit this url from
your browser: &lt;a href="http://127.0.0.1:8000/products/"&gt;http://127.0.0.1:8000/products/&lt;/a&gt;&lt;br&gt;
That's very nice, isn't it? You can have browsable APIs at no cost.&lt;/p&gt;
&lt;h3&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;I've mentioned at the beginning that this is just the first part of my
API tutorial. In the &lt;a href="https://www.andreagrandi.it/2016/10/01/creating-a-production-ready-api-with-python-and-django-rest-framework-part-2/"&gt;next
part&lt;/a&gt;
I will show you how to let the consumer of your API add some products
and leave reviews (we will introduce a new model for this). Also, we
will see how to set proper permissions to these new API methods so that
only admin users will be able to add products while normal users will be
able to add reviews. So, if you feel ready, you can begin to follow the
&lt;a href="https://www.andreagrandi.it/2016/10/01/creating-a-production-ready-api-with-python-and-django-rest-framework-part-2/"&gt;second part of this tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;Some parts of this tutorial and a few examples have been taken directly
from the original &lt;a href="http://www.django-rest-framework.org/tutorial/quickstart/"&gt;Django Rest Framework
tutorial&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Wed, 28 Sep 2016 13:47:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2016-09-28:/2016/09/28/creating-production-ready-api-python-django-rest-framework-part-1/</guid><category>Development</category><category>API</category><category>Django</category><category>framework</category><category>Python</category><category>rest</category><category>tutorial</category></item><item><title>Using Python ipdb from Jupyter</title><link>https://www.andreagrandi.it/2016/05/10/using-python-ipdb-from-jupyter/</link><description>&lt;p&gt;If we try to use the usual ipdb commands from a Jupyter (IPython
notebook)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ipdb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we will get a similar error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;--------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="n"&gt;MultipleInstanceError&lt;/span&gt;                     &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ipython&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f2b356251c56&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="o"&gt;----&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ipdb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nnn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;anaconda&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="c1"&gt;# You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/.&lt;/span&gt;
    &lt;span class="mi"&gt;15&lt;/span&gt; 
&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ipdb.__main__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post_mortem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;runcall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;runeval&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;launch_ipdb_on_exception&lt;/span&gt;
    &lt;span class="mi"&gt;17&lt;/span&gt; 
    &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;                       &lt;span class="c1"&gt;# please pyflakes&lt;/span&gt;

&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nnn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;anaconda&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ipdb&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="mi"&gt;71&lt;/span&gt;         &lt;span class="c1"&gt;# the instance method will create a new one without loading the config.&lt;/span&gt;
    &lt;span class="mi"&gt;72&lt;/span&gt;         &lt;span class="c1"&gt;# i.e: if we are in an embed instance we do not want to load the config.&lt;/span&gt;
&lt;span class="o"&gt;---&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;73&lt;/span&gt;         &lt;span class="n"&gt;ipapp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TerminalIPythonApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="mi"&gt;74&lt;/span&gt;         &lt;span class="n"&gt;shell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_ipython&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="mi"&gt;75&lt;/span&gt;         &lt;span class="n"&gt;def_colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;

&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nnn&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;anaconda&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.7&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;traitlets&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;configurable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyc&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="mi"&gt;413&lt;/span&gt;             &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;MultipleInstanceError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mi"&gt;414&lt;/span&gt;                 &lt;span class="s1"&gt;&amp;#39;Multiple incompatible subclass instances of &amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;--&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;415&lt;/span&gt;                 &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; are being created.&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;
    &lt;span class="mi"&gt;416&lt;/span&gt;             &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="mi"&gt;417&lt;/span&gt;

&lt;span class="n"&gt;MultipleInstanceError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Multiple&lt;/span&gt; &lt;span class="n"&gt;incompatible&lt;/span&gt; &lt;span class="n"&gt;subclass&lt;/span&gt; &lt;span class="n"&gt;instances&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;TerminalIPythonApp&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The solution is to use Tracer instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.core.debugger&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Tracer&lt;/span&gt;
&lt;span class="n"&gt;Tracer&lt;/span&gt;&lt;span class="p"&gt;()()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Source:&lt;/strong&gt; &lt;a href="http://stackoverflow.com/questions/35613249/using-ipdb-to-debug-python-code-in-one-cell-jupyter-or-ipython"&gt;http://stackoverflow.com/questions/35613249/using-ipdb-to-debug-python-code-in-one-cell-jupyter-or-ipython&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Tue, 10 May 2016 10:13:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2016-05-10:/2016/05/10/using-python-ipdb-from-jupyter/</guid><category>Development</category><category>debugging</category><category>ipdb</category><category>Python</category></item><item><title>How to publish a Python package to PyPI</title><link>https://www.andreagrandi.it/2016/04/10/how-to-publish-a-python-package-to-pypi/</link><description>&lt;p&gt;&lt;strong&gt;PyPI&lt;/strong&gt; is the &lt;strong&gt;Python Package Index&lt;/strong&gt;, that archive that let you
install a package using pip, for example: &lt;strong&gt;pip install Flask&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the past days I started writing a &lt;strong&gt;Python API client&lt;/strong&gt; for
&lt;strong&gt;&lt;a href="https://www.toshl.com"&gt;Toshl&lt;/a&gt;&lt;/strong&gt; expense manager and I decided to
publish the library on PyPI. You can have a look at my library
here &lt;a href="https://github.com/andreagrandi/toshl-python"&gt;https://github.com/andreagrandi/toshl-python&lt;/a&gt; (please note: it's
still in development and &lt;a href="https://developer.toshl.com/"&gt;Toshl API&lt;/a&gt; is
not even public yet) in case you are not sure how to structure it.&lt;/p&gt;
&lt;p&gt;I found a &lt;a href="http://peterdowns.com/posts/first-time-with-pypi.html"&gt;nice
guide&lt;/a&gt; but it
wasn't complete (for example it didn't say how to sign packages) so I
decided to rewrite it adding more information.&lt;/p&gt;
&lt;h3&gt;Create PyPI accounts&lt;/h3&gt;
&lt;p&gt;To publish packages on PyPI you need to create two accounts: one for the
&lt;a href="http://pypi.python.org/pypi?%3Aaction=register_form"&gt;production server&lt;/a&gt;
and another one for the &lt;a href="http://testpypi.python.org/pypi?%3Aaction=register_form"&gt;test
server&lt;/a&gt;. When
you register, please specify (if you have one, but I really hope you do)
the &lt;strong&gt;PGP&lt;/strong&gt; id of your public key. Once the accounts are created, you
need to create a file named &lt;strong&gt;.pypirc&lt;/strong&gt; in your \$HOME folder containing
the following configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;distutils&lt;span class="o"&gt;]&lt;/span&gt;
index-servers &lt;span class="o"&gt;=&lt;/span&gt;
pypi
pypitest

&lt;span class="o"&gt;[&lt;/span&gt;pypi&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://pypi.python.org/pypi
&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;your_username
&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;your_password

&lt;span class="o"&gt;[&lt;/span&gt;pypitest&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;repository&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;https://testpypi.python.org/pypi
&lt;span class="nv"&gt;username&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;your_username
&lt;span class="nv"&gt;password&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;your_password
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please substitute &lt;strong&gt;your_username&lt;/strong&gt; and &lt;strong&gt;your_password&lt;/strong&gt; with the
details you sent during the registration.&lt;/p&gt;
&lt;h3&gt;Preparing the package&lt;/h3&gt;
&lt;p&gt;I assume you have structured your library in the proper way and have
included a &lt;strong&gt;setup.py&lt;/strong&gt; with all the configuration (it's not something
specific to PyPI so you should have done it already). If you haven't I
remember you can give a look at my library
here &lt;a href="https://github.com/andreagrandi/toshl-python"&gt;https://github.com/andreagrandi/toshl-python&lt;/a&gt; in particular to the
&lt;strong&gt;setup.py&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;setuptools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;find_packages&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;toshl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.0.3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://github.com/andreagrandi/toshl-python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;download_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://github.com/andreagrandi/toshl-python/tarball/0.0.3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Andrea Grandi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;author_email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.grandi@gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Python client library for Toshl API.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_packages&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tests&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="n"&gt;zip_safe&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;include_package_data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;platforms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;any&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;license&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MIT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;install_requires&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;requests==2.9.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Upload the package to PyPI Test server&lt;/h3&gt;
&lt;p&gt;The first time you upload the package you will need to register it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py register -r pypitest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then you will need to build the package and upload it (please note
I'm using the &lt;strong&gt;--sign&lt;/strong&gt; to sign the package with PGP):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py sdist upload --sign -r pypitest
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Upload the package to PyPI production server&lt;/h3&gt;
&lt;p&gt;Once you have verified that you are able to build and upload the package
to the test server (without getting any errors), you should upload it to
the production server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py register -r pypi
python setup.py sdist upload --sign -r pypi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is everything you need to do if you want to publish a Python
package on PyPI. Happy coding!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sun, 10 Apr 2016 19:05:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2016-04-10:/2016/04/10/how-to-publish-a-python-package-to-pypi/</guid><category>Development</category><category>pip</category><category>pypi</category><category>Python</category></item><item><title>Using a light sensor with BBC micro:bit and MicroPython</title><link>https://www.andreagrandi.it/2016/02/08/using-a-light-sensor-with-bbc-microbit-and-micropython/</link><description>&lt;p&gt;A &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Photoresistor"&gt;light sensor&lt;/a&gt;&lt;/strong&gt; is a
small component with a particular characteristic: it is basically a
resistor and its resistance decreases if the light is more intense. To
use it with micro:bit we need to use one of the &lt;strong&gt;analogic ports&lt;/strong&gt;. To
build this circuit you will need a &lt;strong&gt;breadboard&lt;/strong&gt;, &lt;strong&gt;3 jumper wires&lt;/strong&gt;, a
&lt;strong&gt;10k resistance&lt;/strong&gt; and possibly a &lt;strong&gt;&lt;a href="https://www.kitronik.co.uk/5609-prototyping-system-for-the-bbc-microbit.html"&gt;Kitronik breadboard
kit&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;The project&lt;/h3&gt;
&lt;p&gt;I wanted to realise a simple project where, depending on the light
intensity captured by the light sensor, the &lt;strong&gt;micro:bit&lt;/strong&gt; shows an image
of the &lt;strong&gt;Sun&lt;/strong&gt; if the light is intense and an image of the &lt;strong&gt;Moon&lt;/strong&gt; if
the light is less intense.&lt;/p&gt;
&lt;p&gt;Here is the complete &lt;strong&gt;circuit scheme&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/images/2016/02/microbit_breadboard_schema_light.png"&gt;&lt;img alt="microbit_breadboard_schema_light" src="https://www.andreagrandi.it/images/2016/02/microbit_breadboard_schema_light.png" width="40%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;"Image Copyright © Kitronik"&lt;/h6&gt;
&lt;p&gt;and here is a picture of the &lt;strong&gt;finished project&lt;/strong&gt; I created:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/images/2016/02/microbit_breadboard_example_2.jpg"&gt;&lt;img alt="microbit_breadboard_example_2" src="https://www.andreagrandi.it/images/2016/02/microbit_breadboard_example_2.jpg" width="40%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;source code&lt;/strong&gt; I needed is available here:&lt;/p&gt;
&lt;p&gt;
&lt;script src="https://gist.github.com/andreagrandi/99a09be27c9626b1119d.js"&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;and as a demo I realised this small &lt;strong&gt;video&lt;/strong&gt;:&lt;/p&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/6vLE_AQc4Bc" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Mon, 08 Feb 2016 22:49:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2016-02-08:/2016/02/08/using-a-light-sensor-with-bbc-microbit-and-micropython/</guid><category>Development</category><category>bbc</category><category>breadboard</category><category>embedded</category><category>microbit</category><category>micropython</category><category>howto</category><category>python</category></item><item><title>Prototyping BBC micro:bit projects with Kitronik breadboard kit</title><link>https://www.andreagrandi.it/2016/02/07/prototyping-bbc-microbit-projects-with-kitronik-breadboard-kit/</link><description>&lt;p&gt;&lt;strong&gt;BBC micro:bit&lt;/strong&gt; has a few &lt;a href="http://microbit-micropython.readthedocs.org/en/latest/pin.html"&gt;IO
pins&lt;/a&gt;
that can be used to interact with external devices. The problem with the
board is that it's not easy to connect the classic jumper wires (those
that we normally connect to a breadboard) to the &lt;strong&gt;micro:bit&lt;/strong&gt;, unless
using a &lt;a href="https://en.wikipedia.org/wiki/Crocodile_clip"&gt;crocodile clip&lt;/a&gt;
and being limited to just 3 pins.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.kitronik.co.uk/5609-prototyping-system-for-the-bbc-microbit.html"&gt;&lt;strong&gt;Kitronik breadboard
kit&lt;/strong&gt;&lt;/a&gt;
solves this problem, offering an interface where the micro:bit can be
plugged and all the pins are easily connectable to the breadboard using
normal &lt;a href="https://www.adafruit.com/products/826"&gt;male/female jumper wires&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've built a very simple circuit following an example you can find on
this manual &lt;a href="https://www.kitronik.co.uk/pdf/5603_inventors_kit_for_the_bbc_microbit_tutorial_book.pdf"&gt;https://www.kitronik.co.uk/pdf/5603_inventors_kit_for_the_bbc_microbit_tutorial_book.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/images/2016/02/microbit_breadboard_example_1.jpg"&gt;&lt;img alt="microbit_breadboard_example_1" src="https://www.andreagrandi.it/images/2016/02/microbit_breadboard_example_1.jpg" width="40%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To build the circuit you also need &lt;strong&gt;4 male/female jumper wires&lt;/strong&gt; and
&lt;strong&gt;two buttons&lt;/strong&gt;. All this circuit does is to connect the buttons to the
&lt;strong&gt;micro:bit&lt;/strong&gt; pins that relate to those buttons. Basically pressing
those buttons is the same as pressing &lt;strong&gt;button A&lt;/strong&gt; or &lt;strong&gt;button B&lt;/strong&gt; on
the &lt;strong&gt;micro:bit&lt;/strong&gt; board. Here you can see the schema in detail:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/images/2016/02/Screenshot-2016-02-07-14.30.36.png"&gt;&lt;img alt="Screenshot 2016-02-0714.30.36" src="https://www.andreagrandi.it/images/2016/02/Screenshot-2016-02-07-14.30.36.png" width="40%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h6 id="image-copyright-kitronik" style="text-align: center;"&gt;"Image Copyright © Kitronik"&lt;/h6&gt;
&lt;p&gt;I've also made a short &lt;strong&gt;video&lt;/strong&gt; so that you can see it in action:&lt;/p&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/0Zfa1sBP7yI" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;

&lt;p&gt;And of course the &lt;strong&gt;source code&lt;/strong&gt; is available too:&lt;/p&gt;
&lt;p&gt;
&lt;script src="https://gist.github.com/andreagrandi/9f66f6806d0ce577bada.js"&gt;&lt;/script&gt;
&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sun, 07 Feb 2016 21:47:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2016-02-07:/2016/02/07/prototyping-bbc-microbit-projects-with-kitronik-breadboard-kit/</guid><category>Development</category><category>bbc</category><category>embedded</category><category>microbit</category><category>micropython</category><category>python</category></item><item><title>Using BBC MicroBit accelerometer with Python</title><link>https://www.andreagrandi.it/2016/01/26/using-bbc-microbit-accelerometer-with-python/</link><description>&lt;p&gt;In these days I'm having a bit of fun with &lt;strong&gt;&lt;a href="https://www.microbit.co.uk/"&gt;BBC
MicroBit&lt;/a&gt;&lt;/strong&gt; board and I'm learning how to
use the different sensors available. The latest one I wanted to try was
the accelerometer. The board can "sense" if you are moving it in any of
the 3 dimensional axes: X, Y, Z. According to the
&lt;a href="https://microbit-micropython.readthedocs.org/en/latest/accelerometer.html"&gt;documentation&lt;/a&gt;
there are four methods available that can be used to get these
values: &lt;code&gt;microbit.accelerometer.get_values()&lt;/code&gt; will return you a tuple with all the 3 values, 
while  &lt;code&gt;microbit.accelerometer.get_x()&lt;/code&gt;, &lt;code&gt;microbit.accelerometer.get_y()&lt;/code&gt;, &lt;code&gt;microbit.accelerometer.get_z()&lt;/code&gt;
will give you the single values.&lt;/p&gt;
&lt;p&gt;The documentation on the official website doesn't explain much and for
example I didn't even know what was the range of the values I can get
back from these methods (by the way it's &lt;strong&gt;between -1024&lt;/strong&gt; and
&lt;strong&gt;1024&lt;/strong&gt;), so I decided to play with the code directly and write a very
simple example. The small example I wrote, shows a smile on the board
display if you keep it straight and shows a sad face if you bend it.&lt;/p&gt;
&lt;p&gt;This is the result:&lt;/p&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/LX8fYBsOxA0" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;

&lt;p&gt;and this is all the needed code of the application:&lt;/p&gt;
&lt;p&gt;
&lt;script src="https://gist.github.com/andreagrandi/f4a7c8ee8597dde3070d.js"&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;p&gt;In the next days I will try to play with more sensors and to publish
other examples.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Tue, 26 Jan 2016 22:41:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2016-01-26:/2016/01/26/using-bbc-microbit-accelerometer-with-python/</guid><category>Development</category><category>bbc</category><category>microbit</category><category>Python</category><category>howto</category></item><item><title>Using Python PyPy in a virtual environment</title><link>https://www.andreagrandi.it/2015/12/18/using-python-pypy-in-a-virtual-environment/</link><description>&lt;p&gt;Sometimes we need to test if our code also works with
&lt;strong&gt;&lt;a href="http://pypy.org/"&gt;PyPy&lt;/a&gt;&lt;/strong&gt; implementation of &lt;strong&gt;Python&lt;/strong&gt;. Assuming you
have already installed it in your system, first find out where it is
installed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;which pypy
/usr/local/bin/pypy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then you need &lt;strong&gt;mkvirtualenv&lt;/strong&gt; to create a virtual environment that will
use this runtime:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkvirtualenv -p /usr/local/bin/pypy pypy-test
Running virtualenv with interpreter /usr/local/bin/pypy
New pypy executable &lt;span class="k"&gt;in&lt;/span&gt; pypy-test/bin/pypy
Installing setuptools, pip, wheel...done.
&lt;span class="o"&gt;(&lt;/span&gt;pypy-test&lt;span class="o"&gt;)&lt;/span&gt;➜  ~  python
Python &lt;span class="m"&gt;2&lt;/span&gt;.7.10 &lt;span class="o"&gt;(&lt;/span&gt;f3ad1e1e1d6215e20d34bb65ab85ff9188c9f559, Sep &lt;span class="m"&gt;01&lt;/span&gt; &lt;span class="m"&gt;2015&lt;/span&gt;, &lt;span class="m"&gt;06&lt;/span&gt;:26:30&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;PyPy &lt;span class="m"&gt;2&lt;/span&gt;.6.1 with GCC &lt;span class="m"&gt;4&lt;/span&gt;.2.1 Compatible Apple LLVM &lt;span class="m"&gt;6&lt;/span&gt;.1.0 &lt;span class="o"&gt;(&lt;/span&gt;clang-602.0.53&lt;span class="o"&gt;)]&lt;/span&gt; on darwin
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it! You can now use this virtual environment to run your Python
application using PyPy environment.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Fri, 18 Dec 2015 17:29:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2015-12-18:/2015/12/18/using-python-pypy-in-a-virtual-environment/</guid><category>HowTo, Python</category><category>pypy</category><category>Python</category></item><item><title>Reversing a List in Python</title><link>https://www.andreagrandi.it/2015/10/11/reversing-a-list-in-python/</link><description>&lt;p&gt;Sometimes we need to reverse the order of the elements in a Python list.
While there can be many different ways of implementing this task, I
found three in particular that I appreciate for different reasons. Let's
define first a list of integers that we will reverse later.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;List slicing&lt;/h3&gt;
&lt;p&gt;This method can be a bit obscure at first read, but basically it slices
the whole list proceding in the reverse order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[::&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Reversed method&lt;/h3&gt;
&lt;p&gt;We use the
&lt;strong&gt;&lt;a href="https://docs.python.org/2/library/functions.html#reversed"&gt;reversed&lt;/a&gt;&lt;/strong&gt; method
that returns an iterable object and a list comprehension to generate the
new list&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Swapping values in place&lt;/h3&gt;
&lt;p&gt;This last method is more verbose and it basically divides the list in
two parts and swaps the first with sixth, the second with fifth, etc...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sun, 11 Oct 2015 22:14:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2015-10-11:/2015/10/11/reversing-a-list-in-python/</guid><category>Development</category><category>lists</category><category>Python</category><category>reversed</category></item><item><title>Understanding Python decorators optimizing a recursive Fibonacci implementation</title><link>https://www.andreagrandi.it/2015/08/31/understanding-python-decorators-optimizing-a-recursive-fibonacci-implementation/</link><description>&lt;p&gt;A &lt;strong&gt;decorator&lt;/strong&gt; is a Python function that takes a &lt;em&gt;function object&lt;/em&gt; as
an argument and returns a function as a &lt;em&gt;value&lt;/em&gt;. Here is an example of
decorator definition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# make a new function&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;new_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;# some code&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;new_function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To apply a decorator to an existing function, you just need to put
&lt;strong&gt;@*decorator_name&lt;/strong&gt;* in the line before its definition, like this
example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@foo&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This decorator doesn't do anything, so let's think about a more concrete
problem we could solve using decorators.&lt;/p&gt;
&lt;h2&gt;Fibonacci sequence&lt;/h2&gt;
&lt;p&gt;By definition, the first two numbers in the
&lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Fibonacci_number"&gt;Fibonacci&lt;/a&gt;&lt;/strong&gt; sequence
are either 1 and 1 or 0 and 1. All the other numbers are the sum of the
previous two numbers of the sequence. Example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;0, 1: the third number is 1&lt;/li&gt;
&lt;li&gt;0, 1, 1: the fourth number is 2&lt;/li&gt;
&lt;li&gt;0, 1, 1, 2: the fifth number is 3&lt;/li&gt;
&lt;li&gt;0, 1, 1, 2, 3: the sixth number is 5&lt;/li&gt;
&lt;li&gt;etc...&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we wanted to give a &lt;strong&gt;math definition&lt;/strong&gt; of the sequence, we could
describe it in this way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;F(0): 0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F(1): 1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F(n): F(n-1) + F(n-2)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In &lt;strong&gt;Python&lt;/strong&gt; we could have a &lt;strong&gt;recursive function&lt;/strong&gt; like the following
one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What's the problem with this implementation? The code works as expected,
but it's very &lt;strong&gt;inefficient&lt;/strong&gt;. The next picture will explain what
happens when we will try, for example, to calculate the 5th number of
the sequence:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/images/2015/08/fibo.png"&gt;&lt;img alt="fibo" src="https://www.andreagrandi.it/images/2015/08/fibo.png" width="60%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fib(5) is Fib(4) + Fib(3), but Fib(4) itself is Fib(3) + Fib(2), and...
the picture just tell us that we have calculated Fib(3) 2 times, Fib(2)
3 times, Fib(1) 5 times! Why are we repeating the same operation every
time if we already calculated the result?&lt;/p&gt;
&lt;h2&gt;Memoization&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In computing, &lt;strong&gt;memoization&lt;/strong&gt; is an optimization technique used
primarily to speed up computer programs by storing the results of
expensive function calls and returning the cached result when the same
inputs occur again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We need to store values of the sequence we have already calculated and
get them later when we need them. Let's implement a simple memoization
decorator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;memoize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorated_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorated_function&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The decorator defines a dict at the beginning that is used as a cache.
When we want to find the n number of the sequence, it first checks if
the value was already calculated and that value is returned instead of
being calculated again. If the value is not found, then the original
function is being called and then the value is store in the cache, then
returned to the caller.&lt;/p&gt;
&lt;h2&gt;Using the memoize decorator&lt;/h2&gt;
&lt;p&gt;How much this decorator can speed up our fib method? Let's try to
benchmark the execution using Python
&lt;strong&gt;&lt;a href="https://docs.python.org/2/library/timeit.html"&gt;timeit&lt;/a&gt;&lt;/strong&gt; module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# First example, not using the memoize decorator&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;timeit&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fib(35)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;from __main__ import fib&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The required time to calculate the 35th number of the Fibonacci sequence
on my laptop is: &lt;strong&gt;4.73480010033&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Second example, using the memoize decorator&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;timeit&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;memoize&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;memoize&lt;/span&gt;  &lt;span class="c1"&gt;# For convenience I put my decorator&lt;/span&gt;
                            &lt;span class="c1"&gt;# in a module named memoize.py&lt;/span&gt;

&lt;span class="nd"&gt;@memoize&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Timer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fib(35)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;from __main__ import fib&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The required time to calculate the 35th number of the Fibonacci sequence
on my laptop is: &lt;strong&gt;0.000133037567139&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Quite faster, don't you think? I will let you try how long does it take
to calculate the 60th number of the sequence with and without using the
decorator. &lt;strong&gt;Hint:&lt;/strong&gt; grab a cup of coffee before beginning!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Mon, 31 Aug 2015 19:32:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2015-08-31:/2015/08/31/understanding-python-decorators-optimizing-a-recursive-fibonacci-implementation/</guid><category>Programmazione, Python</category><category>decorators</category><category>fibonacci</category><category>memoization</category><category>memoize</category><category>optimization</category><category>Python</category></item><item><title>Django Notes: read values from settings in a safe way</title><link>https://www.andreagrandi.it/2015/08/29/django-notes-read-values-from-settings-in-a-safe-way/</link><description>&lt;p&gt;Working on &lt;strong&gt;Django&lt;/strong&gt; projects I find very often that many developers
access the values that are defined in &lt;strong&gt;settings&lt;/strong&gt; in this way&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="n"&gt;my_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MY_SETTING&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What happens if &lt;code&gt;MY_SETTING&lt;/code&gt; has not been defined in &lt;strong&gt;settings.py&lt;/strong&gt;?
The code will raise an error and crash, of course. How can we make the
code more reliable? We could &lt;em&gt;try/except&lt;/em&gt; the code block that tries to
read the value and maybe set a value if we get an exception, but this
would not be a clean way to do this job.&lt;/p&gt;
&lt;p&gt;A cleaner way to do it is to use &lt;strong&gt;getattr&lt;/strong&gt; in this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="n"&gt;my_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;MY_SETTING&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my-default-value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;getattr&lt;/strong&gt; will try to read &lt;code&gt;MY_SETTING&lt;/code&gt; value from &lt;strong&gt;settings.py&lt;/strong&gt;,
if the value doesn't exist &lt;code&gt;my_value&lt;/code&gt; will be assigned with
&lt;code&gt;'my-default-value'&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sat, 29 Aug 2015 15:50:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2015-08-29:/2015/08/29/django-notes-read-values-from-settings-in-a-safe-way/</guid><category>Django, HowTo, Programmazione, Python</category><category>Django</category><category>getattr</category><category>Python</category><category>settings</category></item><item><title>How to write a custom Django Middleware</title><link>https://www.andreagrandi.it/2015/08/23/how-to-write-a-custom-django-middleware/</link><description>&lt;p&gt;To understand how a &lt;strong&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/topics/http/middleware/"&gt;Django
Middleware&lt;/a&gt;&lt;/strong&gt;
works we need to remember that the basic architecture of Django is
composed by a &lt;strong&gt;request&lt;/strong&gt; and a &lt;strong&gt;response&lt;/strong&gt;. A middleware is something
that stays in the middle. Let's give a look to the next diagram, taken
from official Django documentation:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/images/2015/08/middleware.png"&gt;&lt;img alt="middleware" src="https://www.andreagrandi.it/images/2015/08/middleware.png" width="100%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Important things to know&lt;/h2&gt;
&lt;p&gt;There are four important things to know about middlewares:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You need to write a class that just inherit from &lt;strong&gt;&lt;em&gt;object&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;order&lt;/strong&gt; where you place your middleware in &lt;strong&gt;settings.py&lt;/strong&gt; is
important: middlewares are processed from top to bottom during a
request and from bottom to top during a response.&lt;/li&gt;
&lt;li&gt;You don't need to implement all the available methods of a
middleware. For example you can just implement &lt;code&gt;process_request&lt;/code&gt;
and &lt;code&gt;process_template_response&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If you implement &lt;code&gt;process_request&lt;/code&gt; and you decide to return an
&lt;code&gt;HttpResponse&lt;/code&gt;, all the other middlewares, views etc... will be
ignored and only your response will be returned&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Writing a middleware&lt;/h2&gt;
&lt;p&gt;In my example I wanted to implement a feature that saves the time when a
request is made and the time when a request has been processed, then
calculates the time delta and exposes this value in the context so that
is accessible from our templates. How to implement a similar feature
using a middleware? Here is my example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BenchmarkMiddleware&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_request_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process_template_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_request_time&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;response_time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please don't care about how I calculated the time. I'm aware that there
are better ways to do it, but I just wanted to keep it simple and show
how to implement a simple middleware.&lt;/p&gt;
&lt;p&gt;If you want to see a &lt;strong&gt;complete example&lt;/strong&gt; of a project that includes and
uses this middleware, here you can find the complete source
code: &lt;a href="https://github.com/andreagrandi/benchmark-middleware-example"&gt;https://github.com/andreagrandi/benchmark-middleware-example&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.8/topics/http/middleware/"&gt;https://docs.djangoproject.com/en/1.8/topics/http/middleware/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://agiliq.com/blog/2015/07/understanding-django-middlewares/"&gt;http://agiliq.com/blog/2015/07/understanding-django-middlewares/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.runnable.com/UrSGolK00ygpAAAQ/creating-a-custom-middleware-for-python-and-django"&gt;http://code.runnable.com/UrSGolK00ygpAAAQ/creating-a-custom-middleware-for-python-and-django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sun, 23 Aug 2015 21:46:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2015-08-23:/2015/08/23/how-to-write-a-custom-django-middleware/</guid><category>Development</category><category>Django</category><category>HowTo</category><category>middleware</category><category>Python</category><category>tutorial</category></item><item><title>Soma.fm + Spotify + import.io + Python mashup: automatically create a Spotify playlist with Soma.fm tracks</title><link>https://www.andreagrandi.it/2015/07/12/soma-fm-spotify-import-io-python-mashup/</link><description>&lt;p&gt;I'm a big fan of &lt;a href="http://somafm.com"&gt;Soma.fm&lt;/a&gt; (a 25+ channels streaming
radio based in San Francisco) and during the years I've been writing
clients for this radio for different mobile platforms (Maemo, MeeGo,
Harmattan, Windows Phone, BlackBerry 10, Jolla). I love in particular
their "&lt;a href="http://somafm.com/indiepop/"&gt;&lt;strong&gt;Indie Pop Rock&lt;/strong&gt;&lt;/a&gt;" channel that
during these years made me discover some very good artists.&lt;/p&gt;
&lt;p&gt;When &lt;strong&gt;Spotify&lt;/strong&gt; finally was available in Italy (I'm still using it
right now that I live in the UK), something that I always missed was a
radio with the same good music. Why not just listening to Soma.fm?
Because I like to listen to the music while I commute and in the London
Underground it's nearly impossible to have signal.&lt;/p&gt;
&lt;p&gt;So I was thinking: it would be nice to have &lt;strong&gt;a Spotify playlist with
Soma.fm tracks&lt;/strong&gt;. Wait a moment.... &lt;strong&gt;I can do it!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.andreagrandi.it/images/2015/07/Frankenstein_Jr_Mel_Brooks_1974.jpg"&gt;&lt;img alt="Frankenstein_Jr_Mel_Brooks_1974" src="https://www.andreagrandi.it/images/2015/07/Frankenstein_Jr_Mel_Brooks_1974.jpg" width="60%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Soma.fm publishes the tracks history with all the tracks streamed during
the last hour &lt;a href="http://somafm.com/indiepop/songhistory.html"&gt;http://somafm.com/indiepop/songhistory.html&lt;/a&gt; so I just
needed something to parse this list for me and return me a well
formatted version.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://import.io"&gt;&lt;strong&gt;import.io&lt;/strong&gt;&lt;/a&gt; (it's a service that takes
a web page as input, parse the data and generates a RESTful API to
access this data) I was able to easily get the data I needed. At this
point I only needed to be able to loop through the list, search each
track on Spotify and add it to my playlist.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;source code is fully available&lt;/strong&gt; here
&lt;a href="https://github.com/andreagrandi/spotisoma"&gt;https://github.com/andreagrandi/spotisoma&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you can't just get the code and run it. You will need to get
your own &lt;strong&gt;import.io api key&lt;/strong&gt;, generate your import.io api url, get a
&lt;a href="https://developer.spotify.com/technologies/libspotify/keys/"&gt;&lt;strong&gt;Spotify application
key&lt;/strong&gt;&lt;/a&gt; (the
old/deprecated one, since it was nearly impossible for me to use oauth
in a simple Python script due to the fact I didn't have an endpoint to
receive the token back. You can get more informations here:
&lt;a href="https://pyspotify.mopidy.com/en/latest/quickstart/#application-keys"&gt;https://pyspotify.mopidy.com/en/latest/quickstart/#application-keys&lt;/a&gt;)
and set your env variables with your Spotify username and password. Last
but not least: the &lt;strong&gt;old Spotify library&lt;/strong&gt; only works with &lt;strong&gt;Premium&lt;/strong&gt;
accounts.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sun, 12 Jul 2015 10:10:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2015-07-12:/2015/07/12/soma-fm-spotify-import-io-python-mashup/</guid><category>Python</category><category>import.io</category><category>music</category><category>Python</category><category>soma.fm</category><category>spotify</category></item><item><title>Automatically pull updated Docker images and restart containers with docker-puller</title><link>https://www.andreagrandi.it/2014/10/25/automatically-pull-updated-docker-images-and-restart-containers-with-docker-puller/</link><description>&lt;p&gt;If you use &lt;a href="https://docker.io"&gt;docker.io&lt;/a&gt; (or any similar service) to
build your &lt;strong&gt;Docker&lt;/strong&gt; containers, it may be possible that, once the new
image is generated, you want your Docker host to automatically pull it
and restart the container.&lt;/p&gt;
&lt;p&gt;Docker.io gives you the possibility to set a &lt;strong&gt;web hook&lt;/strong&gt; after a
successful build. Basically it does a POST on a defined URL and send
some informations in JSON format.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/glowdigitalmedia/docker-puller"&gt;docker-puller&lt;/a&gt;
listens to these web hooks and can be configured to run a particular
script, given a specific hook. It's a very simple service I wrote using
Python/Flask. It's also my first Flask application, so if you want to
improve it, feel free to send me a pull request on GitHub.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this is not the only existing service that is able to do this
task. I took inspiration from this
article &lt;a href="http://nathanleclaire.com/blog/2014/08/17/automagical-deploys-from-docker-hub/"&gt;http://nathanleclaire.com/blog/2014/08/17/automagical-deploys-from-docker-hub/&lt;/a&gt;
and I really tried to
customize &lt;a href="https://github.com/cpuguy83/dockerhub-webhook-listener"&gt;https://github.com/cpuguy83/dockerhub-webhook-listener&lt;/a&gt; for
my own needs, but the problem is that &lt;strong&gt;dockerhub-webhook-listener&lt;/strong&gt; is
not ready to be used as is (you have to customize it) and I'm not very
good with &lt;strong&gt;Golang&lt;/strong&gt; (yet) to be able to do it in little time. This is
why I rewrote the service in Python (that is my daily language). I want
to thank &lt;a href="https://github.com/cpuguy83"&gt;Brian Goff&lt;/a&gt; for the idea and all
the people in &lt;strong&gt;#docker @ FreeNode&lt;/strong&gt; for the support.&lt;/p&gt;
&lt;h2&gt;How to use docker-puller&lt;/h2&gt;
&lt;p&gt;Setting up the service should be quite easy. After you clone the
repository from https://github.com/glowdigitalmedia/docker-puller there
is a &lt;strong&gt;config.json&lt;/strong&gt; file where you define the &lt;strong&gt;host&lt;/strong&gt;, &lt;strong&gt;port&lt;/strong&gt;, a
&lt;strong&gt;token&lt;/strong&gt; and a list of &lt;strong&gt;hooks&lt;/strong&gt; you want to react to. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abc123&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;hooks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;scripts/hello.sh&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a &lt;strong&gt;bash script&lt;/strong&gt; (in this case it was called hello.sh) and put
it under script folder and write the instructions to be executed to pull
the new image and restart the container (example):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker pull andreagrandi/test:latest
docker stop &lt;span class="nb"&gt;test&lt;/span&gt;
docker rm &lt;span class="nb"&gt;test&lt;/span&gt;
docker run --name &lt;span class="nb"&gt;test&lt;/span&gt; -d -p &lt;span class="m"&gt;8000&lt;/span&gt;:80 andreagrandi/test:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once configured, I suggest you to setup a &lt;strong&gt;Nginx&lt;/strong&gt; entry (instructions
not covered here) that for example redirect
&lt;strong&gt;yourhost.com/dockerpuller&lt;/strong&gt; to &lt;strong&gt;localhost:8000&lt;/strong&gt; (I would advise to
enable SSL too, or people could be able to sniff your token). The
service can be started with: "&lt;strong&gt;python app.py&lt;/strong&gt;" (or you can setup a
Supervisor script).&lt;/p&gt;
&lt;p&gt;At this point docker-puller is up and running. Go to &lt;strong&gt;docker.io&lt;/strong&gt;
automatic build settings and setup a webhook like this:
&lt;strong&gt;http://yourhost.com/dockerpuller?token=abc123&amp;amp;hook=hello&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Every time docker.io finishes building and pushing your image to the
docker registry, it will &lt;strong&gt;POST&lt;/strong&gt; on that URL. docker-puller will catch
the POST, check for a valid token, get the hook name and will execute
the relative script.&lt;/p&gt;
&lt;p&gt;That's all! I hope this very simple service can be useful to other
people and once again, if you want to improve it, I will be glad to
accept your pull requests on GitHub.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sat, 25 Oct 2014 10:56:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2014-10-25:/2014/10/25/automatically-pull-updated-docker-images-and-restart-containers-with-docker-puller/</guid><category>HowTo</category><category>containers</category><category>docker</category><category>docker.io</category><category>Flask</category><category>Python</category><category>howto</category><category>Linux</category></item><item><title>Using virtualenv to manage multiple Python/Django environments in the same machine</title><link>https://www.andreagrandi.it/2013/04/25/using-virtualenv-to-manage-multiple-pythondjango-environments-in-the-same-machine/</link><description>&lt;p&gt;Developing Python applications sometimes it's useful to be able to test
the code with different environments, for example a particular version
of Python or a specific Django version etc... Setting up many different
virtual machines would be really too much work and even using a chroot
environment is not what you need in some cases. Thanks to
&lt;a href="https://github.com/pypa/virtualenv"&gt;&lt;strong&gt;virtualenv&lt;/strong&gt;&lt;/a&gt; is it possible to
create a self contained Python environment with all the specific
libraries you may need. Using virtualenv is very easy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating the virtual environment: &lt;strong&gt;&lt;code&gt;virtualenvmyenv --no-site-packages&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Entering the virtual environment: &lt;strong&gt;&lt;code&gt;source myenv/bin/activate&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Deactivating the virtual environment: &lt;strong&gt;&lt;code&gt;deactivate&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's it! Once you're inside the virtual environment you will be using
the Python libraries inside it. I suggest you to install all the Python
libraries you need using &lt;a href="https://pypi.python.org/pypi/pip"&gt;&lt;strong&gt;pip&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Thu, 25 Apr 2013 22:58:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2013-04-25:/2013/04/25/using-virtualenv-to-manage-multiple-pythondjango-environments-in-the-same-machine/</guid><category>HowTo, Linux, Programmazione, Python, Ubuntu (EN)</category><category>Django</category><category>Python</category><category>virtualenv</category></item><item><title>Twitter client for Maemo in Qt + Python: call for developers and UI designers</title><link>https://www.andreagrandi.it/2010/02/22/twitter-client-for-maemo-in-qt-python-call-for-developers-and-ui-designers/</link><description>&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;My name's &lt;strong&gt;Andrea Grandi&lt;/strong&gt;, I'm italian and I'm a Maemo
user/lover/contributor since the &lt;strong&gt;Nokia 770&lt;/strong&gt;. I love &lt;strong&gt;Python&lt;/strong&gt; as
development language and few months ago I also gave some contributions
to the &lt;a href="http://pymaemo.garage.maemo.org/"&gt;&lt;strong&gt;PyMaemo&lt;/strong&gt;&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;In these days I had the idea to start writing a &lt;strong&gt;Twitter&lt;/strong&gt; client for
&lt;strong&gt;Maemo&lt;/strong&gt; with a precise direction in my mind. I'll try to explain all
my reasons here. First of all I've to thank the author of
&lt;a href="http://mauku.henrikhedberg.com/"&gt;&lt;strong&gt;Mauku&lt;/strong&gt;&lt;/a&gt; client. I use it since its
first version and I'm quite happy with it. Then, why do I want to write
another one?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Maemo&lt;/strong&gt; (MeeGo) is moving to &lt;strong&gt;Qt&lt;/strong&gt; and for this reason I'm going
    to use Qt, while Mauku uses Gtk.&lt;/li&gt;
&lt;li&gt;I'm learning Qt and what is better than writing a complete (but not
    too complex) application to learn better?&lt;/li&gt;
&lt;li&gt;Mauku is not free as lot of people could think. Reading the source
    codeyou find this "You are NOT allowed to modify or redistribute the
    source code.", while I want to write a client and release it under
    &lt;strong&gt;GPL2&lt;/strong&gt; or &lt;strong&gt;GPL3&lt;/strong&gt; license.&lt;/li&gt;
&lt;li&gt;Mauku is not updated since some months and we have no news about it.&lt;/li&gt;
&lt;li&gt;I love Python and I like to write free software in this language.&lt;/li&gt;
&lt;li&gt;I want to give to Maemo a stronger contribute.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;My request for help&lt;/h2&gt;
&lt;p&gt;Before lot of people start writing their own client resulting in 4-5
twitter clients for Maemo, why don't we join our strength and work to a
common project? I'm not a Python expert nor a Qt one, but I've some
experience as project/team leader and since this is not a complex
project, I would be glad to lead it. So, I'm looking for Python
developers, Qt developers, UI designers and whoever want to contribute
to this project. I still have to find a good name and logo for this
application.&lt;/p&gt;
&lt;p&gt;Who want to help me?&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Mon, 22 Feb 2010 17:16:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2010-02-22:/2010/02/22/twitter-client-for-maemo-in-qt-python-call-for-developers-and-ui-designers/</guid><category>Linux, Maemo (EN), MeeGo, Programmazione, Python, Qt</category><category>maemo</category><category>MeeGo</category><category>N900</category><category>nokia</category><category>Python</category><category>Qt</category><category>twitter</category></item><item><title>Writing Python bindings of existing C libraries – (3) – Building and Installing with distutils</title><link>https://www.andreagrandi.it/2009/08/13/writing-python-bindings-of-existing-c-libraries-building-and-installing-with-distutils/</link><description>&lt;p&gt;In the last post of this series, we saw how to write a simple binding
and we finished to build and install it manually. This is of course not
a good way to manage the building/installation procedure.&lt;/p&gt;
&lt;p&gt;In Python we can use a library called &lt;strong&gt;distutils&lt;/strong&gt; that let us to
automatize the building and installing process. I'll use the &lt;strong&gt;foo&lt;/strong&gt;
source code to create the package, so it will be easier to understand.&lt;/p&gt;
&lt;h2&gt;Using distutils&lt;/h2&gt;
&lt;p&gt;All we have to do is to write a &lt;strong&gt;setup.py&lt;/strong&gt; file similar to this one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;distutils.core&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Extension&lt;/span&gt;

&lt;span class="n"&gt;foomodule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo.c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;This is a package for Foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
    &lt;span class="n"&gt;ext_modules&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;foomodule&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, we have to first import needed modules with: &lt;strong&gt;from
distutils.core import setup, Extension&lt;/strong&gt;&lt;br&gt;
then we create an entry for each module we have (in this case just one,
"foomodule"). We then call the &lt;strong&gt;setup()&lt;/strong&gt; method passing it all the
parameters and our &lt;strong&gt;setup.py&lt;/strong&gt; is complete.&lt;/p&gt;
&lt;h2&gt;Building and installing&lt;/h2&gt;
&lt;p&gt;To test it we can try to build the package in this way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python2.5 setup.py build
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if we want to install the module in our system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python2.5 setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Official Python documentation: &lt;a href="http://docs.python.org/extending/building.html"&gt;http://docs.python.org/extending/building.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Thu, 13 Aug 2009 10:39:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2009-08-13:/2009/08/13/writing-python-bindings-of-existing-c-libraries-building-and-installing-with-distutils/</guid><category>HowTo, Igalia, Linux, Maemo (EN), Programmazione, Python</category><category>binding</category><category>distutils</category><category>library</category><category>maemo</category><category>Python</category><category>setup</category></item><item><title>PyMaemo (Python for Maemo) second beta release for Fremantle</title><link>https://www.andreagrandi.it/2009/08/10/pymaemo-python-for-maemo-second-beta-release-for-fremantle/</link><description>&lt;p&gt;The &lt;strong&gt;PyMaemo&lt;/strong&gt; team is pleased to announce the second beta release of
PyMaemo for &lt;strong&gt;Fremantle&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;This new release is available through the &lt;strong&gt;extras-devel&lt;/strong&gt; repository,
see installation instructions in&lt;br&gt;
&lt;a href="http://pymaemo.garage.maemo.org/sdk_installation.html#fremantle"&gt;http://pymaemo.garage.maemo.org/sdk_installation.html#fremantle&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;What is it?&lt;/h2&gt;
&lt;p&gt;Python for Maemo (PyMaemo for short) main objective is to make possible
to use &lt;strong&gt;Python&lt;/strong&gt; programming language as the scripting and development
language for Maemo Platform, providing a better alternative for fast
prototyping and programming in Maemo environment besides the C
programming language.&lt;/p&gt;
&lt;p&gt;Python is for serious programming and to have fun. Python has a nice
syntax, it is easy to learn and powerful enough for a vast range of
applications, this is why we choose Python for Maemo.&lt;/p&gt;
&lt;h2&gt;What has changed?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;New packages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;python-mafw&lt;/strong&gt; (0.1-1maemo1)&lt;ul&gt;
&lt;li&gt;Python bindings for the Media Application Framework [1]&lt;/li&gt;
&lt;li&gt;Supported API is very basic at the moment, and there are some
    bugs. Feedback is welcome!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;python-hildondesktop&lt;/strong&gt; (0.0.3-1maemo1)&lt;ul&gt;
&lt;li&gt;Python bindings for the home/status widgets API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;python-notify&lt;/strong&gt; (0.1.1-2maemo1)&lt;ul&gt;
&lt;li&gt;Python bindings for libnotify&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pyclutter&lt;/strong&gt; (0.8.0-1maemo2)&lt;ul&gt;
&lt;li&gt;Python bindings for the Clutter API [2]&lt;/li&gt;
&lt;li&gt;Experimental package, waiting for developer feedback&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Updated packages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gnome-python&lt;/strong&gt; (2.26.1-1maemo1)&lt;ul&gt;
&lt;li&gt;major upgrade, matching current Debian testing release;&lt;/li&gt;
&lt;li&gt;feedback on this is welcome, as it replaces a fairly old version
    (2.18).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pygtk&lt;/strong&gt; (2.12.1-6maemo7)&lt;ul&gt;
&lt;li&gt;Enable glade support.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;python2.5&lt;/strong&gt; (2.5.4-1maemo1)&lt;ul&gt;
&lt;li&gt;Updated to latest upstream 2.5.x release.&lt;/li&gt;
&lt;li&gt;add support to --install-layout=deb flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;python-central&lt;/strong&gt; (0.6.11.1maemo1)&lt;ul&gt;
&lt;li&gt;dependency needed by the new python-setuptools version.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;python-defaults&lt;/strong&gt; (2.5.2-3maemo3)&lt;ul&gt;
&lt;li&gt;Change PREVVER in debian/rules, avoiding old python2.5-minimal
    versions that had "/usr/bin/python" and thus conflicts with
    python-minimal.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;python-hildo&lt;/strong&gt;n (0.9.0-1maemo10)&lt;ul&gt;
&lt;li&gt;lots of bug fixes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;python-setuptools&lt;/strong&gt; (0.6c9-1maemo1)&lt;ul&gt;
&lt;li&gt;add support to --install-layout=deb flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Bugs fixed:&lt;/strong&gt; MB#4530 [3], MB#4450 [4], MB#4629 [5], MB#4628 [6],&lt;br&gt;
MB#4647 [7], MB#4632 [8],  MB#4646 [9],  MB#4750 [10], MB#4749 [11],&lt;br&gt;
MB#4791 [12]&lt;/p&gt;
&lt;h2&gt;Known issues&lt;/h2&gt;
&lt;p&gt;MB#4782 [13]: osso.Context causes segmentation fault&lt;br&gt;
MB#4821 [14]: Cannot create HildonTouchSelector with single text column&lt;br&gt;
MB#4824 [15]: python-mafw: source_browsing.py example does not work&lt;br&gt;
MB#4839 [16]: python-mafw: mafw.Registry lacks list_plugins() method&lt;br&gt;
MB#4849 [17]: python-mafw: MafwPluginDescriptorPublic structure is missing&lt;/p&gt;
&lt;p&gt;We will not migrate to python2.6 in fremantle due to a (unresolved) bug
(MB#4734 [18]), where a core SDK package explicitly conflicts with
python &amp;gt;= 2.6, preventing any further upgrades from the 2.5.x series.&lt;/p&gt;
&lt;p&gt;This release is supposed to be compatible with previous releases. If you
have any issues regarding building your Python application on Fremantle,
feel free to report it on the pymaemo-developers mailing list [19].&lt;/p&gt;
&lt;h2&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;Thanks to everybody who helped making this release possible.&lt;/p&gt;
&lt;p&gt;Bug reports, as always, should go to our Bugzilla [20]. Use the
&lt;strong&gt;pymaemo-developers&lt;/strong&gt; mailing list for help, feedback or suggestions.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;[1] &lt;a href="https://garage.maemo.org/projects/mafw/"&gt;https://garage.maemo.org/projects/mafw/&lt;/a&gt;&lt;br&gt;
[2] &lt;a href="http://www.clutter-project.org/"&gt;http://www.clutter-project.org/&lt;/a&gt;&lt;br&gt;
[3] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4530"&gt;https://bugs.maemo.org/show_bug.cgi?id=4530&lt;/a&gt;&lt;br&gt;
[4] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4450"&gt;https://bugs.maemo.org/show_bug.cgi?id=4450&lt;/a&gt;&lt;br&gt;
[5] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4629"&gt;https://bugs.maemo.org/show_bug.cgi?id=4629&lt;/a&gt;&lt;br&gt;
[6] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4628"&gt;https://bugs.maemo.org/show_bug.cgi?id=4628&lt;/a&gt;&lt;br&gt;
[7] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4647"&gt;https://bugs.maemo.org/show_bug.cgi?id=4647&lt;/a&gt;&lt;br&gt;
[8] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4632"&gt;https://bugs.maemo.org/show_bug.cgi?id=4632&lt;/a&gt;&lt;br&gt;
[9] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4646"&gt;https://bugs.maemo.org/show_bug.cgi?id=4646&lt;/a&gt;&lt;br&gt;
[10] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4750"&gt;https://bugs.maemo.org/show_bug.cgi?id=4750&lt;/a&gt;&lt;br&gt;
[11] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4749"&gt;https://bugs.maemo.org/show_bug.cgi?id=4749&lt;/a&gt;&lt;br&gt;
[12] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4791"&gt;https://bugs.maemo.org/show_bug.cgi?id=4791&lt;/a&gt;&lt;br&gt;
[13] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4782"&gt;https://bugs.maemo.org/show_bug.cgi?id=4782&lt;/a&gt;&lt;br&gt;
[14] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4821"&gt;https://bugs.maemo.org/show_bug.cgi?id=4821&lt;/a&gt;&lt;br&gt;
[15] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4824"&gt;https://bugs.maemo.org/show_bug.cgi?id=4824&lt;/a&gt;&lt;br&gt;
[16] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4839"&gt;https://bugs.maemo.org/show_bug.cgi?id=4839&lt;/a&gt;&lt;br&gt;
[17] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4849"&gt;https://bugs.maemo.org/show_bug.cgi?id=4849&lt;/a&gt;&lt;br&gt;
[18] &lt;a href="https://bugs.maemo.org/show_bug.cgi?id=4734"&gt;https://bugs.maemo.org/show_bug.cgi?id=4734&lt;/a&gt;&lt;br&gt;
[19] &lt;a href="https://garage.maemo.org/mailman/listinfo/pymaemo-developers"&gt;https://garage.maemo.org/mailman/listinfo/pymaemo-developers&lt;/a&gt;&lt;br&gt;
[20] &lt;a href="https://bugs.maemo.org/enter_bug.cgi?product=PyMaemo"&gt;https://bugs.maemo.org/enter_bug.cgi?product=PyMaemo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;p&gt;This post was possible thanks to &lt;strong&gt;Anderson Lizardo&lt;/strong&gt;, from PyMaemo
team, who posted these informations on pymaemo-developers mailing list.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Mon, 10 Aug 2009 09:20:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2009-08-10:/2009/08/10/pymaemo-python-for-maemo-second-beta-release-for-fremantle/</guid><category>Igalia, Linux, Maemo (EN), Programmazione, Python</category><category>bindings</category><category>fremantle</category><category>maemo</category><category>nokia</category><category>pymaemo</category><category>Python</category><category>tablet</category></item><item><title>Writing Python bindings of existing C libraries – (2) – A simple example of binding</title><link>https://www.andreagrandi.it/2009/08/06/writing-python-bindings-of-existing-c-libraries-a-simple-example-of-binding/</link><description>&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;As I promised in the preceding post, I'll provide a very easy example of
a python binding. Let's suppose we don't want to use the methods
included in Python to sum two integer values and we want to do it in C
and then call the add method from a python script. I'll write the
complete source code first and then I'll explain all the parts of it.&lt;/p&gt;
&lt;h2&gt;Source Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;Python.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;foo_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyObject&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;PyArg_ParseTuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ii&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Py_BuildValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PyMethodDef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo_methods&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyCFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;foo_add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;METH_VARARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;PyMODINIT_FUNC&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;initfoo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Py_InitModule3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo_methods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My first extension module.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;First of all we have to include &lt;strong&gt;Python.h&lt;/strong&gt; in our C file. This allows
us to write an extension for Python language. To be able to include this
header, we must have the python development packages installed in our
system. For example in Debian based distributions we can install them
with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python2.5-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Every module has at least three parts. In the first part we write
methods we want to call from the final python module: in this case we
have a method called &lt;strong&gt;foo_add&lt;/strong&gt; where "&lt;em&gt;foo&lt;/em&gt;" is the name of the
module and "&lt;em&gt;add&lt;/em&gt;" the name of the method. Every method is declared as
&lt;strong&gt;static PyObject&lt;/strong&gt;. The method does anything particular except calling
PyArg_ParseTuple to validate the input (we'll discuss this later),
adding the two passed numbers and returning the result.&lt;/p&gt;
&lt;p&gt;In the second part we have something like a dictionary, defined as
static &lt;strong&gt;PyMethodDef&lt;/strong&gt; and called foo_methods (where "foo" again is the
name of the module). For each method we want to expose in our python
module, we have to add something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PyCFunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;foo_add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;METH_VARARGS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where "&lt;em&gt;add&lt;/em&gt;" is the name of the method we want to be visible in our
module, &lt;em&gt;(PyCFunction)foo_add&lt;/em&gt; is a pointer to our foo_add method,
implemented in the C module, METH_VARARGS means that we want to pass
some parameters to the function and the last one would be the
description of the method (we can leave it NULL if we want).&lt;/p&gt;
&lt;p&gt;Third part allows us to register the defined method/s and the module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Py_InitModule3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo_methods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My first extension module.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Parsing Parameters&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;PyArg_ParseTuple&lt;/strong&gt; function extracts arguments from the
&lt;strong&gt;PyObject&lt;/strong&gt; passed as parameter to the current method and follows
almost the sscanf syntax to parse parameters (in this case we had &lt;em&gt;"ii"&lt;/em&gt;
for two integers). You can fin the complete reference here:
&lt;a href="http://docs.python.org/c-api/arg.html"&gt;http://docs.python.org/c-api/arg.html&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Building and installing&lt;/h2&gt;
&lt;p&gt;To build the module, we have to be in the source directory and execute
this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gcc -shared -I/usr/include/python2.5 foo.c -o foo.so
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then we've to copy the generated module to the python's modules
directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cp foo.so /usr/lib/python2.5/site-packages/
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Testing our module&lt;/h2&gt;
&lt;p&gt;Testing the module is really easy. We've to start a python shell or
create a python script with the following source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;foo&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if all is working fine, the printed result should be &lt;strong&gt;5&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.python.org/extending/extending.html"&gt;http://docs.python.org/extending/extending.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.wrox.com/WileyCDA/WroxTitle/productCd-0764596543.html"&gt;http://www.wrox.com/WileyCDA/WroxTitle/productCd-0764596543.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Thu, 06 Aug 2009 15:44:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2009-08-06:/2009/08/06/writing-python-bindings-of-existing-c-libraries-a-simple-example-of-binding/</guid><category>HowTo, Igalia, Linux, Maemo (EN), Programmazione, Python</category><category>binding</category><category>Igalia</category><category>maemo</category><category>Python</category></item><item><title>MAFW and Python: asking for developers feedback</title><link>https://www.andreagrandi.it/2009/08/05/mafw-and-python-asking-for-developers-feedback/</link><description>&lt;p&gt;MAFW is a new multimedia framework that will be used in Fremantle.&lt;/p&gt;
&lt;p&gt;The PyMaemo team is currently working on writing bindings for Python&lt;br&gt;
language for this library and at the moment we've released a 0.1&lt;br&gt;
version of python-mafw that you can install directly from Scratchbox&lt;br&gt;
repository.&lt;/p&gt;
&lt;p&gt;Not all the methods are implemented (you can manage the Registry and&lt;br&gt;
the Playlist, but nothing more), because even if we're using codegen&lt;br&gt;
to generate bindings (and it's helping us a lot), we've seen that at&lt;br&gt;
least 30-40 methods have to be overridden by hand so it's taking us&lt;br&gt;
more time than we expected and we're trying to organize how to&lt;br&gt;
continue this work.&lt;/p&gt;
&lt;p&gt;We would like to get feedback from python application developers and&lt;br&gt;
also from C application developers that are currently using MAFW so we&lt;br&gt;
can work on a "roadmap" that reflects what developers want:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are the functionalities you're using in your application that
    you think they cannot miss in the Python binding?&lt;/li&gt;
&lt;li&gt;Have you already started using MAFW or even better python-mafw to
    develop something?&lt;/li&gt;
&lt;li&gt;What is the currently missing method/methods you would like to be
    implemented first?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Come on developers! We're waiting for your feedback :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Wed, 05 Aug 2009 10:16:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2009-08-05:/2009/08/05/mafw-and-python-asking-for-developers-feedback/</guid><category>Igalia, Linux, Maemo (EN), Programmazione, Python</category><category>bindings</category><category>fremantle</category><category>maemo</category><category>mafw</category><category>Python</category></item><item><title>Writing Python bindings of existing C libraries - (1) - Introduction</title><link>https://www.andreagrandi.it/2009/08/03/writing-python-bindings-of-existing-c-libraries-1-introduction/</link><description>&lt;p&gt;This summer I'm having the pleasure of working in
&lt;a href="http://www.igalia.com"&gt;&lt;strong&gt;Igalia&lt;/strong&gt;&lt;/a&gt; (a spanish free software company)
for a couple of months and they assigned me to an interesting project:
developing &lt;strong&gt;Python bindings&lt;/strong&gt; for &lt;strong&gt;MAFW&lt;/strong&gt; library (a &lt;strong&gt;Maemo&lt;/strong&gt;
multimedia library that will be used in &lt;strong&gt;Fremantle&lt;/strong&gt; release).&lt;/p&gt;
&lt;p&gt;Having the opportunity to work both with &lt;strong&gt;C&lt;/strong&gt; (yes, Python bindings are
almost C code) and &lt;strong&gt;Python&lt;/strong&gt; (it's a good practice to write unittest of
all implemented methods) it's a good way to improve my knowledges in
both languages and since I wasn't able to find much documentation about
these kind of things, I'm going to share my own experiences.&lt;/p&gt;
&lt;h2&gt;What is a Binding?&lt;/h2&gt;
&lt;p&gt;A binding is a Python module, written in C language, that allows Python
developers to call functions from existing C libraries from their python
applications. It's just like a "&lt;em&gt;bridge&lt;/em&gt;" from C world to Python one.&lt;/p&gt;
&lt;h2&gt;Why writing bindings?&lt;/h2&gt;
&lt;p&gt;There are a couple of reasons to write python bindings instead of
writing a library in python language from scratch.&lt;/p&gt;
&lt;p&gt;First of all I don't think is good duplicating code, so if a library
already exists and it's written in C, why writing it again in another
language? There's no reason. A lot of code already exist in C world and
all we have to do is to create a bridge with python world.&lt;/p&gt;
&lt;p&gt;Another good reason, in particular when a C library doesn't exist yet,
is the fact that python code is slower than C code for some tasks (for
example multimedia codecs). In these cases is good to implement the core
library in C language and then create a python binding for it.&lt;/p&gt;
&lt;h2&gt;Coming next&lt;/h2&gt;
&lt;p&gt;As the title of this post says, this is only an introduction to the
subjects I'm going to write about. If you have any particular request
about any argument you would like to read, please feel free to leave me
a comment. Next posts will talk about these things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A simple example of binding:&lt;/strong&gt; I'll write a simple library in C
    language and I'll show how to create the relative python binding,
    providing complete source code and an example for python developers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Building and installing python bindings with distutils:&lt;/strong&gt; I'll
    explain how to use &lt;strong&gt;distutils&lt;/strong&gt; to build and install the binding
    (using the well know method "python setup.py install").&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Defining new types:&lt;/strong&gt; this post will be about how to write new
    types in C language and being able to use them from python code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using codegen to write bindings:&lt;/strong&gt; I'll explain how to use
    &lt;strong&gt;codegen&lt;/strong&gt; utils to automate lot of tasks, to generate the most
    part of binding code and how to customize the generated code using
    overrides.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Mon, 03 Aug 2009 10:04:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2009-08-03:/2009/08/03/writing-python-bindings-of-existing-c-libraries-1-introduction/</guid><category>HowTo, Igalia, Linux, Maemo (EN), Programmazione, Python</category><category>bindings</category><category>C</category><category>Igalia</category><category>libraries</category><category>library</category><category>maemo</category><category>pymaemo</category><category>Python</category></item><item><title>I officially joined the PyMaemo team</title><link>https://www.andreagrandi.it/2009/07/25/i-officially-joined-the-pymaemo-team/</link><description>&lt;p&gt;This summer I'm working for 2 months at &lt;a href="http://www.igalia.com"&gt;Igalia&lt;/a&gt;,
a spanish free software company, and they assigned me the project of
writing a &lt;strong&gt;Python binding&lt;/strong&gt; for &lt;strong&gt;MAFW&lt;/strong&gt; (a new multimedia library that
will be included in &lt;strong&gt;Freemantle&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;After few days I discovered that
&lt;a href="http://garage.maemo.org/projects/pymaemo/"&gt;&lt;strong&gt;PyMaemo&lt;/strong&gt;&lt;/a&gt; team was
already working to it, so I asked to join them and they accepted me!&lt;/p&gt;
&lt;p&gt;I really love Python language and since I think other developers love it
too, I think we should provide good bindings for every library available
in Maemo, so lot of developers can start writing their applications in
this language.&lt;/p&gt;
&lt;p&gt;I'll work to this project full time until the first week of september,
so I hope to be able to learn a lot and to contribute as much as I can
to this project.&lt;/p&gt;
&lt;p&gt;If anyone else want to join PyMaemo team and help us to develop Python
bindings, I think he will be welcome!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sat, 25 Jul 2009 13:54:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2009-07-25:/2009/07/25/i-officially-joined-the-pymaemo-team/</guid><category>Igalia, Linux, Maemo (EN), Programmazione, Python</category><category>bindings</category><category>freemantle</category><category>Igalia</category><category>maemo</category><category>Python</category></item><item><title>Develop a GPS-aware application for the Nokia N810</title><link>https://www.andreagrandi.it/2009/02/24/develop-a-gps-aware-application-for-the-nokia-n810/</link><description>&lt;p&gt;&lt;strong&gt;Paul Ferrill&lt;/strong&gt; has written a serie of three articles about writing a
GPS-aware application for the Nokia N810, using the Maemo SDK, Eclipse
and PluThon plugin.&lt;/p&gt;
&lt;p&gt;Here is the complete serie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/developerworks/linux/library/l-gps-nokia1/index.html?S_TACT=105AGX03&amp;amp;S_CMP=EDU"&gt;Develop a GPS-aware application for the Nokia N810, Part 1: Development environment:&lt;/a&gt;
    Learn how to configure a development environment targeted at the
    Nokia N810 Internet Tablet, including setting up Eclipse on a target
    development machine for the Python language.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/developerworks/linux/library/l-gps-nokia2/index.html?S_TACT=105AGX03&amp;amp;S_CMP=EDU"&gt;Develop a GPS-aware application for the Nokia N810, Part 2: Consider your options:&lt;/a&gt;
    Discover the details of code design, library selection, unit
    testing, and user interface choices that make the most sense for
    you.&lt;a href="http://www.ibm.com/developerworks/linux/library/l-gps-nokia2/index.html?S_TACT=105AGX03&amp;amp;S_CMP=EDU"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ibm.com/developerworks/linux/library/l-gps-nokia3/index.html?S_TACT=105AGX03&amp;amp;S_CMP=EDU"&gt;Develop a GPS-aware application for the Nokia N810, Part 3: Finish the job&lt;/a&gt;:
    In this last of three installments, you'll put the final touches to
    the GPS trip tracker and get it ready for release.&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Tue, 24 Feb 2009 15:51:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2009-02-24:/2009/02/24/develop-a-gps-aware-application-for-the-nokia-n810/</guid><category>HowTo, Linux, Maemo (EN), Programmazione, Python</category><category>eclipse</category><category>gps</category><category>Python</category><category>SDK</category></item><item><title>Skype SMS su Linux: grazie a Skype4Py si puo'!</title><link>https://www.andreagrandi.it/2008/05/11/skype-sms-su-linux-grazie-a-skype4py-si-puo/</link><description>&lt;p&gt;&lt;a href=""&gt;&lt;img alt="SkypeLogo" src="https://www.andreagrandi.it/images/2008/05/skype_logo.thumbnail.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Il client di &lt;strong&gt;Skype&lt;/strong&gt; per Linux &lt;strong&gt;non supporta&lt;/strong&gt; al momento l'&lt;strong&gt;invio
degli SMS&lt;/strong&gt;. Questa puo' essere per molti una grossa limitazione, visto
che è molto conveniente come metodo per inviare gli sms (costano 10
centesimi) rispetto a molte tariffe in circolazione al momento, con i
principali gestori italiani.La mancanza di questa funzionalità è però
soltanto apparente! Infatti è stata già implementata a livello di
librerie di Skype ed è già disponibile tramite le API.&lt;/p&gt;
&lt;p&gt;Grazie alla libreria &lt;a href="https://developer.skype.com/wiki/Skype4Py"&gt;&lt;strong&gt;Skype4Py&lt;/strong&gt;&lt;/a&gt;, ufficialmente
supportata da &lt;strong&gt;Skype&lt;/strong&gt; e sviluppata da &lt;strong&gt;Arkadiusz Wahlig&lt;/strong&gt; (che ha
tenuto un talk proprio su questo argomento nella giornata di ieri del
&lt;a href="http://www.pycon.it"&gt;PyCon&lt;/a&gt; Due), è possibile scrivere applicazioni
multipiattaforma (Windows, Linux, Mac) che interagiscano con Skype.&lt;/p&gt;
&lt;p&gt;Una volta installata la libreria nel proprio sistema, dobbiamo soltanto
avviare il client Skype.&lt;/p&gt;
&lt;p&gt;Le applicazioni che possiamo scrivere, per automatizzare alcune funzioni
di Skype, sono moltissime. In questo caso particolare farò vedere un
piccolo script Python che invia un SMS utilizzando il client (ed il
credito) dell'istanza di Skype che sta girando sulla vostra macchina:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Skype4Py&lt;/span&gt;

&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;+393*******&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Messaggio di prova da PySms4Skype!&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;skype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Skype4Py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Skype&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;skype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FriendlyName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PySms4Skype&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;skype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Attach&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;sms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;skype&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateSms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Skype4Py&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;smsMessageTypeOutgoing&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;sms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;  
&lt;span class="n"&gt;sms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Send&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Quando eseguite questo script, Skype vi chiedera' la &lt;strong&gt;conferma&lt;/strong&gt; per
autorizzare la vostra applicazione ad utilizzare le API, basterà quindi
dare conferma per continuare. Nello script ovviamente dovrete sostituire
il numero di telefono con uno valido.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sun, 11 May 2008 17:56:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2008-05-11:/2008/05/11/skype-sms-su-linux-grazie-a-skype4py-si-puo/</guid><category>Linux, Programmazione, Python, Skype</category><category>API</category><category>Linux</category><category>Python</category><category>Skype</category><category>skype4py</category><category>sms</category></item><item><title>Using GtkIconView in Python: a small tutorial</title><link>https://www.andreagrandi.it/2008/04/15/using-gtkiconview-in-python-a-small-tutorial/</link><description>&lt;p&gt;In these days I was looking for a simple tutorial to understand how to
use &lt;strong&gt;GtkIconView&lt;/strong&gt;, but the only thing I was able to find was an
example in PHP-Gtk. So I decided to translate it in &lt;strong&gt;Python&lt;/strong&gt; language,
thinking it would be useful for other people trying to use that Gtk
control. You can find the code here:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gtk&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gobject&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_IMAGE_WIDTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="c1"&gt;# Main Window setup  &lt;/span&gt;
&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WINDOW_TOPLEVEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_size_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;destroy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main_quit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Python GtkIconView Test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Add a VBox  &lt;/span&gt;
&lt;span class="n"&gt;vbox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VBox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vbox&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Setup Scrolled Window  &lt;/span&gt;
&lt;span class="n"&gt;scrolled_win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScrolledWindow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;scrolled_win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_policy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POLICY_AUTOMATIC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POLICY_AUTOMATIC&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Setup ListStore to contain images and description  &lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gdk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pixbuf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gobject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TYPE_STRING&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create a tuple with image files&lt;/span&gt;
&lt;span class="n"&gt;immagini&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;BD786-TFR.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;guido_sottozero.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;IMG_0056.JPG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;movies_card.jpg&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;immagini&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;pixbuf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gdk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pixbuf_new_from_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pix_w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pixbuf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_width&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;pix_h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pixbuf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_height&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;new_h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pix_h&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;DEFAULT_IMAGE_WIDTH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;pix_w&lt;/span&gt; &lt;span class="c1"&gt;# Calculate the scaled height before resizing image&lt;/span&gt;
        &lt;span class="n"&gt;scaled_pix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pixbuf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scale_simple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;DEFAULT_IMAGE_WIDTH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gdk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INTERP_TILES&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;scaled_pix&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="c1"&gt;# Setup GtkIconView  &lt;/span&gt;
&lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IconView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Pass the model stored in a ListStore to the GtkIconView&lt;/span&gt;
&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_pixbuf_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_text_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_selection_mode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SELECTION_MULTIPLE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_columns&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_item_width&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;150&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Pack objects and show them all  &lt;/span&gt;
&lt;span class="n"&gt;scrolled_win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;vbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrolled_win&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;gtk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The important thing to notice is that you have to store all the images
in a &lt;strong&gt;GtkListStore&lt;/strong&gt; and pass it to the &lt;strong&gt;GtkIconView&lt;/strong&gt; as &lt;em&gt;"model"&lt;/em&gt;
parameter. I hope this example is clear. If you have any question,
please comment this post and I'll try to answer.&lt;/p&gt;
&lt;p&gt;This is a screenshot of this example:&lt;/p&gt;
&lt;p&gt;&lt;a href=""&gt;&lt;img alt="gtkiconview" src="https://www.andreagrandi.it/images/2008/04/gtkiconview_sample.png"&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Tue, 15 Apr 2008 15:24:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2008-04-15:/2008/04/15/using-gtkiconview-in-python-a-small-tutorial/</guid><category>Linux, Programmazione, Python</category><category>gtk</category><category>gtkiconview</category><category>gtkliststore</category><category>HowTo</category><category>programming</category><category>Python</category><category>tutorial</category></item><item><title>PyMaemo Talk on May 10th in Florence at PyCon2 Conference</title><link>https://www.andreagrandi.it/2008/04/09/pymaemo-talk-on-may-10th-in-florence-at-pycon2-conference/</link><description>&lt;p&gt;&lt;strong&gt;PyCon2&lt;/strong&gt; is the second edition of the &lt;a href="http://www.pycon.it/"&gt;Italian Python Conference&lt;/a&gt; and will
take place on &lt;strong&gt;May 9/10/11&lt;/strong&gt;, 2008 in &lt;strong&gt;Florence&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The conference is organized by &lt;strong&gt;Python Italia&lt;/strong&gt; and more than
&lt;strong&gt;300&lt;/strong&gt; developers, students and researchers
will be present for three days of tutorials and other important events.&lt;/p&gt;
&lt;p&gt;PyCon 2008 edition will be opened by &lt;strong&gt;Richard Stallman&lt;/strong&gt; with a keynote on &lt;strong&gt;Free Software&lt;/strong&gt; and &lt;strong&gt;Free Ethics&lt;/strong&gt;. 
Other famous developers will be presento too: &lt;strong&gt;Alex Martelli&lt;/strong&gt;, &lt;strong&gt;Samuele Pedroni&lt;/strong&gt;, &lt;strong&gt;Brian Fitzpatrick&lt;/strong&gt; and many other.&lt;/p&gt;
&lt;p&gt;I'll partecipate at the conference as speaker on May 10, with a talk on &lt;strong&gt;PyMaemo: Python for Nokia Internet Tablets&lt;/strong&gt;.
In particular I'll talk about Maemo platform, Maemo SDK (how to install and configure it) and I'll explain how to use the two Eclipse plugins
&lt;a href="http://esbox.garage.maemo.org/"&gt;ESBox&lt;/a&gt; and &lt;a href="http://pluthon.garage.maemo.org/"&gt;Pluthon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to give me any suggestion or idea for this talk, please
leave me a comment on this post, so I'll integrate it with my slides.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Wed, 09 Apr 2008 14:42:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2008-04-09:/2008/04/09/pymaemo-talk-on-may-10th-in-florence-at-pycon2-conference/</guid><category>Linux, Maemo (EN), Python</category><category>conference</category><category>maemo</category><category>nokia</category><category>pycon</category><category>Python</category></item><item><title>PyCon2: conferenza italiana dedicata al linguaggio Python</title><link>https://www.andreagrandi.it/2008/04/06/pycon2-conferenza-italiana-dedicata-al-linguaggio-python/</link><description>&lt;p&gt;&lt;a href=""&gt;&lt;img alt="Python" src="https://www.andreagrandi.it/images/2008/04/python-powered-h-140x182.thumbnail.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;PyCon Due&lt;/h2&gt;
&lt;p&gt;è la seconda conferenza italiana dedicata al linguaggio di
programmazione &lt;strong&gt;Python&lt;/strong&gt;. La conferenza è organizzata da un gruppo di
appassionati e senza finalità di lucro; si prefigge la divulgazione di
Python, e di dare visibilità agli sviluppatori professionisti, studenti,
aziende e semplici interessati al linguaggio.&lt;/p&gt;
&lt;h2&gt;Dove e quando&lt;/h2&gt;
&lt;p&gt;La conferenza si tiene a &lt;strong&gt;Firenze&lt;/strong&gt; nelle giornate
di &lt;strong&gt;Venerdì 9&lt;/strong&gt;, &lt;strong&gt;Sabato 10&lt;/strong&gt; e &lt;strong&gt;Domenica 11 Maggio&lt;/strong&gt;. L'evento di
apertura si terrà a &lt;strong&gt;Palazzo Vecchio&lt;/strong&gt; nel pomeriggio di Venerdì,
durante il quale terrà un keynote &lt;strong&gt;Richard Stallman&lt;/strong&gt;. Sabato e
Domenica, al &lt;a href="http://www.florence-hotels-laurus.com/"&gt;&lt;strong&gt;Viva Hotel
Laurus&lt;/strong&gt;&lt;/a&gt; (Via Cerretani 54/r),
nei pressi del Duomo, si svolgeranno 3 track parallele di conferenze.&lt;/p&gt;
&lt;h2&gt;Gli Interventi&lt;/h2&gt;
&lt;p&gt;Durante la conferenza si terranno due tipi di interventi: i &lt;strong&gt;keynote&lt;/strong&gt; ed i &lt;strong&gt;talk&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I &lt;strong&gt;keynote&lt;/strong&gt; sono interventi di ampio respiro che trattano temi di
attualità del mondo dell'informatica; hanno una durata indicativa di 90'
e verranno tenuti in occasione dell'evento di apertura di venerdì 9 ed
alla chiusura delle due giornate successive.&lt;/p&gt;
&lt;h2&gt;I talk&lt;/h2&gt;
&lt;p&gt;sono invece interventi focalizzati su un particolare
argomento; hanno una durata indicativa di 45', comprensivi del tempo per
le domande del pubblico. I talk di PyCon Due si tengono durante le
giornate di sabato 10 e domenica 11, e si dividono in tre track:
"&lt;em&gt;Scoprire Python&lt;/em&gt;", "&lt;em&gt;Diffondere Python&lt;/em&gt;" e "&lt;em&gt;Imparare Python&lt;/em&gt;":&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Scoprire Python&lt;/strong&gt; è una track introduttiva su librerie, framework
    e metodologie, pensata per chi si sta avvicinando al Python o
    desidera una prima trattazione di un argomento;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Diffondere Python&lt;/strong&gt; è una track dedicata ad aspetti più avanzati
    del linguaggio, esempi di integrazione della piattaforma e casi
    d'uso in azienda;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Imparare Python&lt;/strong&gt; è una track interattiva: i talk sono
    parzialmente guidati dal pubblico, che discute la trattazione
    dell'argomento insieme al relatore, proponendo scenari e commentando
    le soluzioni proposte.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Registrazione&lt;/h2&gt;
&lt;p&gt;per partecipare all'evento occorre registrarsi. La
registrazione puo' essere fatta direttamente sul &lt;a href="http://www.pycon.it"&gt;sito ufficiale del PyCon2&lt;/a&gt;. Sempre sul sito ufficiale, potrete trovare
a breve l'elenco delle conferenze che verranno fatte, non appena si
concluderanno le votazioni per il Call For Paper che sono in corso in
questi giorni.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Sun, 06 Apr 2008 14:53:00 +0200</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2008-04-06:/2008/04/06/pycon2-conferenza-italiana-dedicata-al-linguaggio-python/</guid><category>Linux, Programmazione, Python</category><category>conferenza</category><category>firenze</category><category>italiana</category><category>linguaggio</category><category>Programmazione</category><category>pycon</category><category>pycon2</category><category>Python</category><category>sviluppatori</category></item><item><title>Il crivello di Eratostene</title><link>https://www.andreagrandi.it/2008/01/30/il-crivello-di-eratostene/</link><description>&lt;p&gt;Questo codice Python di esempio, genera una lista di numeri primi che
vanno da 2 fino al numero passato come parametro.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;eratostene&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;primi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;primi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="k"&gt;break&lt;/span&gt;  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;primi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
                &lt;span class="n"&gt;primi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
                &lt;span class="n"&gt;primi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;primi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Grandi</dc:creator><pubDate>Wed, 30 Jan 2008 17:56:00 +0100</pubDate><guid isPermaLink="false">tag:www.andreagrandi.it,2008-01-30:/2008/01/30/il-crivello-di-eratostene/</guid><category>Python</category><category>crivello</category><category>eratostene</category><category>numeri primi</category><category>Python</category></item></channel></rss>