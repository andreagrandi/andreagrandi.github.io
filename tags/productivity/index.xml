<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Productivity on Andrea Grandi</title>
        <link>https://www.andreagrandi.it/tags/productivity/</link>
        <description>Recent content in Productivity on Andrea Grandi</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 15 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.andreagrandi.it/tags/productivity/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Claude Code Status Line Script</title>
        <link>https://www.andreagrandi.it/posts/claude-code-status-line-script/</link>
        <pubDate>Fri, 15 Aug 2025 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/claude-code-status-line-script/</guid>
        <description>&lt;img src="https://www.andreagrandi.it/posts/claude-code-status-line-script/cc-statusline.png" alt="Featured image of post Claude Code Status Line Script" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;A few days ago, Anthropic released an update for Claude Code that adds an &lt;a class=&#34;link&#34; href=&#34;https://docs.anthropic.com/en/docs/claude-code/statusline&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;interesting feature&lt;/a&gt;: a new command named &lt;code&gt;/statusline&lt;/code&gt;, which will create a script to fetch and show useful information in the app’s status bar and automatically add the configuration for it.&lt;/p&gt;
&lt;p&gt;You can either let Claude generate the script for you, or provide your own.&lt;/p&gt;
&lt;h2 id=&#34;installation&#34;&gt;Installation
&lt;/h2&gt;&lt;p&gt;To install my script, you need to download the bash script from &lt;a class=&#34;link&#34; href=&#34;https://gist.github.com/andreagrandi/362c1fc77909b202476aba9b57cb0145&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this location&lt;/a&gt; save it in &lt;code&gt;~/.claude/statusline-script.sh&lt;/code&gt;, make it executable with&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chmod +x ~/.claude/statusline-script.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;and add this configuration in &lt;code&gt;~/.claude/settings.json&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;statusLine&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;~/.claude/statusline-script.sh&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;features&#34;&gt;Features
&lt;/h2&gt;&lt;p&gt;As you can see from the above screenshot, the script will display the following information:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;📁 logbasset &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 🦫 1.24.5 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 🌿 10-logging &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 🤖 Opus 4.1 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 💸 &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;.00 &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 💰 &lt;span class=&#34;nv&#34;&gt;$14&lt;/span&gt;.64/day
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;📁 current folder&lt;/li&gt;
&lt;li&gt;🦫 language version (in this case it&amp;rsquo;s a Go app but for Python it will show &lt;code&gt;💼 (my-app) | 🐍 3.12.9&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;🌿 git branch name&lt;/li&gt;
&lt;li&gt;🤖 current model&lt;/li&gt;
&lt;li&gt;💸 cost of the current session&lt;/li&gt;
&lt;li&gt;💰 total cost for the day&lt;/li&gt;
&lt;li&gt;⏱️ time left for the current session&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The app uses &lt;code&gt;ccusage&lt;/code&gt; to fetch costs.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;In the last few days there has been an explosion of scripts and small apps which can provide a status line for Claude Code. I decided to give it a try and do my custom one. I hope it can be useful for other people too 😉&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Comparing Claude Code vs OpenCode (and testing different models)</title>
        <link>https://www.andreagrandi.it/posts/comparing-claude-code-vs-opencode-testing-different-models/</link>
        <pubDate>Thu, 17 Jul 2025 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/comparing-claude-code-vs-opencode-testing-different-models/</guid>
        <description>&lt;img src="https://www.andreagrandi.it/posts/comparing-claude-code-vs-opencode-testing-different-models/opencode.png" alt="Featured image of post Comparing Claude Code vs OpenCode (and testing different models)" /&gt;&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;In the past few days &lt;a class=&#34;link&#34; href=&#34;https://github.com/anthropics/claude-code&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Claude Code&lt;/strong&gt;&lt;/a&gt; had some reliability issues and was sometimes unavailable. I started looking for alternative solutions (for context: through my job, I already have paid subscriptions to &lt;a class=&#34;link&#34; href=&#34;https://github.com/features/copilot&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;GitHub Copilot&lt;/strong&gt;&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://chatgpt.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;ChatGPT&lt;/strong&gt;&lt;/a&gt;) but I wanted something that would better fit my workflow.&lt;/p&gt;
&lt;p&gt;While I initially used Copilot in &lt;strong&gt;VSCode&lt;/strong&gt;, in the last month I’ve mostly been using VSCode for small fixes, code reviews, and navigating the codebase (asking questions using &lt;code&gt;@workspace&lt;/code&gt; still beats any other tool I’ve tried so far). I was primarily using Claude Code (I have a &lt;strong&gt;Pro&lt;/strong&gt; subscription, which is usually enough for my needs).&lt;/p&gt;
&lt;p&gt;I discovered &lt;a class=&#34;link&#34; href=&#34;https://opencode.ai&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;OpenCode&lt;/strong&gt;&lt;/a&gt; and liked that it’s not tied to a single provider—it can be used with most existing subscriptions and API keys (in particular, &lt;strong&gt;you can use your existing Claude Code Pro/Max or GitHub Copilot subscription&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Having recently worked on a task at work (which I admit it&amp;rsquo;s simple to medium difficulty), after work I decided to give the same task to Claude Code and OpenCode (used with different models) logged in with my GitHub Copilot subscription.&lt;/p&gt;
&lt;h2 id=&#34;the-task&#34;&gt;The Task
&lt;/h2&gt;&lt;p&gt;I won&amp;rsquo;t (and I can&amp;rsquo;t) go into specific details of the task, since it&amp;rsquo;s work stuff, but I can say it was about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add a new field &lt;code&gt;new_field&lt;/code&gt; to &lt;code&gt;ExistingEntity&lt;/code&gt; entity&lt;/li&gt;
&lt;li&gt;add &lt;code&gt;new_field&lt;/code&gt; to &lt;code&gt;ExistingModel&lt;/code&gt; model&lt;/li&gt;
&lt;li&gt;create an &lt;code&gt;alembic&lt;/code&gt; migration&lt;/li&gt;
&lt;li&gt;fix existing tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-results&#34;&gt;The results
&lt;/h2&gt;&lt;p&gt;Overall, the code produced by these models was correct (with one exception), but in a few cases I had to make some manual fixes or request a second iteration, specifying what needed to be corrected.&lt;/p&gt;
&lt;h3 id=&#34;claude-code&#34;&gt;Claude Code
&lt;/h3&gt;&lt;p&gt;Claude was, hands down, the best overall. The initial iteration had a couple of minor problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the field was marked as not nullable while I wanted it nullable, but I didn&amp;rsquo;t specify this initially so it couldn&amp;rsquo;t guess it correctly&lt;/li&gt;
&lt;li&gt;the default value given to the field was quite &amp;ldquo;odd&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;opencode-copilotsonnet-4&#34;&gt;OpenCode (copilot/sonnet-4)
&lt;/h3&gt;&lt;p&gt;OpenCode (configured with the Anthropic &lt;code&gt;sonnet-4&lt;/code&gt; model from Copilot) unsurprisingly produced almost the same code as Claude Code (with the same minor problems), but it also reformatted some existing code without permission. Last but not least, it added two tests (like Claude), but it removed six existing ones 😨&lt;/p&gt;
&lt;p&gt;I had to iterate and tell it to fix, which was very quick to do.&lt;/p&gt;
&lt;h3 id=&#34;opencode-copilotgemini-pro-25&#34;&gt;OpenCode (copilot/gemini-pro-2.5)
&lt;/h3&gt;&lt;p&gt;Gemini… oh dear! I’m not sure if it’s the model itself or if it’s just not optimized for agentic coding (though it should be, since Google just released &lt;code&gt;gemini-cli&lt;/code&gt; 🤷🏻‍♂️). It started hallucinating (I could see this as the code was being written) about existing fixtures, added a new unnecessary one, duplicated some existing code, and completely rewrote an existing class—in a bad way—instead of importing it. I honestly didn’t try a second iteration; I just scrapped the whole thing.&lt;/p&gt;
&lt;h3 id=&#34;opencode-copilotgpt-41&#34;&gt;OpenCode (copilot/gpt-4.1)
&lt;/h3&gt;&lt;p&gt;Last, but not least, I switched to &lt;code&gt;gpt-4.1&lt;/code&gt; from the Copilot subscription. The first iteration wasn’t perfect (it was probably a bit inferior to the one produced by &lt;code&gt;sonnet-4&lt;/code&gt;) and needed a couple of fixes, but once I told it what to correct, it did so quickly, and the final version was perfect.&lt;/p&gt;
&lt;p&gt;Bonus point: using &lt;code&gt;gpt-4.1&lt;/code&gt; through a Copilot subscription offers &lt;strong&gt;unlimited&lt;/strong&gt; usage 🎉&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;The best tool I’ve tried so far remains Claude Code, but I have to admit that OpenCode with &lt;code&gt;sonnet-4&lt;/code&gt; could replace it soon (especially considering it was released less than a month ago). Even &lt;code&gt;gpt-4.1&lt;/code&gt; wasn’t bad, and honestly, using it through OpenCode yields much better results than using it from within VSCode.&lt;/p&gt;
&lt;p&gt;All three models I used with OpenCode tried to reformat existing code. This must be an OpenCode bug, which I’ve tried to mitigate with a rule in the &lt;code&gt;AGENT.md&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;I will keep testing OpenCode over the next few days, and maybe I’ll write a dedicated review about it.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How to use git worktree effectively with Python projects</title>
        <link>https://www.andreagrandi.it/posts/how-to-use-git-worktree-effectively-with-python-projects/</link>
        <pubDate>Sun, 13 Jul 2025 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/how-to-use-git-worktree-effectively-with-python-projects/</guid>
        <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;Working with multiple branches in Python projects can be challenging, especially when you need to switch between different features, bug fixes, or versions while maintaining separate virtual environments and dependencies.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/docs/git-worktree&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;git worktree&lt;/code&gt;&lt;/a&gt; provides an elegant solution to this problem by allowing you to check out multiple branches simultaneously in separate working directories, but it doesn&amp;rsquo;t keep Python development requirements in mind.&lt;/p&gt;
&lt;p&gt;I won&amp;rsquo;t go into details about how to use &lt;code&gt;git worktree&lt;/code&gt; in this post (for that you can check the manual I linked),
but I will explain its limitations and present my workaround.&lt;/p&gt;
&lt;h2 id=&#34;the-problem-with-traditional-branch-switching&#34;&gt;The Problem with Traditional Branch Switching
&lt;/h2&gt;&lt;p&gt;When working on Python projects, switching branches often means recreating the virtual environment,
reinstalling the dependencies, setting the env variables etc&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git&lt;/code&gt; isn&amp;rsquo;t tight to a specific programming language, so by default it can&amp;rsquo;t do any of this.&lt;/p&gt;
&lt;p&gt;In my case I create the virtual environments with &lt;code&gt;uv&lt;/code&gt; (like I explain in &lt;a class=&#34;link&#34; href=&#34;https://www.andreagrandi.it/posts/using-uv-to-install-python-create-virtualenv/&#34; &gt;this other post&lt;/a&gt;) but this won&amp;rsquo;t be automatically available in the worktree folder and it won&amp;rsquo;t be active.&lt;/p&gt;
&lt;h2 id=&#34;the-helper-script&#34;&gt;The Helper Script
&lt;/h2&gt;&lt;p&gt;To streamline the git worktree workflow with Python projects, I&amp;rsquo;ve created a helper script that automates the common tasks:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://gist.github.com/andreagrandi/542b438bf0017d93aff2b640037e3ce1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gist.github.com/andreagrandi/542b438bf0017d93aff2b640037e3ce1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The script basically does this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it uses &lt;code&gt;git worktree&lt;/code&gt; as usual&lt;/li&gt;
&lt;li&gt;it creates a symbolic link to the existing &lt;code&gt;.venv/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;it creates a symbolic link to the existing &lt;code&gt;.envrc&lt;/code&gt; (which is where I keep my env variables, automatically activated by &lt;code&gt;direnv&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;it runs &lt;code&gt;direnv allow&lt;/code&gt; to give direnv permissions to read the env variables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You will need to customise the script replacing &lt;code&gt;/my-project-worktrees/&lt;/code&gt; with the name of the folder where you intend to keep your worktrees and &lt;code&gt;/my-project/&lt;/code&gt; with the main folder of your project.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;Git worktree is a great tool for working on multiple branches, but it needs some extra setup for Python projects. The helper script makes this much easier by automatically linking your virtual environment and environment variables to new worktrees, saving you time and hassle.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Using terminal-notifier in Claude Code to get custom notifications</title>
        <link>https://www.andreagrandi.it/posts/using-terminal-notifier-claude-code-custom-notifications/</link>
        <pubDate>Sat, 12 Jul 2025 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/using-terminal-notifier-claude-code-custom-notifications/</guid>
        <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction
&lt;/h2&gt;&lt;p&gt;When working with Claude Code on macOS, you might find yourself waiting for long-running tasks to complete or missing important prompts for user input. The &lt;code&gt;terminal-notifier&lt;/code&gt; utility provides an elegant solution by sending desktop notifications directly from the command line, helping you stay informed about your Claude Code sessions even when you&amp;rsquo;re focused on other tasks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I decided to use &lt;code&gt;terminal-notifier&lt;/code&gt; both because I can customise the notification I receive and also because my setup was having issues and I didn&amp;rsquo;t always get notifications from my terminal.&lt;/p&gt;
&lt;h2 id=&#34;what-is-terminal-notifier&#34;&gt;What is terminal-notifier?
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;terminal-notifier&lt;/code&gt; is a command-line tool for macOS that allows you to send user notifications from the terminal to the Notification Center. It&amp;rsquo;s particularly useful for automation scripts and development workflows where you need to be alerted about specific events.&lt;/p&gt;
&lt;h2 id=&#34;installing-terminal-notifier&#34;&gt;Installing terminal-notifier
&lt;/h2&gt;&lt;p&gt;The easiest way to install &lt;code&gt;terminal-notifier&lt;/code&gt; is through Homebrew:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;brew install terminal-notifier
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;using-terminal-notifier-with-claude-code&#34;&gt;Using terminal-notifier with Claude Code
&lt;/h2&gt;&lt;p&gt;Claude Code can be configured to use &lt;code&gt;terminal-notifier&lt;/code&gt; for sending notifications in different ways. The most realiable (and deterministic)
is using the new &lt;code&gt;/hooks&lt;/code&gt; feature. Add this configuration to your &lt;code&gt;~/.claude/settings.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hooks&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;Notification&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;matcher&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;hooks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;terminal-notifier -title \&amp;#34;🔔 Claude Code\&amp;#34; -message \&amp;#34;Claude needs your input\&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;Stop&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;matcher&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;hooks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;command&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;terminal-notifier -title \&amp;#34;✅ Claude Code\&amp;#34; -message \&amp;#34;The task has been completed\&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The other method (not deterministic, but you can customise the message you get)
is to add instructions to your global or project-specific &lt;code&gt;CLAUDE.md&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;## Notification
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gu&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; IMPORTANT: YOU MUST ALWAYS DO THIS: When you need to send me a notification because you need input or when you have finished a task, please use terminal-notifier tool like this: terminal-notifier -title &amp;#34;🔔 Claude Code: request&amp;#34; -message &amp;#34;Claude needs your permission to use ...&amp;#34;, or terminal-notifier -title &amp;#34;✅ Claude Code: done&amp;#34; -message &amp;#34;The task has been completed&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;-&lt;/span&gt; Always customise the message using a short summary of the input needed or the task just completed
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Save the file and start a new Claude Code session.&lt;/p&gt;
&lt;h2 id=&#34;final-result&#34;&gt;Final result
&lt;/h2&gt;&lt;p&gt;If everything worked, once Claude has finished elaborating a task, you should get a notification like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/using-terminal-notifier-claude-code-custom-notifications/cc-notification.png&#34;
	width=&#34;750&#34;
	height=&#34;228&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Claude Code notification using terminal notifier&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;328&#34;
		data-flex-basis=&#34;789px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting
&lt;/h2&gt;&lt;h3 id=&#34;notifications-not-appearing&#34;&gt;Notifications Not Appearing
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Check that notifications are enabled for Terminal in System Preferences &amp;gt; Notifications&lt;/li&gt;
&lt;li&gt;Ensure &lt;code&gt;terminal-notifier&lt;/code&gt; is properly installed and in your PATH&lt;/li&gt;
&lt;li&gt;Try running a test notification manually to verify functionality: &lt;code&gt;terminal-notifier -title &amp;quot;Hello&amp;quot; -message &amp;quot;World!&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;Integrating &lt;code&gt;terminal-notifier&lt;/code&gt; with Claude Code creates a more efficient and responsive development workflow. By receiving timely notifications about task completion and input requests, you can maintain focus on other work while staying connected to your Claude Code sessions.&lt;/p&gt;
&lt;p&gt;The combination of Claude Code&amp;rsquo;s automation capabilities with macOS&amp;rsquo;s native notification system provides a seamless development experience that keeps you informed without being intrusive.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
