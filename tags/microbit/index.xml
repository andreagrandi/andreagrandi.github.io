<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Microbit on Andrea Grandi</title>
        <link>https://www.andreagrandi.it/tags/microbit/</link>
        <description>Recent content in Microbit on Andrea Grandi</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 08 Feb 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://www.andreagrandi.it/tags/microbit/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Using a light sensor with BBC micro:bit and MicroPython</title>
        <link>https://www.andreagrandi.it/posts/using-a-light-sensor-with-bbc-microbit-and-micropython/</link>
        <pubDate>Mon, 08 Feb 2016 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/using-a-light-sensor-with-bbc-microbit-and-micropython/</guid>
        <description>&lt;p&gt;A &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Photoresistor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;light sensor&lt;/a&gt;&lt;/strong&gt; is a
small component with a particular characteristic: it is basically a
resistor and its resistance decreases if the light is more intense. To
use it with micro:bit we need to use one of the &lt;strong&gt;analogic ports&lt;/strong&gt;. To
build this circuit you will need a &lt;strong&gt;breadboard&lt;/strong&gt;, &lt;strong&gt;3 jumper wires&lt;/strong&gt;, a
&lt;strong&gt;10k resistance&lt;/strong&gt; and possibly a &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.kitronik.co.uk/5609-prototyping-system-for-the-bbc-microbit.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Kitronik breadboard
kit&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-project&#34;&gt;The project&lt;/h3&gt;
&lt;p&gt;I wanted to realise a simple project where, depending on the light
intensity captured by the light sensor, the &lt;strong&gt;micro:bit&lt;/strong&gt; shows an image
of the &lt;strong&gt;Sun&lt;/strong&gt; if the light is intense and an image of the &lt;strong&gt;Moon&lt;/strong&gt; if
the light is less intense.&lt;/p&gt;
&lt;p&gt;Here is the complete &lt;strong&gt;circuit scheme&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;microbit_breadboard_schema_light.png&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/using-a-light-sensor-with-bbc-microbit-and-micropython/microbit_breadboard_schema_light.png&#34;
	width=&#34;767&#34;
	height=&#34;813&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;microbit\_breadboard\_schema\_light&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;94&#34;
		data-flex-basis=&#34;226px&#34;
	
&gt;{ width=40% }&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;image-copyright--kitronik&#34;&gt;&amp;ldquo;Image Copyright © Kitronik&amp;rdquo;&lt;/h6&gt;
&lt;p&gt;and here is a picture of the &lt;strong&gt;finished project&lt;/strong&gt; I created:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;microbit_breadboard_example_2.jpg&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/using-a-light-sensor-with-bbc-microbit-and-micropython/microbit_breadboard_example_2.jpg&#34;
	width=&#34;600&#34;
	height=&#34;800&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;microbit\_breadboard\_example\_2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;75&#34;
		data-flex-basis=&#34;180px&#34;
	
&gt;{ width=40% }&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;source code&lt;/strong&gt; I needed is available here:&lt;/p&gt;
&lt;p&gt;
&lt;script src=&#34;https://gist.github.com/andreagrandi/99a09be27c9626b1119d.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
and as a demo I realised this small **video**:
&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6vLE_AQc4Bc&#34; frameborder=&#34;0&#34; allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;
</description>
        </item>
        <item>
        <title>Prototyping BBC micro:bit projects with Kitronik breadboard kit</title>
        <link>https://www.andreagrandi.it/posts/prototyping-bbc-microbit-projects-with-kitronik-breadboard-kit/</link>
        <pubDate>Sun, 07 Feb 2016 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/prototyping-bbc-microbit-projects-with-kitronik-breadboard-kit/</guid>
        <description>&lt;p&gt;&lt;strong&gt;BBC micro:bit&lt;/strong&gt; has a few &lt;a class=&#34;link&#34; href=&#34;http://microbit-micropython.readthedocs.org/en/latest/pin.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;IO
pins&lt;/a&gt;
that can be used to interact with external devices. The problem with the
board is that it&amp;rsquo;s not easy to connect the classic jumper wires (those
that we normally connect to a breadboard) to the &lt;strong&gt;micro:bit&lt;/strong&gt;, unless
using a &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Crocodile_clip&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;crocodile clip&lt;/a&gt;
and being limited to just 3 pins.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.kitronik.co.uk/5609-prototyping-system-for-the-bbc-microbit.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Kitronik breadboard
kit&lt;/strong&gt;&lt;/a&gt;
solves this problem, offering an interface where the micro:bit can be
plugged and all the pins are easily connectable to the breadboard using
normal &lt;a class=&#34;link&#34; href=&#34;https://www.adafruit.com/products/826&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;male/female jumper wires&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve built a very simple circuit following an example you can find on
this manual &lt;a class=&#34;link&#34; href=&#34;https://www.kitronik.co.uk/pdf/5603_inventors_kit_for_the_bbc_microbit_tutorial_book.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.kitronik.co.uk/pdf/5603_inventors_kit_for_the_bbc_microbit_tutorial_book.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;microbit_breadboard_example_1.jpg&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/prototyping-bbc-microbit-projects-with-kitronik-breadboard-kit/microbit_breadboard_example_1.jpg&#34;
	width=&#34;600&#34;
	height=&#34;800&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;microbit\_breadboard\_example\_1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;75&#34;
		data-flex-basis=&#34;180px&#34;
	
&gt;{ width=40% }&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To build the circuit you also need &lt;strong&gt;4 male/female jumper wires&lt;/strong&gt; and
&lt;strong&gt;two buttons&lt;/strong&gt;. All this circuit does is to connect the buttons to the
&lt;strong&gt;micro:bit&lt;/strong&gt; pins that relate to those buttons. Basically pressing
those buttons is the same as pressing &lt;strong&gt;button A&lt;/strong&gt; or &lt;strong&gt;button B&lt;/strong&gt; on
the &lt;strong&gt;micro:bit&lt;/strong&gt; board. Here you can see the schema in detail:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;Screenshot-2016-02-07-14.30.36.png&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/prototyping-bbc-microbit-projects-with-kitronik-breadboard-kit/Screenshot-2016-02-07-14.30.36.png&#34;
	width=&#34;647&#34;
	height=&#34;678&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Screenshot 2016-02-0714.30.36&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;95&#34;
		data-flex-basis=&#34;229px&#34;
	
&gt;{ width=40% }&lt;/a&gt;&lt;/p&gt;
&lt;h6 id=&#34;image-copyright-kitronik&#34; style=&#34;text-align: center;&#34;&gt;&amp;ldquo;Image Copyright © Kitronik&amp;rdquo;&lt;/h6&gt;
&lt;p&gt;I&amp;rsquo;ve also made a short &lt;strong&gt;video&lt;/strong&gt; so that you can see it in action:&lt;/p&gt;
&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/0Zfa1sBP7yI&#34; frameborder=&#34;0&#34; allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;And of course the &lt;strong&gt;source code&lt;/strong&gt; is available too:&lt;/p&gt;
&lt;p&gt;
&lt;script src=&#34;https://gist.github.com/andreagrandi/9f66f6806d0ce577bada.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Using BBC MicroBit accelerometer with Python</title>
        <link>https://www.andreagrandi.it/posts/using-bbc-microbit-accelerometer-with-python/</link>
        <pubDate>Tue, 26 Jan 2016 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/using-bbc-microbit-accelerometer-with-python/</guid>
        <description>&lt;p&gt;In these days I&amp;rsquo;m having a bit of fun with &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.microbit.co.uk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;BBC
MicroBit&lt;/a&gt;&lt;/strong&gt; board and I&amp;rsquo;m learning how to
use the different sensors available. The latest one I wanted to try was
the accelerometer. The board can &amp;ldquo;sense&amp;rdquo; if you are moving it in any of
the 3 dimensional axes: X, Y, Z. According to the
&lt;a class=&#34;link&#34; href=&#34;https://microbit-micropython.readthedocs.org/en/latest/accelerometer.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;documentation&lt;/a&gt;
there are four methods available that can be used to get these
values: &lt;code&gt;microbit.accelerometer.get_values()&lt;/code&gt; will return you a tuple with all the 3 values,
while  &lt;code&gt;microbit.accelerometer.get_x()&lt;/code&gt;, &lt;code&gt;microbit.accelerometer.get_y()&lt;/code&gt;, &lt;code&gt;microbit.accelerometer.get_z()&lt;/code&gt;
will give you the single values.&lt;/p&gt;
&lt;p&gt;The documentation on the official website doesn&amp;rsquo;t explain much and for
example I didn&amp;rsquo;t even know what was the range of the values I can get
back from these methods (by the way it&amp;rsquo;s &lt;strong&gt;between -1024&lt;/strong&gt; and
&lt;strong&gt;1024&lt;/strong&gt;), so I decided to play with the code directly and write a very
simple example. The small example I wrote, shows a smile on the board
display if you keep it straight and shows a sad face if you bend it.&lt;/p&gt;
&lt;p&gt;This is the result:&lt;/p&gt;
&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LX8fYBsOxA0&#34; frameborder=&#34;0&#34; allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;and this is all the needed code of the application:&lt;/p&gt;
&lt;p&gt;
&lt;script src=&#34;https://gist.github.com/andreagrandi/f4a7c8ee8597dde3070d.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;In the next days I will try to play with more sensors and to publish
other examples.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Getting started with BBC MicroBit and Python</title>
        <link>https://www.andreagrandi.it/posts/getting-started-with-bbc-microbit-and-python/</link>
        <pubDate>Thu, 10 Dec 2015 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/getting-started-with-bbc-microbit-and-python/</guid>
        <description>&lt;p&gt;A few days ago I had the great opportunity to attend an event organised
in collaboration with &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.python.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Python Software
Foundation&lt;/a&gt;&lt;/strong&gt;, a few &lt;strong&gt;primary school
teachers&lt;/strong&gt; and hosted by &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.computingatschool.org.uk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Computing at
School&lt;/a&gt;&lt;/strong&gt;, in &lt;strong&gt;London&lt;/strong&gt;. The
meeting was organised by &lt;strong&gt;Yvonne Walker&lt;/strong&gt; (from CAS) and &lt;strong&gt;Nicholas
Tollervey&lt;/strong&gt; (PSF). The aim of the meeting was for teachers and
developers to meet and discuss the opportunities offered
by &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://micropython.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MicroPython&lt;/a&gt;&lt;/strong&gt; on the &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.microbit.co.uk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;BBC
micro:bit&lt;/a&gt;&lt;/strong&gt;. During the event a
&lt;strong&gt;BBC&lt;/strong&gt; &lt;strong&gt;micro:bit&lt;/strong&gt; board was loaned to each person for the purpose of
developing Python scripts, MicroPython itself or educational resources
for the &lt;strong&gt;BBC micro:bit&lt;/strong&gt;. Nicholas made it very clear that there is an
&lt;strong&gt;NDA&lt;/strong&gt; in place until the device is delivered to the kids and explained
what we could or couldn&amp;rsquo;t do.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;computing_at_school_microbit_reduced.jpg&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/getting-started-with-bbc-microbit-and-python/computing_at_school_microbit_reduced.jpg&#34;
	width=&#34;4032&#34;
	height=&#34;3024&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;microbit&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;{width=100%}&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-board&#34;&gt;The Board&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;bbcfullbleed.jpg&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/getting-started-with-bbc-microbit-and-python/bbcfullbleed.jpg&#34;
	width=&#34;960&#34;
	height=&#34;623&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;board&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;154&#34;
		data-flex-basis=&#34;369px&#34;
	
&gt;{width=100%}&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The board is a 4 x 5 cm device with an &lt;strong&gt;ARM Cortex-M0&lt;/strong&gt; processor,
&lt;strong&gt;accelerometer&lt;/strong&gt; and magnetometer sensors, &lt;strong&gt;Bluetooth&lt;/strong&gt; and &lt;strong&gt;USB
connectivity&lt;/strong&gt;, a &lt;strong&gt;display&lt;/strong&gt; consisting of 25 LEDs, &lt;strong&gt;two programmable
buttons&lt;/strong&gt;, and can be powered by either USB or an external battery pack
(source: &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Micro_Bit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/Micro_Bit&lt;/a&gt; ).&lt;/p&gt;
&lt;h2 id=&#34;flashing-the-firmware&#34;&gt;Flashing the firmware&lt;/h2&gt;
&lt;p&gt;Once you get a new board, it probably doesn&amp;rsquo;t have a proper firmware and
application flashed. I suggest you to download the &lt;strong&gt;Python MicroBit
REPL&lt;/strong&gt; from this repository: &lt;a class=&#34;link&#34; href=&#34;https://github.com/ntoll/microrepl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ntoll/microrepl&lt;/a&gt;&lt;br&gt;
All you need to do is to connect the board to your computer, using a
&lt;strong&gt;micro-USB cable&lt;/strong&gt;. The device will be mounted as a volume. At this
point, drag &amp;amp; drop the file called
&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ntoll/microrepl/blob/master/firmware.hex&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;firmware.hex&lt;/a&gt;&lt;/strong&gt;
into the mounted volume. The firmware will be flashed and during the
operation you will see a yellow led flashing.&lt;/p&gt;
&lt;h2 id=&#34;usingmicropython-microbit-repl&#34;&gt;Using MicroPython micro:bit REPL&lt;/h2&gt;
&lt;p&gt;To start writing some Python code on micro:bit you first need to clone
this &lt;a class=&#34;link&#34; href=&#34;https://github.com/ntoll/microrepl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone git@github.com:ntoll/microrepl.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;once you have cloned the repository, you need to install the Python
dependencies (I suggest you to do it from inside a &lt;strong&gt;virtualenv&lt;/strong&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install -r requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;start the MicroPython REPL&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python microrepl.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;and the Python shell will open, so you can start writing commands, like
this one&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;microbit&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;➜  microrepl git:&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;master&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; python microrepl.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Quit: Ctrl+&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Stop program: Ctrl+C &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Reset: Ctrl+D
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Type &lt;span class=&#34;s1&#34;&gt;&amp;#39;help()&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;without the quotes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; press ENTER.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import this
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The Zen of MicroPython, by Nicholas H.Tollervey
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Code,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hack it,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Less is more,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Keep it simple,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Small is beautiful,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Be brave! Break things! Learn and have fun!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Express yourself with MicroPython.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Happy hacking! :-&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;bbc-microbit-micropython-editor&#34;&gt;BBC micro:bit MicroPython Editor&lt;/h2&gt;
&lt;p&gt;Typing all the Python commands directly into the shell can be a bit
difficult. You can use a very nice and dedicated editor to write code
and produce the compiled application for the micro:bit. All you need to
do is clone this &lt;a class=&#34;link&#34; href=&#34;https://github.com/ntoll/upyed&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone git@github.com:ntoll/upyed.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Open the file named &lt;strong&gt;editor.html&lt;/strong&gt; with your browser and start writing
your code. When your code is done, you can generate the &lt;strong&gt;.hex&lt;/strong&gt; file
clicking on &lt;strong&gt;Download&lt;/strong&gt; button. To load the compiled application you
just need to drag &amp;amp; drop the .hex file to the mounted device, exactly
like you did the first time to flash it. If you need a reference for all
the methods and libraries available, you can consult the official
documentation
here &lt;a class=&#34;link&#34; href=&#34;http://microbit-micropython.readthedocs.org/en/latest/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://microbit-micropython.readthedocs.org/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ntoll/microrepl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ntoll/microrepl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ntoll/upyed&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ntoll/upyed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.microbit.co.uk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.microbit.co.uk/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://microbit-micropython.readthedocs.org/en/latest/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://microbit-micropython.readthedocs.org/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
