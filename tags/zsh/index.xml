<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Zsh on Andrea Grandi</title>
        <link>https://www.andreagrandi.it/tags/zsh/</link>
        <description>Recent content in Zsh on Andrea Grandi</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 02 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.andreagrandi.it/tags/zsh/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>My ZSH history</title>
        <link>https://www.andreagrandi.it/posts/my-zsh-history/</link>
        <pubDate>Thu, 02 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/my-zsh-history/</guid>
        <description>&lt;p&gt;Inspired by &lt;a class=&#34;link&#34; href=&#34;https://nicolaiarocci.com/my-most-used-command-line-commands/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this post&lt;/a&gt; from &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://nicolaiarocci.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Nicola Iarocci&lt;/a&gt;&lt;/strong&gt;, I decided to check my own &lt;del&gt;bash&lt;/del&gt; &lt;strong&gt;zsh&lt;/strong&gt; history:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1082 git&lt;/li&gt;
&lt;li&gt;99 cd&lt;/li&gt;
&lt;li&gt;95 nox&lt;/li&gt;
&lt;li&gt;38 pip&lt;/li&gt;
&lt;li&gt;37 ls&lt;/li&gt;
&lt;li&gt;33 pytest&lt;/li&gt;
&lt;li&gt;29 brew&lt;/li&gt;
&lt;li&gt;26 code&lt;/li&gt;
&lt;li&gt;19 curl&lt;/li&gt;
&lt;li&gt;16 pyenv&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even for me, my biggest usage of the terminal is because of &lt;strong&gt;git&lt;/strong&gt; ðŸ˜…&lt;/p&gt;
&lt;p&gt;You can produce your own list by using this command: &lt;code&gt;history | awk &#39;{print $2}&#39; | sort | uniq --count | sort --numeric-sort --reverse | head -10&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Set specific environment variables activating a Python virtual environment</title>
        <link>https://www.andreagrandi.it/posts/set-specific-environment-variables-activating-python-virtual-environment/</link>
        <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/set-specific-environment-variables-activating-python-virtual-environment/</guid>
        <description>&lt;p&gt;When using Python virtual environments it can be useful to have certain &lt;strong&gt;environment variables&lt;/strong&gt; automatically set when we activate it.
For example we can have a projects that needs to connect to a database or we may need specific settings to run a service.
Automating this process makes sure we don&amp;rsquo;t forget about setting everything we need.&lt;/p&gt;
&lt;h2 id=&#34;storing-the-configuration&#34;&gt;Storing the configuration
&lt;/h2&gt;&lt;p&gt;I strongly suggest to store all the configuration in the root of your project in a file named &lt;code&gt;.env&lt;/code&gt; which you need to take care of adding to your &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An example of &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;MY_USERNAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;user1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;MY_PASSWORD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;secret
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;MY_SERVICE_URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http://localhost:5000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;how-to-activate-the-configuration&#34;&gt;How to activate the configuration
&lt;/h2&gt;&lt;p&gt;Python virtual environments have a few scripts that are beign executed in certain situations. In particular there is one named &lt;code&gt;postactivate&lt;/code&gt; that is being run after you activate trhe virtual environment.&lt;/p&gt;
&lt;p&gt;You need to first find the folder where it&amp;rsquo;s located and to do this, you need to first &lt;strong&gt;activate your virtual environment&lt;/strong&gt;. Now you need to run &lt;code&gt;cdvirtualenv&lt;/code&gt; in your terminal and your working directory will be set to where the virtual environment is located.&lt;/p&gt;
&lt;p&gt;At this point edit &lt;code&gt;postactivate&lt;/code&gt; file with (you can replace &lt;code&gt;nano&lt;/code&gt; with your preferred editor) &lt;code&gt;nano bin/postactivate&lt;/code&gt; and add the following script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/zsh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# This hook is sourced after this virtualenv is activated.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; -a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; .env
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; +a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I&amp;rsquo;m using &lt;code&gt;zsh&lt;/code&gt; here but you can replace it with &lt;code&gt;bash&lt;/code&gt; (the syntax should be the same).&lt;/p&gt;
&lt;h2 id=&#34;test-the-configuration&#34;&gt;Test the configuration
&lt;/h2&gt;&lt;p&gt;To make the configuration effective you need to &lt;code&gt;deactivate&lt;/code&gt; your virtual environment and &lt;code&gt;activate&lt;/code&gt; it again. The &lt;code&gt;postactivate&lt;/code&gt; script will run automatically and you can now check that your environment variables have been set correctly (the &lt;code&gt;...&lt;/code&gt; have been placed to replace other existing values):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;test-env&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; âžœ env
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;MY_USERNAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;user1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;MY_PASSWORD&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;secret
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;MY_SERVICE_URL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;http://localhost:5000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;As you can see the values configured in the &lt;code&gt;.env&lt;/code&gt; file have been correctly set.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
