<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Pelican on Andrea Grandi</title>
        <link>https://www.andreagrandi.it/tags/pelican/</link>
        <description>Recent content in Pelican on Andrea Grandi</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 25 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.andreagrandi.it/tags/pelican/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Migrating from Pelican to Hugo</title>
        <link>https://www.andreagrandi.it/posts/migrating-from-pelican-to-hugo/</link>
        <pubDate>Sun, 25 Feb 2024 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/migrating-from-pelican-to-hugo/</guid>
        <description>&lt;img src="https://www.andreagrandi.it/posts/migrating-from-pelican-to-hugo/migrating-from-pelican-to-hugo.webp" alt="Featured image of post Migrating from Pelican to Hugo" /&gt;&lt;p&gt;As you may have noticed, the blog has a new look. I recently migrated from Pelican to Hugo and I am very happy with the result. I&amp;rsquo;ve known Hugo for a long time, but I never had the opportunity to use it in a real project. With a little help from a couple of friends, I was able to complete the migration in a few days.&lt;/p&gt;
&lt;h2 id=&#34;why-did-i-migrate&#34;&gt;Why did I migrate?&lt;/h2&gt;
&lt;p&gt;I have been using Pelican for a long time and I have always been very happy with it. It is a great static site generator and it has served me well. However, I recently started having issues with PIP dependencies. For example one of the plugins required an older version of a sub dependency, which was causing conflicts with other plugins. I tried to fix it, but it was a rabbit hole and I decided to give Hugo a try.&lt;/p&gt;
&lt;p&gt;In addition to the dependency issues, I realised that I was using a theme that was not being maintained anymore. The author himself had moved to Hugo and I was left with an outdated theme.&lt;/p&gt;
&lt;p&gt;Last but not least, the javascript library I was using to generate the indexing and search functionality was also not being maintained anymore.&lt;/p&gt;
&lt;h2 id=&#34;how-did-i-migrate&#34;&gt;How did I migrate?&lt;/h2&gt;
&lt;p&gt;Both Pelican and Hugo are static site generators, and they both expects the content to be in Markdown format. This made the migration process a lot easier. By the way, there are some differences in the syntax of the Markdown files, and other few differences in the front matter (the metadata inside the MarkDown file), so I decided to write a small script to convert the files.&lt;/p&gt;
&lt;p&gt;You can find the full script here &lt;a class=&#34;link&#34; href=&#34;https://gist.github.com/andreagrandi/0a7bf6e217d6561b00b6a5de6211ddaa&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gist.github.com/andreagrandi/0a7bf6e217d6561b00b6a5de6211ddaa&lt;/a&gt; but I have to warn you that it&amp;rsquo;s very specific to my blog (because of how I structured the content in Pelican and because of how I&amp;rsquo;m structuring it in Hugo) and it may not work for you. However, it can be a good starting point if you want to migrate from Pelican to Hugo.&lt;/p&gt;
&lt;p&gt;Other than migrating the content, I had to find a new theme and customise it to my needs. This honestly took most of the time. I&amp;rsquo;m really bad with CSS and I had to learn a lot of new things. I&amp;rsquo;m still not 100% happy with the result, but I think it&amp;rsquo;s good enough for now.&lt;/p&gt;
&lt;p&gt;The theme I picked comes with a built-in search functionality, so I don&amp;rsquo;t have to worry about that anymore.&lt;/p&gt;
&lt;p&gt;Finally I had to rewrite the CircleCI configuration file to build the site with Hugo instead of Pelican. This took me a bit of try and error, but I managed to get it working.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m very happy with the result. The site is easy to manage and I don&amp;rsquo;t have to worry about dependencies anymore. I&amp;rsquo;m also happy with the new theme, even if I still have to tweak it a bit (ie: comments don&amp;rsquo;t seem to be working yet). I wish I had done this migration earlier, but I&amp;rsquo;m glad I did it now. I hope you like the new look and if you find any issues, please let me know.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How to show a cover image in Pelican based blog posts</title>
        <link>https://www.andreagrandi.it/posts/how-to-show-cover-image-pelican-blog-posts/</link>
        <pubDate>Tue, 06 Feb 2024 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/how-to-show-cover-image-pelican-blog-posts/</guid>
        <description>&lt;img src="https://www.andreagrandi.it/posts/how-to-show-cover-image-pelican-blog-posts/pelican-website-banner.jpeg" alt="Featured image of post How to show a cover image in Pelican based blog posts" /&gt;&lt;p&gt;Once you have written and published an article, it’s very likely that you will want to &lt;strong&gt;share&lt;/strong&gt; it on &lt;strong&gt;social media&lt;/strong&gt; or send to your friends on a messaging app.&lt;/p&gt;
&lt;p&gt;One method to make the link more “attractive” is to include a &lt;strong&gt;cover image&lt;/strong&gt; that will be shown in the link preview.&lt;/p&gt;
&lt;p&gt;How do you set a cover image? You need to use a particular &lt;strong&gt;Open Graph&lt;/strong&gt; tag named &lt;code&gt;og:image&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/how-to-show-cover-image-pelican-blog-posts/pelican-website-banner.jpeg&#34;
	width=&#34;1792&#34;
	height=&#34;1024&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;A pelican with some code in the background &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;420px&#34;
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;open-graph&#34;&gt;Open Graph&lt;/h2&gt;
&lt;p&gt;Open Graph is a &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Facebook_Platform#Open_Graph_protocol&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;protocol&lt;/a&gt; created by &lt;del&gt;Facebook&lt;/del&gt; &lt;strong&gt;Meta&lt;/strong&gt; to facilitate sharing articles and web pages on social media.&lt;/p&gt;
&lt;p&gt;The syntax is very simple and all you have to do is to include a few meta tags in the header of your web page.&lt;/p&gt;
&lt;p&gt;The most common tags to include are these ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;og:title&lt;/code&gt; is used as the main title of the page. It’s usually the biggest text being rendered&lt;/li&gt;
&lt;li&gt;&lt;code&gt;og:description&lt;/code&gt; is the additional text shown below the title&lt;/li&gt;
&lt;li&gt;&lt;code&gt;og:image&lt;/code&gt; this is probably the most important tag to set, because it takes the biggest space wherever it’s being rendered&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pelican&#34;&gt;Pelican&lt;/h2&gt;
&lt;p&gt;Depending on the template you use, your Pelican based website may already support the &lt;code&gt;og:image&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;For example in my case I need to add the &lt;code&gt;Cover&lt;/code&gt; attribute to my page meta tags, like I did for this article:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-MarkDown&#34; data-lang=&#34;MarkDown&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Title: How to show a cover image in Pelican based blog posts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date: 2024-02-06 22:03
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Author: Andrea Grandi
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Category: Development
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Tags: Pelican, Python, blog, writing, images, cover, template, open, graph, meta
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Slug: how-to-show-cover-image-pelican-blog-posts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Status: published
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Summary: How to add a cover image to Pelican based blog posts, so that when the article is shared on social media the image is shown in the preview.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Cover: images/2024/02/pelican-website-banner.jpeg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The template has a sub template (in my case it’s located &lt;a class=&#34;link&#34; href=&#34;https://github.com/andreagrandi/andreagrandi.it/blob/master/themes/Flex/templates/partial/og_article.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;) may have something like this to render the image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-jinja&#34; data-lang=&#34;jinja&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;cover&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;article.metadata&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;meta property=&amp;#34;og:image&amp;#34; content=&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;SITEURL&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;article.metadata&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;cover&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;x&#34;&gt;&amp;lt;meta property=&amp;#34;og:image&amp;#34; content=&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;SITELOGO&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;}}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;x&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;{%&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;endif&lt;/span&gt; &lt;span class=&#34;cp&#34;&gt;%}&lt;/span&gt;&lt;span class=&#34;x&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you don’t specify a Cover, the template will use your &lt;code&gt;SITELOGO&lt;/code&gt; image.&lt;/p&gt;
&lt;p&gt;If your template doesn’t have something like this, you may have to use one of the following &lt;strong&gt;plugins&lt;/strong&gt;. For the specific instructions about how to use them, please refer to their readme on GitHub.&lt;/p&gt;
&lt;h3 id=&#34;pelican-seo-plugin&#34;&gt;pelican-seo plugin&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/pelican-plugins/seo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pelican-seo&lt;/a&gt; is a useful addition to your Pelican based website, even if your template already supports cover images, because it automatically adds all the Open Graph tags, which are useful to &lt;strong&gt;boost the SEO&lt;/strong&gt; of your website.&lt;/p&gt;
&lt;h3 id=&#34;featured-image-plugin&#34;&gt;featured-image plugin&lt;/h3&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/pelican-plugins/featured-image&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;featured-image&lt;/a&gt; is a much simpler plugin. All it does is to check if an image has already been included in the meta tags. If it’s not present, it tries to get the first one found in the page.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Adding a cover image to your blog posts may seem a small thing, but it can make a huge difference if you decide to share your articles on social media.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Improve your Pelican based website SEO by adding canonical url</title>
        <link>https://www.andreagrandi.it/posts/improve-pelican-based-website-seo-adding-canonical-url/</link>
        <pubDate>Wed, 14 Oct 2020 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/improve-pelican-based-website-seo-adding-canonical-url/</guid>
        <description>&lt;p&gt;You may have notice that a few days ago this website changed its template. I&amp;rsquo;m still using &lt;a class=&#34;link&#34; href=&#34;https://github.com/getpelican/pelican&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pelican&lt;/a&gt; static generator,
but I switched to a template named &lt;a class=&#34;link&#34; href=&#34;https://github.com/alexandrevicenzi/Flex&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Flex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The template is really nice and it&amp;rsquo;s also optimised for mobile clients, but it&amp;rsquo;s not very optimised for SEO.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m in no way an expert, so I tried to research for ways to optimise Pelican based websites and I discovered something I didn&amp;rsquo;t know.&lt;/p&gt;
&lt;h2 id=&#34;content-duplication&#34;&gt;Content Duplication&lt;/h2&gt;
&lt;p&gt;If you are, like me, hosting your website on GitHub static pages, you should know that your published content is also duplicated on GitHub.
For example: the pages you see on &lt;a class=&#34;link&#34; href=&#34;https://www.andreagrandi.it&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.andreagrandi.it&lt;/a&gt; are all available here &lt;a class=&#34;link&#34; href=&#34;https://github.com/andreagrandi/andreagrandi.github.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/andreagrandi/andreagrandi.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a problem for search engines, because the content is the same, but they don&amp;rsquo;t know which one is the website you would like to be found in the search results.&lt;/p&gt;
&lt;h2 id=&#34;canonical-url&#34;&gt;Canonical URL&lt;/h2&gt;
&lt;p&gt;To solve this problem, pages needs to include a section like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;canonical&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://www.andreagrandi.it/2020/10/11/python39-introduces-removeprefix-removesuffix/&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;So even if that page is found &lt;a class=&#34;link&#34; href=&#34;https://github.com/andreagrandi/andreagrandi.github.io/blob/master/2020/10/11/python39-introduces-removeprefix-removesuffix/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;on GitHub&lt;/a&gt; Google will know that the &amp;ldquo;official&amp;rdquo; page is located at the &lt;code&gt;canonical&lt;/code&gt; url and will use that url in the search results.&lt;/p&gt;
&lt;h2 id=&#34;how-to-fix-your-pelican-template&#34;&gt;How to fix your Pelican template&lt;/h2&gt;
&lt;p&gt;Adding the canonical url in Pelican based websites is quite simple. You need to add a section like this to your &lt;code&gt;base.html&lt;/code&gt; template file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    {% if article %}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;canonical&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{{ SITEURL }}/{{ article.url }}&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    {% endif%}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;At this point, just rebuild and publish your pages and you are done!&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.kmonsoor.com/pelican-how-to-make-seo-friendly/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.kmonsoor.com/pelican-how-to-make-seo-friendly/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://moz.com/learn/seo/canonicalization&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://moz.com/learn/seo/canonicalization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Migrating from WordPress to a static generated website</title>
        <link>https://www.andreagrandi.it/posts/migrating-from-wordpress-to-static-generated-website/</link>
        <pubDate>Sun, 02 Jul 2017 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/migrating-from-wordpress-to-static-generated-website/</guid>
        <description>&lt;p&gt;As you may have noticed, my website looks very different compared to a few days ago.
It&amp;rsquo;s just a different theme or template, I completely changed how the pages are generated and
I&amp;rsquo;m hosting it in a completely different way.&lt;/p&gt;
&lt;h3 id=&#34;a-brief-history&#34;&gt;A brief history&lt;/h3&gt;
&lt;p&gt;When I started this blog 10 years ago, I was hosting it on a shared hosting service and it was based on &lt;strong&gt;WordPress&lt;/strong&gt;.
I then decided to keep WordPress as backend (I don&amp;rsquo;t like PHP very much but I wasn&amp;rsquo;t even good at front end development at the time,
so using a tool that allowed me to concentrate on the content rather than on design was a natural choice for me) but to move my website
to a &lt;strong&gt;VPS&lt;/strong&gt; on &lt;strong&gt;DigitalOcean&lt;/strong&gt;, where I&amp;rsquo;ve self-hosted &lt;strong&gt;Nginx + PHP + MySQL&lt;/strong&gt; and even Postfix for email aliases until a few days ago.&lt;/p&gt;
&lt;h3 id=&#34;why-moving-to-a-static-website&#34;&gt;Why moving to a static website?&lt;/h3&gt;
&lt;p&gt;In these three or four years I&amp;rsquo;ve been using a VPS, I must say I&amp;rsquo;ve been good enough (or maybe lucky?) at keeping &amp;ldquo;bad people&amp;rdquo; out
of my server, but it&amp;rsquo;s true that &lt;strong&gt;maintaining a VPS can be very time consuming&lt;/strong&gt; and you can never be sure that your website is always safe.
I&amp;rsquo;ve heard about static website before, but I was a bit skeptic because I had not spent enough time investigating all the possibilities
(search and comments are still possible, thanks to external services and plugins).&lt;/p&gt;
&lt;p&gt;Another advantage of a static website is that I can perfectly &amp;ldquo;run&amp;rdquo; (preview) on my local computer without publishing it online. Pages can be rendered locally
and will appear in the browser exactly as they will appear once published online.&lt;/p&gt;
&lt;p&gt;If you use a tool like WordPress, you need to be constantly connected to Internet to write any change. With static pages &lt;strong&gt;I can write my content offline&lt;/strong&gt;
(so I can do it while commuting on the train or while I&amp;rsquo;m flying somewhere) and publish it once I&amp;rsquo;m back online.&lt;/p&gt;
&lt;h3 id=&#34;pelican&#34;&gt;Pelican&lt;/h3&gt;
&lt;p&gt;The tool that I&amp;rsquo;m using to generate this website is called &lt;a class=&#34;link&#34; href=&#34;https://blog.getpelican.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pelican&lt;/a&gt;.
There are many &lt;a class=&#34;link&#34; href=&#34;https://www.staticgen.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;static website generators&lt;/a&gt;, the reason why I chose Pelican is because it&amp;rsquo;s written in &lt;strong&gt;Python&lt;/strong&gt;,
so if I need to do any change I can do them and because its templates use Jinja2 which I&amp;rsquo;m already familiar with. It can also import posts from WordPress
(and I had over 180 posts to import from my previous website) so if you are migrating from it it&amp;rsquo;s a good choice. Please note that the import script is not perfect
and that you may have to adjust some formatting here and there.&lt;/p&gt;
&lt;h3 id=&#34;a-new-deployment-pipeline&#34;&gt;A new deployment pipeline&lt;/h3&gt;
&lt;p&gt;When you use WordPress your website is already online and all you have to do is to login, use the integrated editor, write content and finally publish it.
A static website doesn&amp;rsquo;t have any admin tool, it&amp;rsquo;s just static pages. How do you publish content then? There are of course multiple solutions available.
In my case my website source code is hosted in &lt;a class=&#34;link&#34; href=&#34;https://github.com/andreagrandi/andreagrandi.it&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;a repository on GitHub&lt;/a&gt;. When I commit on &lt;strong&gt;master&lt;/strong&gt; branch
there is a webhook that triggers a &lt;a class=&#34;link&#34; href=&#34;https://github.com/andreagrandi/andreagrandi.it/blob/master/.travis.yml&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;build job&lt;/a&gt; on &lt;a class=&#34;link&#34; href=&#34;https://travis-ci.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TravisCI&lt;/a&gt;.
TravisCI fetches the latest source code, installs Pelican on the CI and builds the static pages. Once the build is finished, a &lt;a class=&#34;link&#34; href=&#34;https://github.com/andreagrandi/andreagrandi.it/blob/master/deploy.sh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;bash script&lt;/a&gt; is used to &lt;strong&gt;publish&lt;/strong&gt;
the generated pages on the static website hosting service.&lt;/p&gt;
&lt;h3 id=&#34;hosting-a-static-website&#34;&gt;Hosting a static website&lt;/h3&gt;
&lt;p&gt;The good thing about hosting a static website is that you don&amp;rsquo;t need a database so you can host it almost anywhere at a cheaper price or even for free.
In my case I&amp;rsquo;ve decided to use &lt;strong&gt;GitHub pages&lt;/strong&gt;, mainly for simplicity. Every GitHub user can have a static website hosted at &amp;lt;yourusername&amp;gt;.github.io for free.
To start using it, you just have to create a repository named &amp;lt;yourusername&amp;gt;.github.io under your GitHub account. In my case the repository is &lt;a class=&#34;link&#34; href=&#34;https://github.com/andreagrandi/andreagrandi.github.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/andreagrandi/andreagrandi.github.io&lt;/a&gt;. My deploy script simply takes the generated content
that is in the output/ folder and &lt;strong&gt;git push&lt;/strong&gt; it on this repository. Once the website has been pushed to git, it&amp;rsquo;s immediately available at &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://andreagrandi.github.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://andreagrandi.github.io&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;cloudflare&#34;&gt;CloudFlare&lt;/h4&gt;
&lt;p&gt;GitHub Pages service has a little limitation: you can either have your website served from a URL similar to the one I&amp;rsquo;ve just mentioned, including SSL support &lt;em&gt;or&lt;/em&gt; you can use your own domain, but &lt;strong&gt;you can&amp;rsquo;t have both things&lt;/strong&gt; (SSL + custom domain). To workaround this, you can instruct your domain registrar (in my case is &lt;a class=&#34;link&#34; href=&#34;https://www.gandi.net/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Gandi.net&lt;/a&gt;) to let CloudFlare manage your domain and just enabling &amp;ldquo;Full SSL&amp;rdquo; support will do the trick. I won&amp;rsquo;t repeat here how to use CloudFlare since they have a very nice tutorial explaining how to configure their service to be used with GitHub Pages: &lt;a class=&#34;link&#34; href=&#34;https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/&lt;/a&gt;. Remember to include a &lt;strong&gt;CNAME&lt;/strong&gt; file containing your domain name and let your static generetor put it on the root of your website, otherwise GitHub pages won&amp;rsquo;t serve the pages correctly.&lt;/p&gt;
&lt;h4 id=&#34;why-not-amazon-s3&#34;&gt;Why not Amazon S3?&lt;/h4&gt;
&lt;p&gt;While I was looking for instructions about how to host a static websites, I found many examples of websites using Amazon S3. There is nothing wrong with using this service (just keep in mind that it&amp;rsquo;s not free, Amazon charges you for space usage and requests, so keep an eye on the AWS bill) but the way these websites were using it was completely wrong. The most common error I noticed was the fact they were enabling the &lt;strong&gt;flexible SSL&lt;/strong&gt; option on CloudFlare: this means that the connection between the visitor and CloudFlare was encrypted (and visitor could see the the SSL enabled) but the connection between CloudFlare and Amazon S3 was being served with &lt;strong&gt;HTTP only&lt;/strong&gt;, meaning that potentially the pages could have been modified before being served. Infact Amazon doesn&amp;rsquo;t serve the S3 website buckets with SSL, they use plain HTTP (Why are you doing this Amazon?!). To use the S3 bucket correctly one should also configure Route 53 (to manage DNS) and CloudFront (the Amazon equivalent of CloudFlare service, beware because this is also charged separately depending on usage/traffic), making the whole setup a bit more complicated.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I finally moved away from my VPS and from now on I will be able to concentrate my time on content only instead of spending part of it to maintain my server. Last but not least, the possibility to write my content offline, will hopefully allow me to write from places (train, airplane) where I&amp;rsquo;ve never written from before. If you have any suggestion or if if you notice any error, feel free to leave a comment here below. In alternative, since now this blog is completely open source and on GitHub, you can fork it and make a pull request!&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
