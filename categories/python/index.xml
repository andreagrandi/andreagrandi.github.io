<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Python on Andrea Grandi</title>
        <link>https://www.andreagrandi.it/categories/python/</link>
        <description>Recent content in Python on Andrea Grandi</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 21 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://www.andreagrandi.it/categories/python/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Skipping tests depending on the Python version</title>
        <link>https://www.andreagrandi.it/posts/skipping-tests-depending-python-version/</link>
        <pubDate>Thu, 21 Feb 2019 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/skipping-tests-depending-python-version/</guid>
        <description>&lt;p&gt;Sometimes we want to run certain tests only on a specific version of Python.&lt;/p&gt;
&lt;p&gt;Suppose you are migrating a large project from Python 2 to Python 3 and you know in advance that certain tests won&amp;rsquo;t run
under Python 3.&lt;/p&gt;
&lt;p&gt;Chances are that during the migration you are already using the &lt;a class=&#34;link&#34; href=&#34;https://pythonhosted.org/six/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;six&lt;/a&gt; library. The &lt;strong&gt;six&lt;/strong&gt; libraries have
two boolean properties which are initialised to &lt;code&gt;True&lt;/code&gt; depending on the Python version which is being used: &lt;code&gt;PY2&lt;/code&gt; when running under Python 2
and &lt;code&gt;PY3&lt;/code&gt; when running under Python 3.&lt;/p&gt;
&lt;p&gt;This library, combined with the &lt;strong&gt;skipIf&lt;/strong&gt; method of &lt;a class=&#34;link&#34; href=&#34;https://docs.python.org/3/library/unittest.html#skipping-tests-and-expected-failures&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;unittest library&lt;/a&gt;
can be used to easily skip tests when using Python 3:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;six&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;unittest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyTestCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unittest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TestCase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nd&#34;&gt;@unittest.skipIf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;six&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PY3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;not compatible with Python 3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;test_example&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# This test won&amp;#39;t run under Python 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;
&lt;p&gt;Thanks to my colleague &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/valnico&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Nicola&lt;/a&gt;&lt;/strong&gt; for giving me the inspiration to write this post.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Installing Python and virtualenv on MacOS</title>
        <link>https://www.andreagrandi.it/posts/installing-python-and-virtualenv-on-osx/</link>
        <pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/installing-python-and-virtualenv-on-osx/</guid>
        <description>&lt;p&gt;Every time I need to install Python on MacOS or whenever a colleague asks for help, I have to search fo the most updated instructions on Google, and every time I find different ways of doing the exact same thing.&lt;/p&gt;
&lt;p&gt;Tired of this, I decided to write down my own notes. Please note that I don&amp;rsquo;t claim this to be the best way of installing Python on MacOS. It works fine for me so use it at your own risk.&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;p&gt;To follow these instructions you need to at least have installed &lt;strong&gt;brew&lt;/strong&gt; on MacOS. Please follow the instructions on the official website: &lt;a class=&#34;link&#34; href=&#34;https://brew.sh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://brew.sh&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;installing-python-37x-and-python-27x&#34;&gt;Installing Python 3.7.x and Python 2.7.x&lt;/h2&gt;
&lt;p&gt;Even if I strongly suggest to start every new project with Python 3 (since Python 2 will only be supported until the end of 2019), there may be use cases when version 2 is still required, so I will give you the instructions to install both.&lt;/p&gt;
&lt;h3 id=&#34;installing-python-37x&#34;&gt;Installing Python 3.7.x&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;brew install python
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This will install Python 3 by default.&lt;/p&gt;
&lt;h3 id=&#34;installing-python-27x&#34;&gt;Installing Python 2.7.x&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;brew install python@2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This will install version 2 of Python.&lt;/p&gt;
&lt;h3 id=&#34;add-the-python-locations-to-path&#34;&gt;Add the Python locations to PATH&lt;/h3&gt;
&lt;p&gt;Edit your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt; and add this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;export PATH=&amp;#34;/usr/local/opt/python/libexec/bin:/usr/local/bin:$PATH&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;You will need to close your terminal and reopen it for the changes to be applied. Once you have done it, you can verify if Python 3 and Python 2 have been installed correctly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python --version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Python 3.7.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python2 --version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Python 2.7.15
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;install-virtualenv-and-virtualenvwrapper&#34;&gt;Install virtualenv and virtualenvwrapper&lt;/h2&gt;
&lt;p&gt;When working with Python, it&amp;rsquo;s a good thing not to install packages system wide, but confine them in virtual environments. A good and well tested way of doing that is to use &lt;code&gt;virtualenv&lt;/code&gt; (and its companion &lt;code&gt;virtualenvwrapper&lt;/code&gt;) which makes the most common operations easier.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install virtualenv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install virtualenvwrapper
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Those (and only those) two packages will be installed system wide, because we will need them to be available outside of a virtual environment.&lt;/p&gt;
&lt;h3 id=&#34;configure-virtualenv&#34;&gt;Configure virtualenv&lt;/h3&gt;
&lt;p&gt;Edit again your &lt;code&gt;.bashrc&lt;/code&gt; (or &lt;code&gt;.zshrc&lt;/code&gt;) and add these lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;export WORKON_HOME=~/.virtualenvs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[ -f /usr/local/bin/virtualenvwrapper.sh ] &amp;amp;&amp;amp; source /usr/local/bin/virtualenvwrapper.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This will configure the default location where to store your virtual environments and will run a command every time you open a new terminal, to make sure &lt;code&gt;virtualenvwrapper&lt;/code&gt; can work correctly.&lt;/p&gt;
&lt;h2 id=&#34;test-if-the-installed-tools-are-working&#34;&gt;Test if the installed tools are working&lt;/h2&gt;
&lt;p&gt;To make sure everything has been configured correctly, please close and reopen your terminal and let&amp;rsquo;s try to create a new virtual environment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkvirtualenv test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;which should output something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Using base prefix &amp;#39;/usr/local/Cellar/python/3.7.1/Frameworks/Python.framework/Versions/3.7&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;New python executable in /Users/andrea/.virtualenvs/test/bin/python3.7
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Also creating executable in /Users/andrea/.virtualenvs/test/bin/python
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Installing setuptools, pip, wheel...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;done.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/predeactivate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/postdeactivate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/preactivate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/postactivate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/get_env_details
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(test) ➜  ~
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;If you see something similar, it means that the virtual environment has been created correctly. Please note that by default this command will create an environment base on Python 3. Do you need to create one for Python 2? No problem, you just need to do the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkvirtualenv -p /usr/local/bin/python2 test
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;which should output this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Running virtualenv with interpreter /usr/local/bin/python2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;New python executable in /Users/andrea/.virtualenvs/test/bin/python2.7
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Also creating executable in /Users/andrea/.virtualenvs/test/bin/python
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Installing setuptools, pip, wheel...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;done.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/predeactivate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/postdeactivate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/preactivate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/postactivate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;virtualenvwrapper.user_scripts creating /Users/andrea/.virtualenvs/test/bin/get_env_details
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(test) ➜  ~
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s all you have to do to install and configure Python and virtualenv on MacOS. If you have problems, comments or questions, feel free to leave a comment on this post.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Why I mentor on Exercism.io</title>
        <link>https://www.andreagrandi.it/posts/why-i-mentor-on-exercism/</link>
        <pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/why-i-mentor-on-exercism/</guid>
        <description>&lt;p&gt;Exercism (&lt;a class=&#34;link&#34; href=&#34;https://exercism.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://exercism.io&lt;/a&gt;) is a platform that has been created to help people improving their coding skills, thanks to the volunteers mentoring the students. There are tracks for almost all the popular languages and each track has coding tests that the students can download, solve offline using their preferred editor, and test the solution against the provided unit tests. Once the solution is ready to be reviewed (or even if it&amp;rsquo;s not complete but the student needs help), it can be submitted to the website and it will go in a queue where the first available mentor will pick it and start mentoring.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;service is free&lt;/strong&gt; to use for all the students and &lt;strong&gt;the mentors are all volunteers&lt;/strong&gt; (this doesn&amp;rsquo;t mean that the platform doesn&amp;rsquo;t have any costs. If you are curious about the resources needed to keep the platform alive, you can give a look at &lt;a class=&#34;link&#34; href=&#34;https://www.reddit.com/r/Python/comments/9tugvn/exercismio_needs_python_mentors/e8zy5mq/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this answer on Reddit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I found out about the platform, I decided to use it (as student) to &lt;strong&gt;improve my Go coding skills&lt;/strong&gt;. I must say that I&amp;rsquo;ve been learning a lot from the mentors and some of them are putting a lot of effort to give you all the possible advices to improve your coding style. In a single exercise once, I learnt at least five things about Go I didn&amp;rsquo;t know before!&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been a Python developer (professionally) for the last 5 years, but I&amp;rsquo;ve never considered myself an &amp;ldquo;expert&amp;rdquo;. I decided to give it a try with mentoring, because I felt I wanted to &lt;strong&gt;give something back to the community&lt;/strong&gt;, so I registered as mentor too and started mentoring in the Python track.&lt;/p&gt;
&lt;p&gt;The first surprise has been that mentoring other students, I was probably learning more than how much I was teaching. First of all, once you already know how to solve a problem, it&amp;rsquo;s always interesting to look at other possible solutions. I&amp;rsquo;ve found sometimes that students were providing better (more concise and readable) solutions than mine. Last but not least, before advising someone about conding style or a more idiomatic solution, I always double check things from different sources. There is nothing wrong making mistakes, especially if you are learning&amp;hellip; but it would be damaging for the student if I was teaching them something wrong, so I need to be sure about what I say. This of course makes me study, even the basic things, again and again and at the end of the day, my skills are better too.&lt;/p&gt;
&lt;p&gt;Once you join the mentors group, you are invited to a private Slack where you can count on the help of other mentors (we have channels for each track/language) or ask questions. So, if you are not sure about something, you can always ask around.&lt;/p&gt;
&lt;p&gt;If my story and experience convinced you, &lt;strong&gt;Exercism is looking for more mentors!&lt;/strong&gt; The more we have available, the less time the students have to wait in a queue to be mentored. You can find all the instructions at this address &lt;a class=&#34;link&#34; href=&#34;https://mentoring.exercism.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mentoring.exercism.io&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Using ipdb with Python 3.7.x breakpoint</title>
        <link>https://www.andreagrandi.it/posts/using-ipdb-with-python-37-breakpoint/</link>
        <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/using-ipdb-with-python-37-breakpoint/</guid>
        <description>&lt;p&gt;Python 3.7.x introduced a &lt;a class=&#34;link&#34; href=&#34;https://docs.python.org/3/whatsnew/3.7.html#pep-553-built-in-breakpoint&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;new method to insert a breakpoint&lt;/a&gt; in the code.
Before Python 3.7.x to insert a debugging point we had to write &lt;code&gt;import pdb; pdb.set_trace()&lt;/code&gt; which honestly I could never remember (and I also created a snippet on VS Code to auto complete it).&lt;/p&gt;
&lt;p&gt;Now you can just write &lt;code&gt;breakpoint()&lt;/code&gt; that&amp;rsquo;s it!&lt;/p&gt;
&lt;p&gt;Now&amp;hellip; the only problem is that by default that command will use &lt;strong&gt;pdb&lt;/strong&gt; which is not exactly the best debugger you can have. I usually use &lt;strong&gt;ipdb&lt;/strong&gt; but there wasn&amp;rsquo;t an intuitive way of using it&amp;hellip; and no, just installing it in your virtual environment, it won&amp;rsquo;t be used by default.&lt;/p&gt;
&lt;p&gt;How to use it then? It&amp;rsquo;s very simple. The new debugging command will read an environment variable named &lt;strong&gt;PYTHONBREAKPOINT&lt;/strong&gt;. If you set it properly, you will be able to use ipdb instead of pdb.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;export PYTHONBREAKPOINT=ipdb.set_trace
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;At this point, any time you use &lt;code&gt;breakpoint()&lt;/code&gt; in your code, &lt;strong&gt;ipdb&lt;/strong&gt; will be used instead of &lt;strong&gt;pdb&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;references&#34;&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://hackernoon.com/python-3-7s-new-builtin-breakpoint-a-quick-tour-4f1aebc444c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hackernoon.com/python-3-7s-new-builtin-breakpoint-a-quick-tour-4f1aebc444c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Using Python PyPy in a virtual environment</title>
        <link>https://www.andreagrandi.it/posts/using-python-pypy-in-a-virtual-environment/</link>
        <pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/using-python-pypy-in-a-virtual-environment/</guid>
        <description>&lt;p&gt;Sometimes we need to test if our code also works with
&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;http://pypy.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PyPy&lt;/a&gt;&lt;/strong&gt; implementation of &lt;strong&gt;Python&lt;/strong&gt;. Assuming you
have already installed it in your system, first find out where it is
installed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;which pypy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/usr/local/bin/pypy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;then you need &lt;strong&gt;mkvirtualenv&lt;/strong&gt; to create a virtual environment that will
use this runtime:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkvirtualenv -p /usr/local/bin/pypy pypy-test
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Running virtualenv with interpreter /usr/local/bin/pypy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;New pypy executable in pypy-test/bin/pypy
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Installing setuptools, pip, wheel...done.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;pypy-test&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;➜  ~  python
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Python 2.7.10 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;f3ad1e1e1d6215e20d34bb65ab85ff9188c9f559, Sep &lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; 2015, 06:26:30&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;PyPy 2.6.1 with GCC 4.2.1 Compatible Apple LLVM 6.1.0 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;clang-602.0.53&lt;span class=&#34;o&#34;&gt;)]&lt;/span&gt; on darwin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Type &lt;span class=&#34;s2&#34;&gt;&amp;#34;help&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;credits&amp;#34;&lt;/span&gt; or &lt;span class=&#34;s2&#34;&gt;&amp;#34;license&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; more information.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it! You can now use this virtual environment to run your Python
application using PyPy environment.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Getting started with BBC MicroBit and Python</title>
        <link>https://www.andreagrandi.it/posts/getting-started-with-bbc-microbit-and-python/</link>
        <pubDate>Thu, 10 Dec 2015 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/getting-started-with-bbc-microbit-and-python/</guid>
        <description>&lt;p&gt;A few days ago I had the great opportunity to attend an event organised
in collaboration with &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.python.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Python Software
Foundation&lt;/a&gt;&lt;/strong&gt;, a few &lt;strong&gt;primary school
teachers&lt;/strong&gt; and hosted by &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.computingatschool.org.uk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Computing at
School&lt;/a&gt;&lt;/strong&gt;, in &lt;strong&gt;London&lt;/strong&gt;. The
meeting was organised by &lt;strong&gt;Yvonne Walker&lt;/strong&gt; (from CAS) and &lt;strong&gt;Nicholas
Tollervey&lt;/strong&gt; (PSF). The aim of the meeting was for teachers and
developers to meet and discuss the opportunities offered
by &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://micropython.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MicroPython&lt;/a&gt;&lt;/strong&gt; on the &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.microbit.co.uk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;BBC
micro:bit&lt;/a&gt;&lt;/strong&gt;. During the event a
&lt;strong&gt;BBC&lt;/strong&gt; &lt;strong&gt;micro:bit&lt;/strong&gt; board was loaned to each person for the purpose of
developing Python scripts, MicroPython itself or educational resources
for the &lt;strong&gt;BBC micro:bit&lt;/strong&gt;. Nicholas made it very clear that there is an
&lt;strong&gt;NDA&lt;/strong&gt; in place until the device is delivered to the kids and explained
what we could or couldn&amp;rsquo;t do.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;computing_at_school_microbit_reduced.jpg&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/getting-started-with-bbc-microbit-and-python/computing_at_school_microbit_reduced.jpg&#34;
	width=&#34;4032&#34;
	height=&#34;3024&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;microbit&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;{width=100%}&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-board&#34;&gt;The Board&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;bbcfullbleed.jpg&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/getting-started-with-bbc-microbit-and-python/bbcfullbleed.jpg&#34;
	width=&#34;960&#34;
	height=&#34;623&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;board&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;154&#34;
		data-flex-basis=&#34;369px&#34;
	
&gt;{width=100%}&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The board is a 4 x 5 cm device with an &lt;strong&gt;ARM Cortex-M0&lt;/strong&gt; processor,
&lt;strong&gt;accelerometer&lt;/strong&gt; and magnetometer sensors, &lt;strong&gt;Bluetooth&lt;/strong&gt; and &lt;strong&gt;USB
connectivity&lt;/strong&gt;, a &lt;strong&gt;display&lt;/strong&gt; consisting of 25 LEDs, &lt;strong&gt;two programmable
buttons&lt;/strong&gt;, and can be powered by either USB or an external battery pack
(source: &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Micro_Bit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/Micro_Bit&lt;/a&gt; ).&lt;/p&gt;
&lt;h2 id=&#34;flashing-the-firmware&#34;&gt;Flashing the firmware&lt;/h2&gt;
&lt;p&gt;Once you get a new board, it probably doesn&amp;rsquo;t have a proper firmware and
application flashed. I suggest you to download the &lt;strong&gt;Python MicroBit
REPL&lt;/strong&gt; from this repository: &lt;a class=&#34;link&#34; href=&#34;https://github.com/ntoll/microrepl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ntoll/microrepl&lt;/a&gt;&lt;br&gt;
All you need to do is to connect the board to your computer, using a
&lt;strong&gt;micro-USB cable&lt;/strong&gt;. The device will be mounted as a volume. At this
point, drag &amp;amp; drop the file called
&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ntoll/microrepl/blob/master/firmware.hex&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;firmware.hex&lt;/a&gt;&lt;/strong&gt;
into the mounted volume. The firmware will be flashed and during the
operation you will see a yellow led flashing.&lt;/p&gt;
&lt;h2 id=&#34;usingmicropython-microbit-repl&#34;&gt;Using MicroPython micro:bit REPL&lt;/h2&gt;
&lt;p&gt;To start writing some Python code on micro:bit you first need to clone
this &lt;a class=&#34;link&#34; href=&#34;https://github.com/ntoll/microrepl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone git@github.com:ntoll/microrepl.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;once you have cloned the repository, you need to install the Python
dependencies (I suggest you to do it from inside a &lt;strong&gt;virtualenv&lt;/strong&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install -r requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;start the MicroPython REPL&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python microrepl.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;and the Python shell will open, so you can start writing commands, like
this one&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;microbit&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;➜  microrepl git:&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;master&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; python microrepl.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Quit: Ctrl+&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Stop program: Ctrl+C &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; Reset: Ctrl+D
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Type &lt;span class=&#34;s1&#34;&gt;&amp;#39;help()&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;without the quotes&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt; press ENTER.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import this
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The Zen of MicroPython, by Nicholas H.Tollervey
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Code,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hack it,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Less is more,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Keep it simple,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Small is beautiful,
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Be brave! Break things! Learn and have fun!
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Express yourself with MicroPython.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Happy hacking! :-&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt;&amp;gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;bbc-microbit-micropython-editor&#34;&gt;BBC micro:bit MicroPython Editor&lt;/h2&gt;
&lt;p&gt;Typing all the Python commands directly into the shell can be a bit
difficult. You can use a very nice and dedicated editor to write code
and produce the compiled application for the micro:bit. All you need to
do is clone this &lt;a class=&#34;link&#34; href=&#34;https://github.com/ntoll/upyed&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone git@github.com:ntoll/upyed.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Open the file named &lt;strong&gt;editor.html&lt;/strong&gt; with your browser and start writing
your code. When your code is done, you can generate the &lt;strong&gt;.hex&lt;/strong&gt; file
clicking on &lt;strong&gt;Download&lt;/strong&gt; button. To load the compiled application you
just need to drag &amp;amp; drop the .hex file to the mounted device, exactly
like you did the first time to flash it. If you need a reference for all
the methods and libraries available, you can consult the official
documentation
here &lt;a class=&#34;link&#34; href=&#34;http://microbit-micropython.readthedocs.org/en/latest/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://microbit-micropython.readthedocs.org/en/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ntoll/microrepl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ntoll/microrepl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/ntoll/upyed&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/ntoll/upyed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.microbit.co.uk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.microbit.co.uk/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://microbit-micropython.readthedocs.org/en/latest/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://microbit-micropython.readthedocs.org/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Understanding Python decorators optimizing a recursive Fibonacci implementation</title>
        <link>https://www.andreagrandi.it/posts/understanding-python-decorators-optimizing-a-recursive-fibonacci-implementation/</link>
        <pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/understanding-python-decorators-optimizing-a-recursive-fibonacci-implementation/</guid>
        <description>&lt;p&gt;A &lt;strong&gt;decorator&lt;/strong&gt; is a Python function that takes a &lt;em&gt;function object&lt;/em&gt; as
an argument and returns a function as a &lt;em&gt;value&lt;/em&gt;. Here is an example of
decorator definition:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# make a new function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;new_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# some code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;To apply a decorator to an existing function, you just need to put
&lt;strong&gt;@&lt;em&gt;decorator_name&lt;/em&gt;&lt;/strong&gt; in the line before its definition, like this
example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This decorator doesn&amp;rsquo;t do anything, so let&amp;rsquo;s think about a more concrete
problem we could solve using decorators.&lt;/p&gt;
&lt;h2 id=&#34;fibonaccisequence&#34;&gt;Fibonacci sequence&lt;/h2&gt;
&lt;p&gt;By definition, the first two numbers in the
&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Fibonacci_number&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Fibonacci&lt;/a&gt;&lt;/strong&gt; sequence
are either 1 and 1 or 0 and 1. All the other numbers are the sum of the
previous two numbers of the sequence. Example:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;0, 1: the third number is 1&lt;/li&gt;
&lt;li&gt;0, 1, 1: the fourth number is 2&lt;/li&gt;
&lt;li&gt;0, 1, 1, 2: the fifth number is 3&lt;/li&gt;
&lt;li&gt;0, 1, 1, 2, 3: the sixth number is 5&lt;/li&gt;
&lt;li&gt;etc&amp;hellip;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If we wanted to give a &lt;strong&gt;math definition&lt;/strong&gt; of the sequence, we could
describe it in this way:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;F(0): 0&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F(1): 1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;F(n): F(n-1) + F(n-2)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In &lt;strong&gt;Python&lt;/strong&gt; we could have a &lt;strong&gt;recursive function&lt;/strong&gt; like the following
one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;What&amp;rsquo;s the problem with this implementation? The code works as expected,
but it&amp;rsquo;s very &lt;strong&gt;inefficient&lt;/strong&gt;. The next picture will explain what
happens when we will try, for example, to calculate the 5th number of
the sequence:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;fibo.png&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/understanding-python-decorators-optimizing-a-recursive-fibonacci-implementation/fibo.png&#34;
	width=&#34;617&#34;
	height=&#34;359&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;fibo&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;412px&#34;
	
&gt;{ width=60%}&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fib(5) is Fib(4) + Fib(3), but Fib(4) itself is Fib(3) + Fib(2), and&amp;hellip;
the picture just tell us that we have calculated Fib(3) 2 times, Fib(2)
3 times, Fib(1) 5 times! Why are we repeating the same operation every
time if we already calculated the result?&lt;/p&gt;
&lt;h2 id=&#34;memoization&#34;&gt;Memoization&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In computing, &lt;strong&gt;memoization&lt;/strong&gt; is an optimization technique used
primarily to speed up computer programs by storing the results of
expensive function calls and returning the cached result when the same
inputs occur again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We need to store values of the sequence we have already calculated and
get them later when we need them. Let&amp;rsquo;s implement a simple memoization
decorator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;memoize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;decorated_function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decorated_function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The decorator defines a dict at the beginning that is used as a cache.
When we want to find the n number of the sequence, it first checks if
the value was already calculated and that value is returned instead of
being calculated again. If the value is not found, then the original
function is being called and then the value is store in the cache, then
returned to the caller.&lt;/p&gt;
&lt;h2 id=&#34;using-the-memoize-decorator&#34;&gt;Using the memoize decorator&lt;/h2&gt;
&lt;p&gt;How much this decorator can speed up our fib method? Let&amp;rsquo;s try to
benchmark the execution using Python
&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.python.org/2/library/timeit.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;timeit&lt;/a&gt;&lt;/strong&gt; module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# First example, not using the memoize decorator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;timeit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timeit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Timer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;fib(35)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;from __main__ import fib&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The required time to calculate the 35th number of the Fibonacci sequence
on my laptop is: &lt;strong&gt;4.73480010033&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Second example, using the memoize decorator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;timeit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;memoize&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;memoize&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# For convenience I put my decorator&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;c1&#34;&gt;# in a module named memoize.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@memoize&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timeit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Timer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;fib(35)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;from __main__ import fib&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The required time to calculate the 35th number of the Fibonacci sequence
on my laptop is: &lt;strong&gt;0.000133037567139&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Quite faster, don&amp;rsquo;t you think? I will let you try how long does it take
to calculate the 60th number of the sequence with and without using the
decorator. &lt;strong&gt;Hint:&lt;/strong&gt; grab a cup of coffee before beginning!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Django Notes: read values from settings in a safe way</title>
        <link>https://www.andreagrandi.it/posts/django-notes-read-values-from-settings-in-a-safe-way/</link>
        <pubDate>Sat, 29 Aug 2015 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/django-notes-read-values-from-settings-in-a-safe-way/</guid>
        <description>&lt;p&gt;Working on &lt;strong&gt;Django&lt;/strong&gt; projects I find very often that many developers
access the values that are defined in &lt;strong&gt;settings&lt;/strong&gt; in this way&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;django.conf&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;my_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MY_SETTING&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;What happens if &lt;code&gt;MY_SETTING&lt;/code&gt; has not been defined in &lt;strong&gt;settings.py&lt;/strong&gt;?
The code will raise an error and crash, of course. How can we make the
code more reliable? We could &lt;em&gt;try/except&lt;/em&gt; the code block that tries to
read the value and maybe set a value if we get an exception, but this
would not be a clean way to do this job.&lt;/p&gt;
&lt;p&gt;A cleaner way to do it is to use &lt;strong&gt;getattr&lt;/strong&gt; in this way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;django.conf&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;my_value&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;getattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;MY_SETTING&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;my-default-value&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;getattr&lt;/strong&gt; will try to read &lt;code&gt;MY_SETTING&lt;/code&gt; value from &lt;strong&gt;settings.py&lt;/strong&gt;,
if the value doesn&amp;rsquo;t exist &lt;code&gt;my_value&lt;/code&gt; will be assigned with
&lt;code&gt;&#39;my-default-value&#39;&lt;/code&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Django Notes: tests, setUp method and db data</title>
        <link>https://www.andreagrandi.it/posts/django-notes-tests-setup-method-and-db-data/</link>
        <pubDate>Thu, 23 Jul 2015 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/django-notes-tests-setup-method-and-db-data/</guid>
        <description>&lt;p&gt;This won&amp;rsquo;t be a full post, but just a quick note (probably the first one
of a serie) about development with Django.&lt;/p&gt;
&lt;p&gt;When we write a &lt;strong&gt;TestCase&lt;/strong&gt; test, if we have defined a &lt;strong&gt;setUp&lt;/strong&gt;
method, it will be called before the execution of each test. One could
think that the database is completely reset after each test, but this is
not true (not like I was thinking). After each test, whatever we wrote
on the database is rolled back. If we create a &amp;ldquo;Client&amp;rdquo; row (assuming we
have a model called Clients) in our setUp, when we call it the second
time the ID won&amp;rsquo;t be 1 as someone (me included) could expect. It will be
2 instead, because the database has not completely deleted and created
from scratch.&lt;/p&gt;
&lt;p&gt;This means that we can&amp;rsquo;t assume that our Client ID will always be 1 for
each test and we should rather reference to it in a dinamic way like:
&lt;strong&gt;self.client.id&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This could be a trivial thing for many people but I was not 100% sure
about this so I asked for a confirmation on &lt;strong&gt;#django&lt;/strong&gt; IRC room and
people (expecially &lt;strong&gt;apollo13&lt;/strong&gt;) was kind enough to explain me how it
works.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Soma.fm &#43; Spotify &#43; import.io &#43; Python mashup: automatically create a Spotify playlist with Soma.fm tracks</title>
        <link>https://www.andreagrandi.it/posts/soma-fm-spotify-import-io-python-mashup/</link>
        <pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/soma-fm-spotify-import-io-python-mashup/</guid>
        <description>&lt;p&gt;I&amp;rsquo;m a big fan of &lt;a class=&#34;link&#34; href=&#34;http://somafm.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Soma.fm&lt;/a&gt; (a 25+ channels streaming
radio based in San Francisco) and during the years I&amp;rsquo;ve been writing
clients for this radio for different mobile platforms (Maemo, MeeGo,
Harmattan, Windows Phone, BlackBerry 10, Jolla). I love in particular
their &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;http://somafm.com/indiepop/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Indie Pop Rock&lt;/strong&gt;&lt;/a&gt;&amp;rdquo; channel that
during these years made me discover some very good artists.&lt;/p&gt;
&lt;p&gt;When &lt;strong&gt;Spotify&lt;/strong&gt; finally was available in Italy (I&amp;rsquo;m still using it
right now that I live in the UK), something that I always missed was a
radio with the same good music. Why not just listening to Soma.fm?
Because I like to listen to the music while I commute and in the London
Underground it&amp;rsquo;s nearly impossible to have signal.&lt;/p&gt;
&lt;p&gt;So I was thinking: it would be nice to have &lt;strong&gt;a Spotify playlist with
Soma.fm tracks&lt;/strong&gt;. Wait a moment&amp;hellip;. &lt;strong&gt;I can do it!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;Frankenstein_Jr_Mel_Brooks_1974.jpg&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/soma-fm-spotify-import-io-python-mashup/Frankenstein_Jr_Mel_Brooks_1974.jpg&#34;
	width=&#34;542&#34;
	height=&#34;422&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Frankenstein\_Jr\_Mel\_Brooks\_1974&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;128&#34;
		data-flex-basis=&#34;308px&#34;
	
&gt;{ width=60% }&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Soma.fm publishes the tracks history with all the tracks streamed during
the last hour &lt;a class=&#34;link&#34; href=&#34;http://somafm.com/indiepop/songhistory.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://somafm.com/indiepop/songhistory.html&lt;/a&gt; so I just
needed something to parse this list for me and return me a well
formatted version.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a class=&#34;link&#34; href=&#34;https://import.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;import.io&lt;/strong&gt;&lt;/a&gt; (it&amp;rsquo;s a service that takes
a web page as input, parse the data and generates a RESTful API to
access this data) I was able to easily get the data I needed. At this
point I only needed to be able to loop through the list, search each
track on Spotify and add it to my playlist.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;source code is fully available&lt;/strong&gt; here
&lt;a class=&#34;link&#34; href=&#34;https://github.com/andreagrandi/spotisoma&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/andreagrandi/spotisoma&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you can&amp;rsquo;t just get the code and run it. You will need to get
your own &lt;strong&gt;import.io api key&lt;/strong&gt;, generate your import.io api url, get a
&lt;a class=&#34;link&#34; href=&#34;https://developer.spotify.com/technologies/libspotify/keys/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Spotify application
key&lt;/strong&gt;&lt;/a&gt; (the
old/deprecated one, since it was nearly impossible for me to use oauth
in a simple Python script due to the fact I didn&amp;rsquo;t have an endpoint to
receive the token back. You can get more informations here:
&lt;a class=&#34;link&#34; href=&#34;https://pyspotify.mopidy.com/en/latest/quickstart/#application-keys&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pyspotify.mopidy.com/en/latest/quickstart/#application-keys&lt;/a&gt;)
and set your env variables with your Spotify username and password. Last
but not least: the &lt;strong&gt;old Spotify library&lt;/strong&gt; only works with &lt;strong&gt;Premium&lt;/strong&gt;
accounts.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Travis-ci.org and Coveralls.io: Continuous Integration and QA made easy</title>
        <link>https://www.andreagrandi.it/posts/travis-ci-org-and-coveralls-io-qa-made-easy/</link>
        <pubDate>Sun, 02 Mar 2014 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/travis-ci-org-and-coveralls-io-qa-made-easy/</guid>
        <description>&lt;p&gt;Developing a large web application or before deploying some code is very
important to verify the quality of the code itself, check if we have
introduced any regression or bug and have something that tell us if we
are increasing or decreasing the quality of the code.&lt;/p&gt;
&lt;p&gt;Suppose we are in an organization or a company where the basic rule is:
&lt;strong&gt;master&lt;/strong&gt; branch is always ready/stable to be deployed. In a team
usually people work on personal branches, then when the code is stable
it&amp;rsquo;s merged with master.&lt;/p&gt;
&lt;p&gt;How do we check if the code is stable and ready to be merged? First of
all we need to cover all our code with &lt;strong&gt;proper tests&lt;/strong&gt; (I won&amp;rsquo;t go in
details about unit testing here, I assume that the reader knows what I&amp;rsquo;m
talking about), then we need to actually run them, possibly in an
isolated environment that is similar to the production one, and check if
they all pass. If they do, we are quite safe to merge our code with
master branch.&lt;/p&gt;
&lt;p&gt;How can we ensure that all the developers remember to run tests when
they push some new code? To make things a bit more real, let&amp;rsquo;s take the
example of a Python/Django product (or even a library) that currently
supports &lt;strong&gt;Python 2.6, 2.7, 3.3&lt;/strong&gt; and &lt;strong&gt;Django 1.4.x, 1.5.x, 1.6.x&lt;/strong&gt;.
The whole matrix consists of &lt;strong&gt;9 possible combinations&lt;/strong&gt;. Do we have to
manually run tests on 9 configurations? No, we don&amp;rsquo;t.&lt;/p&gt;
&lt;h2 id=&#34;travis-ciorg&#34;&gt;Travis-ci.org&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Travis&lt;/strong&gt; is a continuous integration tool that, once configured, takes
care of these tasks and let us save lot of time (that we can use to
actually write code). &lt;a class=&#34;link&#34; href=&#34;https://travis-ci.org&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Travis-ci.org&lt;/a&gt; is an
online service that works with &lt;a class=&#34;link&#34; href=&#34;https://github.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt; (it
requires we use GitHub as repository for our code), and once we have
connected the two accounts and configured a very simple file in our
projects, it&amp;rsquo;s automatically triggered when we push on our GitHub
repository.&lt;/p&gt;
&lt;p&gt;The configuration consists of adding a file named &lt;strong&gt;.travis.yml&lt;/strong&gt; in the
root of our project. A working example is available here
&lt;a class=&#34;link&#34; href=&#34;https://github.com/andreagrandi/workshopvenues/blob/master/.travis.yml&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/andreagrandi/workshopvenues/blob/master/.travis.yml&lt;/a&gt;
(all the env variables I set are not required normally, but that&amp;rsquo;s where
I save the values of my configuration, so they need to be initialized
before I can run tests).&lt;/p&gt;
&lt;p&gt;The service supports most of the languages that are commonly used and
even a good number of PAAS, making it very easy to automatically
&lt;strong&gt;deploy&lt;/strong&gt; our code. If it should not be enough for your needs, they
also expose a public &lt;strong&gt;API&lt;/strong&gt;. I suggest you to give a look at the
official documentation that will explain everything in details
&lt;a class=&#34;link&#34; href=&#34;http://docs.travis-ci.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://docs.travis-ci.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once everything is configured, we will have something like this on our
console
&lt;a class=&#34;link&#34; href=&#34;https://travis-ci.org/andreagrandi/workshopvenues/jobs/19882128&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://travis-ci.org/andreagrandi/workshopvenues/jobs/19882128&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;travis-ci-console.png&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/travis-ci-org-and-coveralls-io-qa-made-easy/travis-ci-console-1024x544.png&#34;
	width=&#34;1024&#34;
	height=&#34;544&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;travis-ci-console&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;451px&#34;
	
&gt;{ width=90% }&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If something goes wrong (if tests don&amp;rsquo;t pass for example) we receive a
notification with all the informations about the failing build, and if
we had configured an automatic deployment of course the code would not
be deployed in case of a failing build.&lt;/p&gt;
&lt;p&gt;Travis-ci.org is &lt;strong&gt;completly free&lt;/strong&gt; for opensource projects and has also
a paid version for private repositories.&lt;/p&gt;
&lt;h2 id=&#34;coverallsio&#34;&gt;Coveralls.io&lt;/h2&gt;
&lt;p&gt;There is a nice tool available for Python called
&lt;a class=&#34;link&#34; href=&#34;http://nedbatchelder.com/code/coverage&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;coverage&lt;/strong&gt;&lt;/a&gt;. Basically it
runs tests and checks the percentage of the source code that is covered
by tests, producing a nice report that shows us the percentage for every
single file/module and even the lines of code that have been tested.&lt;/p&gt;
&lt;p&gt;Thanks to Coveralls.io and the use of Travis, even these tasks are
completly automatized and the results are available online like in this
example &lt;a class=&#34;link&#34; href=&#34;https://coveralls.io/builds/560853&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://coveralls.io/builds/560853&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The configuration is quite easy. We need to connect our Coveralls.io
profile with GitHub, like we did for Travis-ci.org and then enable the
repository. To trigger Coveralls after a successful Travis build, we
need to have these lines at the end of our &lt;strong&gt;.travis.yml&lt;/strong&gt; file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;after_success&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;coveralls&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;coveralls-console.png&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/travis-ci-org-and-coveralls-io-qa-made-easy/coveralls-console-1024x767.png&#34;
	width=&#34;1024&#34;
	height=&#34;767&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;coveralls-console&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;{ width=90% }&lt;/a&gt;&lt;br&gt;
Even Coveralls.io is &lt;strong&gt;completly free&lt;/strong&gt; for opensource projects and
offers a paid version for private repositories.&lt;/p&gt;
&lt;h2 id=&#34;heroku&#34;&gt;Heroku&lt;/h2&gt;
&lt;p&gt;I use &lt;a class=&#34;link&#34; href=&#34;https://www.heroku.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Heroku&lt;/strong&gt;&lt;/a&gt; to host and run my web
application. Normally to deploy on Heroku you so something like this:
&lt;strong&gt;git push heroku master&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Adding these settings to the &lt;strong&gt;.travis.yaml&lt;/strong&gt; file, I can automatically
deploy the application on Heroku, if the build was successful:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;provider&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;heroku&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;api_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;R4LFkVu1/io9wSb/FvVL6UEaKU7Y4vfen/gCDe0OnEwsH+VyOwcT5tyINAg05jWXhRhsgjYT9AuyB84uCuNZg+lO7HwV5Q4WnHo5IVcCrv0PUq/CbRPUS4C2kDD7zbA1ByCd224tcfBmUtu+DPzyouk23oJH+lUwa/FeUk0Yl+I=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;workshopvenues&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;andreagrandi/workshopvenues&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;python workshopvenues/manage.py syncdb&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;python workshopvenues/manage.py migrate&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Not only the code is deployed, after deployment the &lt;strong&gt;South migrations&lt;/strong&gt; are executed.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;These two tools are saving me lot of time and are ensuring that the code
I release for a project I&amp;rsquo;m working on
(&lt;a class=&#34;link&#34; href=&#34;https://github.com/andreagrandi/workshopvenues&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;WorkshopVenues&lt;/strong&gt;&lt;/a&gt;)
is always tested when I push it on my repository.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Factoryboy: Creating data for unit tests in an easy way</title>
        <link>https://www.andreagrandi.it/posts/factoryboy-creating-data-for-unit-tests-in-an-easy-way/</link>
        <pubDate>Thu, 30 Jan 2014 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/factoryboy-creating-data-for-unit-tests-in-an-easy-way/</guid>
        <description>&lt;p&gt;I recently prepared a presentation about
&lt;a class=&#34;link&#34; href=&#34;http://factoryboy.readthedocs.org&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Factoryboy&lt;/strong&gt;&lt;/a&gt;, a Python library
that automates lot of the work when a developer needs to create some
data for unit testing.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve been using this library since a couple of months, both in the
company where I work and on a personal open source project I&amp;rsquo;m working
on. I will give a presentation about this library in an internal
workshop in my company and I&amp;rsquo;m available to give it in any Python/Django
related event around &lt;strong&gt;London&lt;/strong&gt;, if anyone is interested.&lt;/p&gt;
&lt;p&gt;The slides are already available:&lt;/p&gt;
&lt;p&gt;
&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;55509260698a013170b8769b07168819&#34; data-ratio=&#34;1.77777777777778&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How to fix pip under Debian 6.0 (squeeze): ImportError: cannot import name parser</title>
        <link>https://www.andreagrandi.it/posts/how-to-fix-pip-under-debian-6-0-squeeze-importerror-cannot-import-name-parser/</link>
        <pubDate>Thu, 02 May 2013 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/how-to-fix-pip-under-debian-6-0-squeeze-importerror-cannot-import-name-parser/</guid>
        <description>&lt;p&gt;The &lt;strong&gt;pip&lt;/strong&gt; utility distributed with Debian 6.0 has a bug once you
upgrade it with &lt;strong&gt;pip install -U pip&lt;/strong&gt;. You will easily get this error
when you try to install a new package with it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;root@worker2:~# pip install setproctitle
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Traceback &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;most recent call last&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;File &lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/bin/pip&amp;#34;&lt;/span&gt;, line 8, in 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;from pip.baseparser import parser
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ImportError: cannot import name parser
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Luckly there is a very easy workaround:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;easy_install pip
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;rm /usr/bin/pip
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ln -sv /usr/local/bin/pip-2.6 /usr/bin/pip
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install pip --upgrade
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Reference: &lt;a class=&#34;link&#34; href=&#34;http://blog.102web.ru/tag/virtualenvs/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://blog.102web.ru/tag/virtualenvs/&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Using virtualenv to manage multiple Python/Django environments in the same machine</title>
        <link>https://www.andreagrandi.it/posts/using-virtualenv-to-manage-multiple-pythondjango-environments-in-the-same-machine/</link>
        <pubDate>Thu, 25 Apr 2013 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/using-virtualenv-to-manage-multiple-pythondjango-environments-in-the-same-machine/</guid>
        <description>&lt;p&gt;Developing Python applications sometimes it&amp;rsquo;s useful to be able to test
the code with different environments, for example a particular version
of Python or a specific Django version etc&amp;hellip; Setting up many different
virtual machines would be really too much work and even using a chroot
environment is not what you need in some cases. Thanks to
&lt;a class=&#34;link&#34; href=&#34;https://github.com/pypa/virtualenv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;virtualenv&lt;/strong&gt;&lt;/a&gt; is it possible to
create a self contained Python environment with all the specific
libraries you may need. Using virtualenv is very easy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating the virtual environment: &lt;strong&gt;&lt;code&gt;virtualenvmyenv --no-site-packages&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Entering the virtual environment: &lt;strong&gt;&lt;code&gt;source myenv/bin/activate&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Deactivating the virtual environment: &lt;strong&gt;&lt;code&gt;deactivate&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s it! Once you&amp;rsquo;re inside the virtual environment you will be using
the Python libraries inside it. I suggest you to install all the Python
libraries you need using &lt;a class=&#34;link&#34; href=&#34;https://pypi.python.org/pypi/pip&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;pip&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Using Cloud9 IDE to develop Django applications</title>
        <link>https://www.andreagrandi.it/posts/using-cloud9-ide-to-develop-django-applications/</link>
        <pubDate>Sat, 05 Jan 2013 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/using-cloud9-ide-to-develop-django-applications/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.djangoproject.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Django&lt;/a&gt; is becoming very popular for
dynamic websites development (actually it already is) so I decided to
start learning it, with the help of a &lt;a class=&#34;link&#34; href=&#34;http://www.apress.com/9781430219361&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;good
book&lt;/a&gt;. To develop Django web
applications you need a good IDE and an environment that support at
least Python and a database (SQL Lite, MySQL etc&amp;hellip;). If you have
multiple machines and you alternate from multiple operating systems, the
best thing is using an environment that you can use everywhere, from
your favourite browser.&lt;/p&gt;
&lt;p&gt;Here comes &lt;a class=&#34;link&#34; href=&#34;https://c9.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Cloud9&lt;/strong&gt;&lt;/a&gt;, a very nice service that you
could define as the &amp;ldquo;Google Docs&amp;rdquo; for developers. C9 offers you a
shared, always available on the cloud, environment to write your code.
They also offer access to a Linux terminal (so you can install
applications, like Django) and your websites are istantly available
online for remote testing.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;c9ide_django.png&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/using-cloud9-ide-to-develop-django-applications/c9ide_django.png&#34;
	width=&#34;1004&#34;
	height=&#34;737&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;c9ide\_django&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;326px&#34;
	
&gt;{ width=100% }&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Installing and using Django on C9 is very easy. You just need to open a
new terminal tab (ALT+T) in C9 and execute these commands&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;easy_install django  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python ./../bin/django-admin.py startproject myproject  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python ./myproject/manage.py runserver &lt;span class=&#34;nv&#34;&gt;$OPENSHIFT_INTERNAL_IP&lt;/span&gt;:&lt;span class=&#34;nv&#34;&gt;$PORT&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;After these commands, your Django website will be live and accessible
using &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;http://projectname.username.c9.io&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://projectname.username.c9.io&lt;/a&gt;&lt;/strong&gt; (where &lt;em&gt;projectname&lt;/em&gt; is the
name of the project you just created and &lt;em&gt;username&lt;/em&gt; is your C9 user
name).&lt;/p&gt;
&lt;p&gt;source: &lt;a class=&#34;link&#34; href=&#34;http://support.cloud9ide.com/entries/21830983-django-development-in-c9&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://support.cloud9ide.com/entries/21830983-django-development-in-c9&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Backing up all your Flickr photos using Linux</title>
        <link>https://www.andreagrandi.it/posts/backing-up-all-your-flickr-photos-using-linux/</link>
        <pubDate>Thu, 05 Jan 2012 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/backing-up-all-your-flickr-photos-using-linux/</guid>
        <description>&lt;p&gt;I&amp;rsquo;ve been a Flickr pro user for 4 years, but the pro account costs
&lt;strong&gt;24,95$/year&lt;/strong&gt; and I was looking for something cheaper. Anyway I was
thinking that after all, even if I don&amp;rsquo;t renew my account, I can always
access to all my pictures&amp;hellip;. wrong! &lt;strong&gt;If you don&amp;rsquo;t renew your pro
Flickr account you can only access to the low resolution version of your
own pictures.&lt;/strong&gt; That&amp;rsquo;s not acceptable for me, so I decided to download
all my pictures and upload them somewhere else. Here comes the second
disappointment: &lt;strong&gt;there is no automatic way to download all your
pictures&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I simply had no time to write an application by myself, so I started
searching on Google to see if there was something available to do this
simple task. At the beginning I only found abandoned tools (closed
source, the API was expired ecc&amp;hellip;), paid tools, Windows only tools
ecc&amp;hellip; but finally I found this
post &lt;a class=&#34;link&#34; href=&#34;http://hivelogic.com/articles/backing-up-flickr/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://hivelogic.com/articles/backing-up-flickr/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is a Python script that automatically downloads all your Flickr
pictures getting the highest resolution available, you can download the
script from here &lt;a class=&#34;link&#34; href=&#34;https://github.com/dan/hivelogic-flickrtouchr&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/dan/hivelogic-flickrtouchr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The usage is very simple&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir FlickrBackupFolder  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python flickrtouchr.py FlickrBackupFolder  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;A browser&amp;rsquo;s window will be opened and you&amp;rsquo;ll be prompted for
authorization. After that, all you pictures will be downloaded.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Twitter client for Maemo in Qt &#43; Python: call for developers and UI designers</title>
        <link>https://www.andreagrandi.it/posts/twitter-client-for-maemo-in-qt-python-call-for-developers-and-ui-designers/</link>
        <pubDate>Mon, 22 Feb 2010 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/twitter-client-for-maemo-in-qt-python-call-for-developers-and-ui-designers/</guid>
        <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;My name&amp;rsquo;s &lt;strong&gt;Andrea Grandi&lt;/strong&gt;, I&amp;rsquo;m italian and I&amp;rsquo;m a Maemo
user/lover/contributor since the &lt;strong&gt;Nokia 770&lt;/strong&gt;. I love &lt;strong&gt;Python&lt;/strong&gt; as
development language and few months ago I also gave some contributions
to the &lt;a class=&#34;link&#34; href=&#34;http://pymaemo.garage.maemo.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;PyMaemo&lt;/strong&gt;&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;In these days I had the idea to start writing a &lt;strong&gt;Twitter&lt;/strong&gt; client for
&lt;strong&gt;Maemo&lt;/strong&gt; with a precise direction in my mind. I&amp;rsquo;ll try to explain all
my reasons here. First of all I&amp;rsquo;ve to thank the author of
&lt;a class=&#34;link&#34; href=&#34;http://mauku.henrikhedberg.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Mauku&lt;/strong&gt;&lt;/a&gt; client. I use it since its
first version and I&amp;rsquo;m quite happy with it. Then, why do I want to write
another one?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Maemo&lt;/strong&gt; (MeeGo) is moving to &lt;strong&gt;Qt&lt;/strong&gt; and for this reason I&amp;rsquo;m going
to use Qt, while Mauku uses Gtk.```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I&amp;rsquo;m learning Qt and what is better than writing a complete (but not
too complex) application to learn better?```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mauku is not free as lot of people could think. Reading the source
codeyou find this &amp;ldquo;You are NOT allowed to modify or redistribute the
source code.&amp;rdquo;, while I want to write a client and release it under
&lt;strong&gt;GPL2&lt;/strong&gt; or &lt;strong&gt;GPL3&lt;/strong&gt; license.```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mauku is not updated since some months and we have no news about it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I love Python and I like to write free software in this language.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I want to give to Maemo a stronger contribute.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;my-request-for-help&#34;&gt;My request for help&lt;/h2&gt;
&lt;p&gt;Before lot of people start writing their own client resulting in 4-5
twitter clients for Maemo, why don&amp;rsquo;t we join our strength and work to a
common project? I&amp;rsquo;m not a Python expert nor a Qt one, but I&amp;rsquo;ve some
experience as project/team leader and since this is not a complex
project, I would be glad to lead it. So, I&amp;rsquo;m looking for Python
developers, Qt developers, UI designers and whoever want to contribute
to this project. I still have to find a good name and logo for this
application.&lt;/p&gt;
&lt;p&gt;Who want to help me?&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Writing Python bindings of existing C libraries – (3) – Building and Installing with distutils</title>
        <link>https://www.andreagrandi.it/posts/writing-python-bindings-of-existing-c-libraries-building-and-installing-with-distutils/</link>
        <pubDate>Thu, 13 Aug 2009 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/writing-python-bindings-of-existing-c-libraries-building-and-installing-with-distutils/</guid>
        <description>&lt;p&gt;In the last post of this series, we saw how to write a simple binding
and we finished to build and install it manually. This is of course not
a good way to manage the building/installation procedure.&lt;/p&gt;
&lt;p&gt;In Python we can use a library called &lt;strong&gt;distutils&lt;/strong&gt; that let us to
automatize the building and installing process. I&amp;rsquo;ll use the &lt;strong&gt;foo&lt;/strong&gt;
source code to create the package, so it will be easier to understand.&lt;/p&gt;
&lt;h2 id=&#34;using-distutils&#34;&gt;Using distutils&lt;/h2&gt;
&lt;p&gt;All we have to do is to write a &lt;strong&gt;setup.py&lt;/strong&gt; file similar to this one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;distutils.core&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Extension&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;foomodule&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Extension&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sources&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;foo.c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;setup&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Foo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;1.0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;This is a package for Foo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ext_modules&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foomodule&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;As you can see, we have to first import needed modules with: &lt;strong&gt;from
distutils.core import setup, Extension&lt;/strong&gt;&lt;br&gt;
then we create an entry for each module we have (in this case just one,
&amp;ldquo;foomodule&amp;rdquo;). We then call the &lt;strong&gt;setup()&lt;/strong&gt; method passing it all the
parameters and our &lt;strong&gt;setup.py&lt;/strong&gt; is complete.&lt;/p&gt;
&lt;h2 id=&#34;building-and-installing&#34;&gt;Building and installing&lt;/h2&gt;
&lt;p&gt;To test it we can try to build the package in this way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python2.5 setup.py build
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;if we want to install the module in our system:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python2.5 setup.py install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Official Python documentation: &lt;a class=&#34;link&#34; href=&#34;http://docs.python.org/extending/building.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://docs.python.org/extending/building.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>PyMaemo (Python for Maemo) second beta release for Fremantle</title>
        <link>https://www.andreagrandi.it/posts/pymaemo-python-for-maemo-second-beta-release-for-fremantle/</link>
        <pubDate>Mon, 10 Aug 2009 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/pymaemo-python-for-maemo-second-beta-release-for-fremantle/</guid>
        <description>&lt;p&gt;The &lt;strong&gt;PyMaemo&lt;/strong&gt; team is pleased to announce the second beta release of
PyMaemo for &lt;strong&gt;Fremantle&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;This new release is available through the &lt;strong&gt;extras-devel&lt;/strong&gt; repository,
see installation instructions in&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;http://pymaemo.garage.maemo.org/sdk_installation.html#fremantle&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://pymaemo.garage.maemo.org/sdk_installation.html#fremantle&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-is-it&#34;&gt;What is it?&lt;/h2&gt;
&lt;p&gt;Python for Maemo (PyMaemo for short) main objective is to make possible
to use &lt;strong&gt;Python&lt;/strong&gt; programming language as the scripting and development
language for Maemo Platform, providing a better alternative for fast
prototyping and programming in Maemo environment besides the C
programming language.&lt;/p&gt;
&lt;p&gt;Python is for serious programming and to have fun. Python has a nice
syntax, it is easy to learn and powerful enough for a vast range of
applications, this is why we choose Python for Maemo.&lt;/p&gt;
&lt;h2 id=&#34;what-has-changed&#34;&gt;What has changed?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;New packages:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;python-mafw&lt;/strong&gt; (0.1-1maemo1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python bindings for the Media Application Framework [1]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Supported API is very basic at the moment, and there are some
bugs. Feedback is welcome!```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;python-hildondesktop&lt;/strong&gt; (0.0.3-1maemo1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python bindings for the home/status widgets API```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;python-notify&lt;/strong&gt; (0.1.1-2maemo1)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python bindings for libnotify```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;pyclutter&lt;/strong&gt; (0.8.0-1maemo2)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Python bindings for the Clutter API [2]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Experimental package, waiting for developer feedback&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Updated&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;packages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gnome&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.26&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maemo1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;major&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;upgrade&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;matching&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Debian&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;testing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;feedback&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;on&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;welcome&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replaces&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fairly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.18&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pygtk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.12&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maemo7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Enable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;glade&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;support&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maemo1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Updated&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;latest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;upstream&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;support&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;install&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deb&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;central&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;11.1&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maemo1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dependency&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;needed&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;by&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setuptools&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;defaults&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maemo3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Change&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PREVVER&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;debian&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;avoiding&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;python2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minimal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;versions&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;that&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;had&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr/bin/python&amp;#34;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;thus&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;conflicts&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;with&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minimal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hildo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maemo10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lots&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bug&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fixes&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setuptools&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.6&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c9&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maemo1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;support&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;install&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;layout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deb&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Bugs fixed:&lt;/strong&gt; MB#4530 [3], MB#4450 [4], MB#4629 [5], MB#4628 [6],&lt;br&gt;
MB#4647 [7], MB#4632 [8],  MB#4646 [9],  MB#4750 [10], MB#4749 [11],&lt;br&gt;
MB#4791 [12]&lt;/p&gt;
&lt;p&gt;## Known issues&lt;/p&gt;
&lt;p&gt;MB#4782 [13]: osso.Context causes segmentation fault&lt;br&gt;
MB#4821 [14]: Cannot create HildonTouchSelector with single text column&lt;br&gt;
MB#4824 [15]: python-mafw: source_browsing.py example does not work&lt;br&gt;
MB#4839 [16]: python-mafw: mafw.Registry lacks list_plugins() method&lt;br&gt;
MB#4849 [17]: python-mafw: MafwPluginDescriptorPublic structure is missing&lt;/p&gt;
&lt;p&gt;We will not migrate to python2.6 in fremantle due to a (unresolved) bug
(MB#4734 [18]), where a core SDK package explicitly conflicts with
python &amp;gt;= 2.6, preventing any further upgrades from the 2.5.x series.&lt;/p&gt;
&lt;p&gt;This release is supposed to be compatible with previous releases. If you
have any issues regarding building your Python application on Fremantle,
feel free to report it on the pymaemo-developers mailing list [19].&lt;/p&gt;
&lt;h2 id=&#34;acknowledgments&#34;&gt;Acknowledgments&lt;/h2&gt;
&lt;p&gt;Thanks to everybody who helped making this release possible.&lt;/p&gt;
&lt;p&gt;Bug reports, as always, should go to our Bugzilla [20]. Use the
&lt;strong&gt;pymaemo-developers&lt;/strong&gt; mailing list for help, feedback or suggestions.&lt;/p&gt;
&lt;p&gt;## References&lt;/p&gt;
&lt;p&gt;[1] &lt;a class=&#34;link&#34; href=&#34;https://garage.maemo.org/projects/mafw/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://garage.maemo.org/projects/mafw/&lt;/a&gt;&lt;br&gt;
[2] &lt;a class=&#34;link&#34; href=&#34;http://www.clutter-project.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.clutter-project.org/&lt;/a&gt;&lt;br&gt;
[3] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4530&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4530&lt;/a&gt;&lt;br&gt;
[4] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4450&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4450&lt;/a&gt;&lt;br&gt;
[5] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4629&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4629&lt;/a&gt;&lt;br&gt;
[6] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4628&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4628&lt;/a&gt;&lt;br&gt;
[7] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4647&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4647&lt;/a&gt;&lt;br&gt;
[8] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4632&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4632&lt;/a&gt;&lt;br&gt;
[9] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4646&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4646&lt;/a&gt;&lt;br&gt;
[10] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4750&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4750&lt;/a&gt;&lt;br&gt;
[11] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4749&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4749&lt;/a&gt;&lt;br&gt;
[12] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4791&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4791&lt;/a&gt;&lt;br&gt;
[13] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4782&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4782&lt;/a&gt;&lt;br&gt;
[14] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4821&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4821&lt;/a&gt;&lt;br&gt;
[15] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4824&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4824&lt;/a&gt;&lt;br&gt;
[16] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4839&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4839&lt;/a&gt;&lt;br&gt;
[17] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4849&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4849&lt;/a&gt;&lt;br&gt;
[18] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/show_bug.cgi?id=4734&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/show_bug.cgi?id=4734&lt;/a&gt;&lt;br&gt;
[19] &lt;a class=&#34;link&#34; href=&#34;https://garage.maemo.org/mailman/listinfo/pymaemo-developers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://garage.maemo.org/mailman/listinfo/pymaemo-developers&lt;/a&gt;&lt;br&gt;
[20] &lt;a class=&#34;link&#34; href=&#34;https://bugs.maemo.org/enter_bug.cgi?product=PyMaemo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bugs.maemo.org/enter_bug.cgi?product=PyMaemo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;credits&#34;&gt;Credits&lt;/h2&gt;
&lt;p&gt;This post was possible thanks to &lt;strong&gt;Anderson Lizardo&lt;/strong&gt;, from PyMaemo
team, who posted these informations on pymaemo-developers mailing list.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Writing Python bindings of existing C libraries – (2) – A simple example of binding</title>
        <link>https://www.andreagrandi.it/posts/writing-python-bindings-of-existing-c-libraries-a-simple-example-of-binding/</link>
        <pubDate>Thu, 06 Aug 2009 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/writing-python-bindings-of-existing-c-libraries-a-simple-example-of-binding/</guid>
        <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;As I promised in the preceding post, I&amp;rsquo;ll provide a very easy example of
a python binding. Let&amp;rsquo;s suppose we don&amp;rsquo;t want to use the methods
included in Python to sum two integer values and we want to do it in C
and then call the add method from a python script. I&amp;rsquo;ll write the
complete source code first and then I&amp;rsquo;ll explain all the parts of it.&lt;/p&gt;
&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;Python.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PyObject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;foo_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PyObject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PyObject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PyArg_ParseTuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;ii&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Py_BuildValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;i&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PyMethodDef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo_methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PyCFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;METH_VARARGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;PyMODINIT_FUNC&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;initfoo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Py_InitModule3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo_methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;My first extension module.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;how-it-works&#34;&gt;How it works&lt;/h2&gt;
&lt;p&gt;First of all we have to include &lt;strong&gt;Python.h&lt;/strong&gt; in our C file. This allows
us to write an extension for Python language. To be able to include this
header, we must have the python development packages installed in our
system. For example in Debian based distributions we can install them
with this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt-get install python2.5-dev
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Every module has at least three parts. In the first part we write
methods we want to call from the final python module: in this case we
have a method called &lt;strong&gt;foo_add&lt;/strong&gt; where &amp;ldquo;&lt;em&gt;foo&lt;/em&gt;&amp;rdquo; is the name of the
module and &amp;ldquo;&lt;em&gt;add&lt;/em&gt;&amp;rdquo; the name of the method. Every method is declared as
&lt;strong&gt;static PyObject&lt;/strong&gt;. The method does anything particular except calling
PyArg_ParseTuple to validate the input (we&amp;rsquo;ll discuss this later),
adding the two passed numbers and returning the result.&lt;/p&gt;
&lt;p&gt;In the second part we have something like a dictionary, defined as
static &lt;strong&gt;PyMethodDef&lt;/strong&gt; and called foo_methods (where &amp;ldquo;foo&amp;rdquo; again is the
name of the module). For each method we want to expose in our python
module, we have to add something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;add&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PyCFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo_add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;METH_VARARGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;where &amp;ldquo;&lt;em&gt;add&lt;/em&gt;&amp;rdquo; is the name of the method we want to be visible in our
module, &lt;em&gt;(PyCFunction)foo_add&lt;/em&gt; is a pointer to our foo_add method,
implemented in the C module, METH_VARARGS means that we want to pass
some parameters to the function and the last one would be the
description of the method (we can leave it NULL if we want).&lt;/p&gt;
&lt;p&gt;Third part allows us to register the defined method/s and the module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Py_InitModule3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo_methods&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;My first extension module.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;parsing-parameters&#34;&gt;Parsing Parameters&lt;/h3&gt;
&lt;p&gt;The &lt;strong&gt;PyArg_ParseTuple&lt;/strong&gt; function extracts arguments from the
&lt;strong&gt;PyObject&lt;/strong&gt; passed as parameter to the current method and follows
almost the sscanf syntax to parse parameters (in this case we had &lt;em&gt;&amp;ldquo;ii&amp;rdquo;&lt;/em&gt;
for two integers). You can fin the complete reference here:
&lt;a class=&#34;link&#34; href=&#34;http://docs.python.org/c-api/arg.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://docs.python.org/c-api/arg.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;## Building and installing&lt;/p&gt;
&lt;p&gt;To build the module, we have to be in the source directory and execute
this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gcc -shared -I/usr/include/python2.5 foo.c -o foo.so
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;then we&amp;rsquo;ve to copy the generated module to the python&amp;rsquo;s modules
directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cp foo.so /usr/lib/python2.5/site-packages/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;## Testing our module&lt;/p&gt;
&lt;p&gt;Testing the module is really easy. We&amp;rsquo;ve to start a python shell or
create a python script with the following source code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;if all is working fine, the printed result should be &lt;strong&gt;5&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://docs.python.org/extending/extending.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://docs.python.org/extending/extending.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.wrox.com/WileyCDA/WroxTitle/productCd-0764596543.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.wrox.com/WileyCDA/WroxTitle/productCd-0764596543.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>MAFW and Python: asking for developers feedback</title>
        <link>https://www.andreagrandi.it/posts/mafw-and-python-asking-for-developers-feedback/</link>
        <pubDate>Wed, 05 Aug 2009 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/mafw-and-python-asking-for-developers-feedback/</guid>
        <description>&lt;p&gt;MAFW is a new multimedia framework that will be used in Fremantle.&lt;/p&gt;
&lt;p&gt;The PyMaemo team is currently working on writing bindings for Python&lt;br&gt;
language for this library and at the moment we&amp;rsquo;ve released a 0.1&lt;br&gt;
version of python-mafw that you can install directly from Scratchbox&lt;br&gt;
repository.&lt;/p&gt;
&lt;p&gt;Not all the methods are implemented (you can manage the Registry and&lt;br&gt;
the Playlist, but nothing more), because even if we&amp;rsquo;re using codegen&lt;br&gt;
to generate bindings (and it&amp;rsquo;s helping us a lot), we&amp;rsquo;ve seen that at&lt;br&gt;
least 30-40 methods have to be overridden by hand so it&amp;rsquo;s taking us&lt;br&gt;
more time than we expected and we&amp;rsquo;re trying to organize how to&lt;br&gt;
continue this work.&lt;/p&gt;
&lt;p&gt;We would like to get feedback from python application developers and&lt;br&gt;
also from C application developers that are currently using MAFW so we&lt;br&gt;
can work on a &amp;ldquo;roadmap&amp;rdquo; that reflects what developers want:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What are the functionalities you&amp;rsquo;re using in your application that
you think they cannot miss in the Python binding?```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Have you already started using MAFW or even better python-mafw to
develop something?```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the currently missing method/methods you would like to be
implemented first?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Come on developers! We&amp;#39;re waiting for your feedback :)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Writing Python bindings of existing C libraries - (1) - Introduction</title>
        <link>https://www.andreagrandi.it/posts/writing-python-bindings-of-existing-c-libraries-1-introduction/</link>
        <pubDate>Mon, 03 Aug 2009 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/writing-python-bindings-of-existing-c-libraries-1-introduction/</guid>
        <description>&lt;p&gt;This summer I&amp;rsquo;m having the pleasure of working in
&lt;a class=&#34;link&#34; href=&#34;http://www.igalia.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Igalia&lt;/strong&gt;&lt;/a&gt; (a spanish free software company)
for a couple of months and they assigned me to an interesting project:
developing &lt;strong&gt;Python bindings&lt;/strong&gt; for &lt;strong&gt;MAFW&lt;/strong&gt; library (a &lt;strong&gt;Maemo&lt;/strong&gt;
multimedia library that will be used in &lt;strong&gt;Fremantle&lt;/strong&gt; release).&lt;/p&gt;
&lt;p&gt;Having the opportunity to work both with &lt;strong&gt;C&lt;/strong&gt; (yes, Python bindings are
almost C code) and &lt;strong&gt;Python&lt;/strong&gt; (it&amp;rsquo;s a good practice to write unittest of
all implemented methods) it&amp;rsquo;s a good way to improve my knowledges in
both languages and since I wasn&amp;rsquo;t able to find much documentation about
these kind of things, I&amp;rsquo;m going to share my own experiences.&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-binding&#34;&gt;What is a Binding?&lt;/h2&gt;
&lt;p&gt;A binding is a Python module, written in C language, that allows Python
developers to call functions from existing C libraries from their python
applications. It&amp;rsquo;s just like a &amp;ldquo;&lt;em&gt;bridge&lt;/em&gt;&amp;rdquo; from C world to Python one.&lt;/p&gt;
&lt;h2 id=&#34;why-writing-bindings&#34;&gt;Why writing bindings?&lt;/h2&gt;
&lt;p&gt;There are a couple of reasons to write python bindings instead of
writing a library in python language from scratch.&lt;/p&gt;
&lt;p&gt;First of all I don&amp;rsquo;t think is good duplicating code, so if a library
already exists and it&amp;rsquo;s written in C, why writing it again in another
language? There&amp;rsquo;s no reason. A lot of code already exist in C world and
all we have to do is to create a bridge with python world.&lt;/p&gt;
&lt;p&gt;Another good reason, in particular when a C library doesn&amp;rsquo;t exist yet,
is the fact that python code is slower than C code for some tasks (for
example multimedia codecs). In these cases is good to implement the core
library in C language and then create a python binding for it.&lt;/p&gt;
&lt;h2 id=&#34;coming-next&#34;&gt;Coming next&lt;/h2&gt;
&lt;p&gt;As the title of this post says, this is only an introduction to the
subjects I&amp;rsquo;m going to write about. If you have any particular request
about any argument you would like to read, please feel free to leave me
a comment. Next posts will talk about these things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A simple example of binding:&lt;/strong&gt; I&amp;rsquo;ll write a simple library in C
language and I&amp;rsquo;ll show how to create the relative python binding,
providing complete source code and an example for python developers.```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Building and installing python bindings with distutils:&lt;/strong&gt; I&amp;rsquo;ll
explain how to use &lt;strong&gt;distutils&lt;/strong&gt; to build and install the binding
(using the well know method &amp;ldquo;python setup.py install&amp;rdquo;).```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Defining new types:&lt;/strong&gt; this post will be about how to write new
types in C language and being able to use them from python code.```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using codegen to write bindings:&lt;/strong&gt; I&amp;rsquo;ll explain how to use
&lt;strong&gt;codegen&lt;/strong&gt; utils to automate lot of tasks, to generate the most
part of binding code and how to customize the generated code using
overrides.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>I officially joined the PyMaemo team</title>
        <link>https://www.andreagrandi.it/posts/i-officially-joined-the-pymaemo-team/</link>
        <pubDate>Sat, 25 Jul 2009 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/i-officially-joined-the-pymaemo-team/</guid>
        <description>&lt;p&gt;This summer I&amp;rsquo;m working for 2 months at &lt;a class=&#34;link&#34; href=&#34;http://www.igalia.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Igalia&lt;/a&gt;,
a spanish free software company, and they assigned me the project of
writing a &lt;strong&gt;Python binding&lt;/strong&gt; for &lt;strong&gt;MAFW&lt;/strong&gt; (a new multimedia library that
will be included in &lt;strong&gt;Freemantle&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;After few days I discovered that
&lt;a class=&#34;link&#34; href=&#34;http://garage.maemo.org/projects/pymaemo/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;PyMaemo&lt;/strong&gt;&lt;/a&gt; team was
already working to it, so I asked to join them and they accepted me!&lt;/p&gt;
&lt;p&gt;I really love Python language and since I think other developers love it
too, I think we should provide good bindings for every library available
in Maemo, so lot of developers can start writing their applications in
this language.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll work to this project full time until the first week of september,
so I hope to be able to learn a lot and to contribute as much as I can
to this project.&lt;/p&gt;
&lt;p&gt;If anyone else want to join PyMaemo team and help us to develop Python
bindings, I think he will be welcome!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PyngFM: Python implementation of Ping.fm API</title>
        <link>https://www.andreagrandi.it/posts/pyngfm-python-implementation-of-pingfm-api/</link>
        <pubDate>Thu, 02 Apr 2009 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/pyngfm-python-implementation-of-pingfm-api/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://code.google.com/p/pyngfm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/pyngfm-python-implementation-of-pingfm-api/icn_p.png&#34;
	width=&#34;600&#34;
	height=&#34;593&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ping.fm&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;101&#34;
		data-flex-basis=&#34;242px&#34;
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve just released &lt;a class=&#34;link&#34; href=&#34;http://code.google.com/p/pyngfm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PyngFM&lt;/a&gt;, a Python implementation of
&lt;a class=&#34;link&#34; href=&#34;http://ping.fm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Ping.fm&lt;/a&gt; API. Ping.fm is a simple service that allow
you to update multiple social networks (Facebook, Twitter, Jaiku ecc&amp;hellip;)
with a single post. You can find complete source code and documentation
on the official website: &lt;a class=&#34;link&#34; href=&#34;http://code.google.com/p/pyngfm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://code.google.com/p/pyngfm/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please contact me if you have any suggestion or if you find any bug in
the code, so I&amp;rsquo;ll be able to fix it.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Develop a GPS-aware application for the Nokia N810</title>
        <link>https://www.andreagrandi.it/posts/develop-a-gps-aware-application-for-the-nokia-n810/</link>
        <pubDate>Tue, 24 Feb 2009 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/develop-a-gps-aware-application-for-the-nokia-n810/</guid>
        <description>&lt;p&gt;&lt;strong&gt;Paul Ferrill&lt;/strong&gt; has written a serie of three articles about writing a
GPS-aware application for the Nokia N810, using the Maemo SDK, Eclipse
and PluThon plugin.&lt;/p&gt;
&lt;p&gt;Here is the complete serie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.ibm.com/developerworks/linux/library/l-gps-nokia1/index.html?S_TACT=105AGX03&amp;amp;S_CMP=EDU&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Develop a GPS-aware application for the Nokia N810, Part 1: Development environment:&lt;/a&gt;
Learn how to configure a development environment targeted at the
Nokia N810 Internet Tablet, including setting up Eclipse on a target
development machine for the Python language.```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.ibm.com/developerworks/linux/library/l-gps-nokia2/index.html?S_TACT=105AGX03&amp;amp;S_CMP=EDU&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Develop a GPS-aware application for the Nokia N810, Part 2: Consider your options:&lt;/a&gt;
Discover the details of code design, library selection, unit
testing, and user interface choices that make the most sense for
you.&lt;a class=&#34;link&#34; href=&#34;http://www.ibm.com/developerworks/linux/library/l-gps-nokia2/index.html?S_TACT=105AGX03&amp;amp;S_CMP=EDU&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;/a&gt;```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.ibm.com/developerworks/linux/library/l-gps-nokia3/index.html?S_TACT=105AGX03&amp;amp;S_CMP=EDU&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Develop a GPS-aware application for the Nokia N810, Part 3: Finish the job&lt;/a&gt;:
In this last of three installments, you&amp;rsquo;ll put the final touches to
the GPS trip tracker and get it ready for release.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>ControlEee - Control panel for EeePC</title>
        <link>https://www.andreagrandi.it/posts/controleee-control-panel-for-eeepc/</link>
        <pubDate>Wed, 01 Oct 2008 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/controleee-control-panel-for-eeepc/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/controleee-control-panel-for-eeepc/controleee.jpg&#34;
	width=&#34;337&#34;
	height=&#34;170&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;controlee&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;198&#34;
		data-flex-basis=&#34;475px&#34;
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ControlEee&lt;/strong&gt; è una piccola applicazione che ho scritto utilizzando &lt;strong&gt;Python/Qt4&lt;/strong&gt; e che
permette di &lt;strong&gt;abilitare/disabilitare&lt;/strong&gt; i dispositivi del &lt;strong&gt;bluetooth&lt;/strong&gt;,
della &lt;strong&gt;webcam&lt;/strong&gt; e della &lt;strong&gt;wlan&lt;/strong&gt; su un &lt;strong&gt;Asus EeePC&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Installando una versione personalizzata di Linux sugli EeePC (come ad
esempio la Ubuntu-eee), non si ha la possibilità di attivare/disattivare
questi dispositivi in maniera semplice (è possibile farlo solo da riga
di comando) e di conseguenza si rischia di tenere attivate queste
periferiche anche se non le utilizziamo, con lo svantaggio di
&lt;strong&gt;consumare inutilmente piu&amp;rsquo; batteria&lt;/strong&gt; di quella di cui abbiamo
bisogno.&lt;/p&gt;
&lt;p&gt;Non trovando niente di semplice di già pronto in giro, mi sono deciso a
scrivere questa utility. Al momento è in hosting presso &lt;strong&gt;Google Code&lt;/strong&gt;
e la potete trovare a questo indirizzo:
&lt;a class=&#34;link&#34; href=&#34;http://code.google.com/p/controleee/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://code.google.com/p/controleee/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Al momento l&amp;rsquo;applicazione è stata testata soltanto su un &lt;strong&gt;Asus EeePC
901&lt;/strong&gt; con la distribuzione &lt;strong&gt;Ubuntu-eee 8.04.1&lt;/strong&gt;, non è quindi garantito
il funzionamento anche sugli altri modelli e/o utilizzando altre
distribuzioni.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Skype SMS su Linux: grazie a Skype4Py si puo&#39;!</title>
        <link>https://www.andreagrandi.it/posts/skype-sms-su-linux-grazie-a-skype4py-si-puo/</link>
        <pubDate>Sun, 11 May 2008 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/skype-sms-su-linux-grazie-a-skype4py-si-puo/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/skype-sms-su-linux-grazie-a-skype4py-si-puo/skype_logo.thumbnail.jpg&#34;
	width=&#34;128&#34;
	height=&#34;128&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;SkypeLogo&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Il client di &lt;strong&gt;Skype&lt;/strong&gt; per Linux &lt;strong&gt;non supporta&lt;/strong&gt; al momento l&amp;rsquo;&lt;strong&gt;invio
degli SMS&lt;/strong&gt;. Questa puo&amp;rsquo; essere per molti una grossa limitazione, visto
che è molto conveniente come metodo per inviare gli sms (costano 10
centesimi) rispetto a molte tariffe in circolazione al momento, con i
principali gestori italiani.La mancanza di questa funzionalità è però
soltanto apparente! Infatti è stata già implementata a livello di
librerie di Skype ed è già disponibile tramite le API.&lt;/p&gt;
&lt;p&gt;Grazie alla libreria &lt;a class=&#34;link&#34; href=&#34;https://developer.skype.com/wiki/Skype4Py&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Skype4Py&lt;/strong&gt;&lt;/a&gt;, ufficialmente
supportata da &lt;strong&gt;Skype&lt;/strong&gt; e sviluppata da &lt;strong&gt;Arkadiusz Wahlig&lt;/strong&gt; (che ha
tenuto un talk proprio su questo argomento nella giornata di ieri del
&lt;a class=&#34;link&#34; href=&#34;http://www.pycon.it&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PyCon&lt;/a&gt; Due), è possibile scrivere applicazioni
multipiattaforma (Windows, Linux, Mac) che interagiscano con Skype.&lt;/p&gt;
&lt;p&gt;Una volta installata la libreria nel proprio sistema, dobbiamo soltanto
avviare il client Skype.&lt;/p&gt;
&lt;p&gt;Le applicazioni che possiamo scrivere, per automatizzare alcune funzioni
di Skype, sono moltissime. In questo caso particolare farò vedere un
piccolo script Python che invia un SMS utilizzando il client (ed il
credito) dell&amp;rsquo;istanza di Skype che sta girando sulla vostra macchina:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Skype4Py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;+393*******&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Messaggio di prova da PySms4Skype!&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;skype&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Skype4Py&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Skype&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;skype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FriendlyName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;PySms4Skype&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;skype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Attach&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sms&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;skype&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateSms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Skype4Py&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;smsMessageTypeOutgoing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Quando eseguite questo script, Skype vi chiedera&amp;rsquo; la &lt;strong&gt;conferma&lt;/strong&gt; per
autorizzare la vostra applicazione ad utilizzare le API, basterà quindi
dare conferma per continuare. Nello script ovviamente dovrete sostituire
il numero di telefono con uno valido.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Slides del talk su PyMaemo al PyCon Due</title>
        <link>https://www.andreagrandi.it/posts/slides-del-talk-su-pymaemo-al-pycon-due/</link>
        <pubDate>Sat, 10 May 2008 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/slides-del-talk-su-pymaemo-al-pycon-due/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/slides-del-talk-su-pymaemo-al-pycon-due/python-powered-h-140x182.thumbnail.jpg&#34;
	width=&#34;98&#34;
	height=&#34;128&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Python&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;76&#34;
		data-flex-basis=&#34;183px&#34;
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Per chi avesse seguito il mio talk su &lt;strong&gt;PyMaemo&lt;/strong&gt; al &lt;a class=&#34;link&#34; href=&#34;http://www.pycon.it&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;PyCon Due&lt;/strong&gt;&lt;/a&gt; a Firenze, metto a disposizione le slide che
ho utilizzato. Potete liberamente scaricarle, modificarle e
distribuirle.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slides ospitate sul sito di &lt;strong&gt;Slideshare&lt;/strong&gt;: &lt;a class=&#34;link&#34; href=&#34;http://www.slideshare.net/andy80/conferenza-pymaemo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.slideshare.net/andy80/conferenza-pymaemo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/kSfr4tcPNhbmCe&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/andy80/conferenza-pymaemo&#34; title=&#34;Conferenza Pymaemo&#34; target=&#34;_blank&#34;&gt;Conferenza Pymaemo&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;https://www.slideshare.net/andy80&#34; target=&#34;_blank&#34;&gt;Andrea Grandi&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;p&gt;Inoltre vi riporto un piccolo abstract del talk:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Il talk prevede una breve introduzione alla piattaforma Maemo ed ai
Nokia Internet Tablet, sia dal punto di vista dell&amp;rsquo;utente comune, sia da
quello dello sviluppatore.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Verrà poi spiegato come configurare ed installare l&amp;rsquo;ambiente
Scratchbox, il principale ambiente utilizzato per sviluppare
applicazioni per Maemo.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Infine verranno presentati due plugin per Eclipse: ESbox e PluThon. Il
primo si interfaccia con Eclipse e Scratchbox, permettendo di sviluppare
sia applicazione C/C++ che Python e di testarle all&amp;rsquo;interno
dell&amp;rsquo;ambiente Scratchbox. Il secondo è un plugin specifico per Python e
permette di eseguire e debuggare le applicazioni direttamente sul
dispositivo.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Inizia il PyCon: Richard Stallman oggi a Palazzo Vecchio (Firenze) ore 16:00</title>
        <link>https://www.andreagrandi.it/posts/inizia-il-pycon-richard-stallman-oggi-a-palazzo-vecchio-firenze-ore-1600/</link>
        <pubDate>Fri, 09 May 2008 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/inizia-il-pycon-richard-stallman-oggi-a-palazzo-vecchio-firenze-ore-1600/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/inizia-il-pycon-richard-stallman-oggi-a-palazzo-vecchio-firenze-ore-1600/rms1.thumbnail.jpg&#34;
	width=&#34;128&#34;
	height=&#34;96&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Richard Stallman&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Come da programma, oggi a &lt;a class=&#34;link&#34; href=&#34;http://maps.google.it/maps?f=q&amp;amp;hl=it&amp;amp;geocode=&amp;amp;q=palazzo&amp;#43;vecchio&amp;amp;sll=43.97404,10.93689&amp;amp;sspn=0.470428,1.284027&amp;amp;ie=UTF8&amp;amp;ll=43.769792,11.25663&amp;amp;spn=0.007376,0.020063&amp;amp;t=h&amp;amp;z=16&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Palazzo Vecchio&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(Firenze) ci sarà il talk di apertura del &lt;strong&gt;PyCon Italia 2008&lt;/strong&gt;, tenuto
dal leader e fondatore della &lt;a class=&#34;link&#34; href=&#34;http://www.fsf.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Free Software Foundation&lt;/strong&gt;&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;http://it.wikipedia.org/wiki/Stallman&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Richard Stallman&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Richard Stallman parlerà degli obiettivi e della filosofica del
Movimento per il Software Libero, e della storia e stato attuale del
sistema operativo &lt;strong&gt;GNU&lt;/strong&gt; che, in combinazione con il kernel &lt;strong&gt;Linux&lt;/strong&gt;,
è usato oggi da decine di milioni di utenti in tutto il mondo.&lt;/p&gt;
&lt;p&gt;L&amp;rsquo;evento di oggi è completamente gratuito e aperto a tutti (fino ad
esaurimento dei posti disponibili). Quelli che si sono registrati per il
PyCon avranno ovviamente la precedenza.&lt;/p&gt;
&lt;p&gt;Per ulteriori informazioni sull&amp;rsquo;evento e sul PyCon, potete consultare il
&lt;a class=&#34;link&#34; href=&#34;http://www.pycon.it/pycon2/schedule/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;sito ufficiale dell&amp;rsquo;evento&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Using GtkIconView in Python: a small tutorial</title>
        <link>https://www.andreagrandi.it/posts/using-gtkiconview-in-python-a-small-tutorial/</link>
        <pubDate>Tue, 15 Apr 2008 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/using-gtkiconview-in-python-a-small-tutorial/</guid>
        <description>&lt;p&gt;In these days I was looking for a simple tutorial to understand how to
use &lt;strong&gt;GtkIconView&lt;/strong&gt;, but the only thing I was able to find was an
example in PHP-Gtk. So I decided to translate it in &lt;strong&gt;Python&lt;/strong&gt; language,
thinking it would be useful for other people trying to use that Gtk
control. You can find the code here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;gtk&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;gobject&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;DEFAULT_IMAGE_WIDTH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Main Window setup  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;window&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gtk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WINDOW_TOPLEVEL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_size_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;240&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;destroy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gtk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main_quit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Python GtkIconView Test&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Add a VBox  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;vbox&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gtk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VBox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vbox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Setup Scrolled Window  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;scrolled_win&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gtk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScrolledWindow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;scrolled_win&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_policy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;POLICY_AUTOMATIC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gtk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;POLICY_AUTOMATIC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Setup ListStore to contain images and description  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gtk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ListStore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Pixbuf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gobject&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TYPE_STRING&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Create a tuple with image files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;immagini&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;BD786-TFR.jpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;guido_sottozero.jpg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;IMG_0056.JPG&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;movies_card.jpg&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;im&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;immagini&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;pixbuf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gtk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pixbuf_new_from_file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;pix_w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pixbuf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;pix_h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pixbuf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;new_h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pix_h&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_IMAGE_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pix_w&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Calculate the scaled height before resizing image&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;scaled_pix&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pixbuf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scale_simple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;DEFAULT_IMAGE_WIDTH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new_h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gtk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INTERP_TILES&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scaled_pix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;except&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Setup GtkIconView  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gtk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IconView&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;model&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Pass the model stored in a ListStore to the GtkIconView&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_pixbuf_column&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_text_column&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_selection_mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gtk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SELECTION_MULTIPLE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_columns&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_item_width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;150&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Pack objects and show them all  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;scrolled_win&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;view&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;vbox&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pack_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scrolled_win&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;show_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;gtk&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The important thing to notice is that you have to store all the images
in a &lt;strong&gt;GtkListStore&lt;/strong&gt; and pass it to the &lt;strong&gt;GtkIconView&lt;/strong&gt; as &lt;em&gt;&amp;ldquo;model&amp;rdquo;&lt;/em&gt;
parameter. I hope this example is clear. If you have any question,
please comment this post and I&amp;rsquo;ll try to answer.&lt;/p&gt;
&lt;p&gt;This is a screenshot of this example:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/using-gtkiconview-in-python-a-small-tutorial/gtkiconview_sample.png&#34;
	width=&#34;412&#34;
	height=&#34;270&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;gtkiconview&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;152&#34;
		data-flex-basis=&#34;366px&#34;
	
&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PyMaemo Talk on May 10th in Florence at PyCon2 Conference</title>
        <link>https://www.andreagrandi.it/posts/pymaemo-talk-on-may-10th-in-florence-at-pycon2-conference/</link>
        <pubDate>Wed, 09 Apr 2008 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/pymaemo-talk-on-may-10th-in-florence-at-pycon2-conference/</guid>
        <description>&lt;p&gt;&lt;strong&gt;PyCon2&lt;/strong&gt; is the second edition of the &lt;a class=&#34;link&#34; href=&#34;http://www.pycon.it/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Italian Python Conference&lt;/a&gt; and will
take place on &lt;strong&gt;May 9/10/11&lt;/strong&gt;, 2008 in &lt;strong&gt;Florence&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The conference is organized by &lt;strong&gt;Python Italia&lt;/strong&gt; and more than
&lt;strong&gt;300&lt;/strong&gt; developers, students and researchers
will be present for three days of tutorials and other important events.&lt;/p&gt;
&lt;p&gt;PyCon 2008 edition will be opened by &lt;strong&gt;Richard Stallman&lt;/strong&gt; with a keynote on &lt;strong&gt;Free Software&lt;/strong&gt; and &lt;strong&gt;Free Ethics&lt;/strong&gt;.
Other famous developers will be presento too: &lt;strong&gt;Alex Martelli&lt;/strong&gt;, &lt;strong&gt;Samuele Pedroni&lt;/strong&gt;, &lt;strong&gt;Brian Fitzpatrick&lt;/strong&gt; and many other.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll partecipate at the conference as speaker on May 10, with a talk on &lt;strong&gt;PyMaemo: Python for Nokia Internet Tablets&lt;/strong&gt;.
In particular I&amp;rsquo;ll talk about Maemo platform, Maemo SDK (how to install and configure it) and I&amp;rsquo;ll explain how to use the two Eclipse plugins
&lt;a class=&#34;link&#34; href=&#34;http://esbox.garage.maemo.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ESBox&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;http://pluthon.garage.maemo.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pluthon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to give me any suggestion or idea for this talk, please
leave me a comment on this post, so I&amp;rsquo;ll integrate it with my slides.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PyCon2: conferenza italiana dedicata al linguaggio Python</title>
        <link>https://www.andreagrandi.it/posts/pycon2-conferenza-italiana-dedicata-al-linguaggio-python/</link>
        <pubDate>Sun, 06 Apr 2008 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/pycon2-conferenza-italiana-dedicata-al-linguaggio-python/</guid>
        <description>&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;&lt;img src=&#34;https://www.andreagrandi.it/posts/pycon2-conferenza-italiana-dedicata-al-linguaggio-python/python-powered-h-140x182.thumbnail.jpg&#34;
	width=&#34;98&#34;
	height=&#34;128&#34;
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Python&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;76&#34;
		data-flex-basis=&#34;183px&#34;
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;pycon-due&#34;&gt;PyCon Due&lt;/h2&gt;
&lt;p&gt;è la seconda conferenza italiana dedicata al linguaggio di
programmazione &lt;strong&gt;Python&lt;/strong&gt;. La conferenza è organizzata da un gruppo di
appassionati e senza finalità di lucro; si prefigge la divulgazione di
Python, e di dare visibilità agli sviluppatori professionisti, studenti,
aziende e semplici interessati al linguaggio.&lt;/p&gt;
&lt;h2 id=&#34;dove-e-quando&#34;&gt;Dove e quando&lt;/h2&gt;
&lt;p&gt;La conferenza si tiene a &lt;strong&gt;Firenze&lt;/strong&gt; nelle giornate
di &lt;strong&gt;Venerdì 9&lt;/strong&gt;, &lt;strong&gt;Sabato 10&lt;/strong&gt; e &lt;strong&gt;Domenica 11 Maggio&lt;/strong&gt;. L&amp;rsquo;evento di
apertura si terrà a &lt;strong&gt;Palazzo Vecchio&lt;/strong&gt; nel pomeriggio di Venerdì,
durante il quale terrà un keynote &lt;strong&gt;Richard Stallman&lt;/strong&gt;. Sabato e
Domenica, al &lt;a class=&#34;link&#34; href=&#34;http://www.florence-hotels-laurus.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Viva Hotel
Laurus&lt;/strong&gt;&lt;/a&gt; (Via Cerretani 54/r),
nei pressi del Duomo, si svolgeranno 3 track parallele di conferenze.&lt;/p&gt;
&lt;h2 id=&#34;gli-interventi&#34;&gt;Gli Interventi&lt;/h2&gt;
&lt;p&gt;Durante la conferenza si terranno due tipi di interventi: i &lt;strong&gt;keynote&lt;/strong&gt; ed i &lt;strong&gt;talk&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I &lt;strong&gt;keynote&lt;/strong&gt; sono interventi di ampio respiro che trattano temi di
attualità del mondo dell&amp;rsquo;informatica; hanno una durata indicativa di 90&#39;
e verranno tenuti in occasione dell&amp;rsquo;evento di apertura di venerdì 9 ed
alla chiusura delle due giornate successive.&lt;/p&gt;
&lt;h2 id=&#34;i-talk&#34;&gt;I talk&lt;/h2&gt;
&lt;p&gt;sono invece interventi focalizzati su un particolare
argomento; hanno una durata indicativa di 45&amp;rsquo;, comprensivi del tempo per
le domande del pubblico. I talk di PyCon Due si tengono durante le
giornate di sabato 10 e domenica 11, e si dividono in tre track:
&amp;ldquo;&lt;em&gt;Scoprire Python&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;em&gt;Diffondere Python&lt;/em&gt;&amp;rdquo; e &amp;ldquo;&lt;em&gt;Imparare Python&lt;/em&gt;&amp;rdquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scoprire Python&lt;/strong&gt; è una track introduttiva su librerie, framework
e metodologie, pensata per chi si sta avvicinando al Python o
desidera una prima trattazione di un argomento;```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Diffondere Python&lt;/strong&gt; è una track dedicata ad aspetti più avanzati
del linguaggio, esempi di integrazione della piattaforma e casi
d&amp;rsquo;uso in azienda;```&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Imparare Python&lt;/strong&gt; è una track interattiva: i talk sono
parzialmente guidati dal pubblico, che discute la trattazione
dell&amp;rsquo;argomento insieme al relatore, proponendo scenari e commentando
le soluzioni proposte.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Registrazione&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;per&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;partecipare&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;evento occorre registrarsi. La&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;registrazione&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;puo&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; essere fatta direttamente sul [sito ufficiale del PyCon2](http://www.pycon.it). Sempre sul sito ufficiale, potrete trovare&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;breve&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;elenco delle conferenze che verranno fatte, non appena si&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;concluderanno&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;le&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;votazioni&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;per&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;il&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Call&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;For&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Paper&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;che&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sono&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;corso&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;questi&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;giorni&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Eclipse plugins for Maemo Development</title>
        <link>https://www.andreagrandi.it/posts/eclipse-plugins-for-maemo-development/</link>
        <pubDate>Tue, 26 Feb 2008 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/eclipse-plugins-for-maemo-development/</guid>
        <description>&lt;p&gt;&lt;strong&gt;Maemo Team&lt;/strong&gt; has just released a &lt;strong&gt;plugin&lt;/strong&gt; for &lt;strong&gt;Maemo Eclipse integration&lt;/strong&gt;.
This tool allows developers to use Eclipse IDE to develop and test Maemo applications.&lt;/p&gt;
&lt;p&gt;This release includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maemo &lt;strong&gt;PC Connectivity&lt;/strong&gt; version [0.1] (Beta)&lt;/li&gt;
&lt;li&gt;maemo &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;http://esbox.garage.maemo.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ESBox plugin&lt;/a&gt;&lt;/strong&gt; for Eclipse IDE version [1.3.6] (Beta)&lt;/li&gt;
&lt;li&gt;maemo &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;http://pluthon.garage.maemo.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Pluthon plugin&lt;/a&gt;&lt;/strong&gt; for Eclipse IDE version [0.1.7] (Beta)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Maemo PC connectivity packages are tools and other components developer
needs to install into his Internet Tablet to enable connectivity between
developer PC and Internet Tablet.&lt;/p&gt;
&lt;p&gt;Maemo ESBox plugin for Eclipse IDE integrates maemo SDK Scratchbox based
development environment to the Eclipse development environment. ESBox
plugin supports application developers using C, C++ or Python
programming language.&lt;br&gt;
Developers are able to do all their development work inside Eclipse,
from starting the project using template to packaging final application
into maemo installation package.&lt;/p&gt;
&lt;p&gt;Maemo Pluthon plugin for Eclipse IDE integrates Eclipse IDE development
environment to the Internet Tablet so that maemo Python developers do
not need to use maemo SDK and Scratchbox as development environment.
Maemo Pluthon plugin fully supports application development process with
Python where developer develops and tests his Python application
directly with Internet Tablet.&lt;/p&gt;
&lt;p&gt;You can find more informations on the official plugin websites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ESbox:&lt;/strong&gt; &lt;a class=&#34;link&#34; href=&#34;http://esbox.garage.maemo.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://esbox.garage.maemo.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PluThon:&lt;/strong&gt; &lt;a class=&#34;link&#34; href=&#34;http://pluthon.garage.maemo.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://pluthon.garage.maemo.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Utilizzare WordPress da remoto grazie a XML-RPC</title>
        <link>https://www.andreagrandi.it/posts/utilizzare-wordpress-da-remoto-grazie-a-xml-rpc/</link>
        <pubDate>Fri, 01 Feb 2008 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/utilizzare-wordpress-da-remoto-grazie-a-xml-rpc/</guid>
        <description>&lt;p&gt;Come molti utenti WordPress avranno già notato, esistono svariati client
per poter gestire il proprio blog, che possono essere utilizzati invece
della normale gestione via web. Gestire WordPress da un client nativo o
comunque da remoto, è possibile grazie ad
&lt;a class=&#34;link&#34; href=&#34;http://codex.wordpress.org/XML-RPC_Support&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;XML-RPC&lt;/a&gt;.Questo semplice
script Python vi mostrerà quanto sia semplice connettersi al proprio
blog ed invocare un metodo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;xmlrpclib&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Server&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://www.andreagrandi.it/xmlrpc.php&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;userinfo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blogger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getUserInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;userinfo&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;vi stamperà a video le informazioni sul vostro utente (ovviamente
dovrete sostituire l&amp;rsquo;URL con quello del vostro blog e mettere gli user e
password corretti.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Il crivello di Eratostene</title>
        <link>https://www.andreagrandi.it/posts/il-crivello-di-eratostene/</link>
        <pubDate>Wed, 30 Jan 2008 00:00:00 +0000</pubDate>
        
        <guid>https://www.andreagrandi.it/posts/il-crivello-di-eratostene/</guid>
        <description>&lt;p&gt;Questo codice Python di esempio, genera una lista di numeri primi che
vanno da 2 fino al numero passato come parametro.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;eratostene&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;primi&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;primi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;primi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;primi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;primi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;primi&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
